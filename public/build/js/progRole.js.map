{"version":3,"sources":["progRole.js"],"names":["gridOptions","ROLES_ACTIVOS","asignarEventos","document","addEventListener","e","key","cerrarVentana","configurarBotones","$","hide","click","resetearTabla","limpiarForm","dataGrid","getDataFromGrid","datosInsertar","filter","item1","unionArrays","find","item2","programa_id","nombre","rel","relacion","datosEliminar","length","crearRelacion","eliminarRelacion","inicializarPagina","iniciarTabla","headerName","field","width","cellRenderer","params","editButton","createElement","className","title","async","text","data","nombre_rol","val","rol_id","mostrarContenedorAltas","keydownListener","removeEventListener","actionContainer","classList","appendChild","headerClass","cellClass","traerProgRoles","respuesta","fetch","method","json","convert","verificarArray","gridApi","setGridOption","error","console","SwalToast","id_rol","show","editable","cellEditor","obtenerRelaciones","datos","FormData","append","body","map","item","JSON","stringify","exito","SwalLoad","setTimeout","swal","close","errorSMS","alertas"],"mappings":"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","file":"progRole.js","sourcesContent":["let gridOptions;\r\nlet ROLES_ACTIVOS = '';\r\n\r\n// Utilizando el Principio de Modularidad\r\n$(function () {\r\n    asignarEventos();\r\n    inicializarPagina();\r\n    configurarBotones();\r\n});\r\n\r\nfunction asignarEventos() {\r\n    document.addEventListener(\"keydown\", e => {\r\n        if (e.key === 'Escape') {\r\n            cerrarVentana('.contenedor-altas', ['#formAltas']);\r\n        }\r\n    });\r\n}\r\n\r\nfunction configurarBotones() {\r\n    $(\".contenedor-altas\").hide();\r\n\r\n    $(\"#btnCancel\").click(e => {\r\n        resetearTabla('#myGrid2', '#searchInput1');\r\n        limpiarForm(\"#formAltas\");\r\n        $(\".contenedor-altas\").hide();\r\n    });\r\n\r\n    $(\"#btnGuardar\").click(e => {\r\n        let dataGrid = getDataFromGrid();\r\n        let datosInsertar = ROLES_ACTIVOS.filter(function (item1) {\r\n            let unionArrays = dataGrid.find(function (item2) {\r\n                return item1.programa_id === item2.programa_id && item1.nombre === item2.nombre;\r\n            });\r\n            return unionArrays && !item1.rel && unionArrays.relacion;\r\n        });\r\n        let datosEliminar = ROLES_ACTIVOS.filter(function (item1) {\r\n            let unionArrays = dataGrid.find(function (item2) {\r\n                return item1.programa_id === item2.programa_id && item1.nombre === item2.nombre;\r\n            });\r\n            return unionArrays && item1.rel && !unionArrays.relacion;\r\n        });\r\n\r\n        if (datosInsertar.length > 0) crearRelacion(datosInsertar);\r\n        if (datosEliminar.length > 0) eliminarRelacion(datosEliminar);\r\n\r\n    });\r\n}\r\n\r\nfunction inicializarPagina() {\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'id',\r\n            field: 'rol_id',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Rol',\r\n            field: 'nombre_rol',\r\n            width: 400\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            cellRenderer: function (params) {\r\n                // Btn Editar\r\n                const editButton = document.createElement('I');\r\n                editButton.className = \"fa-regular fa-pen-to-square btn btn-editar\";\r\n                editButton.title = 'Editar';\r\n\r\n                editButton.addEventListener('click', async function () {\r\n                    $(\"#rol-title\").text(`Rol - ${params.data.nombre_rol}`);\r\n                    $('#rol_id').val(params.data.rol_id);\r\n\r\n                    await mostrarContenedorAltas(params.data.rol_id);\r\n\r\n                    function keydownListener(e) {\r\n                        if (e.key === 'Escape') {\r\n                            resetearTabla('#myGrid2', '#searchInput1');\r\n\r\n                            // Eliminar el event listener después de usarlo\r\n                            document.removeEventListener(\"keydown\", keydownListener);\r\n                        }\r\n                    }\r\n                    document.addEventListener(\"keydown\", keydownListener);\r\n                });\r\n\r\n                // Crea un contenedor para los botones y los agrega\r\n                const actionContainer = document.createElement('div');\r\n                actionContainer.classList = \"btn-cont centrado\";\r\n                actionContainer.appendChild(editButton);\r\n\r\n                return actionContainer;\r\n            },\r\n            width: 160,\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false\r\n        },\r\n    ];\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid');\r\n    traerProgRoles();\r\n}\r\n\r\n/*  FUNCIONES  */\r\nasync function traerProgRoles() {\r\n\r\n    try {\r\n        const respuesta = await fetch('roles/activos', {\r\n            method: 'GET',\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        let convert = verificarArray(data);\r\n        gridApi.setGridOption('rowData', convert);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\n\r\nasync function mostrarContenedorAltas(id_rol) {\r\n    $(\".contenedor-altas\").show();\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'id',\r\n            field: 'programa_id',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'nombre',\r\n            field: 'nombre',\r\n            width: 400\r\n        },\r\n        {\r\n            headerName: 'Selección',\r\n            field: 'relacion',\r\n            width: 150,\r\n            editable: true,\r\n            cellRenderer: 'agCheckboxCellRenderer',\r\n            cellEditor: 'agCheckboxCellEditor',\r\n        },\r\n    ];\r\n\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid2');\r\n    obtenerRelaciones(id_rol);\r\n}\r\n\r\nasync function obtenerRelaciones(id_rol) {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('rol_id', id_rol);\r\n\r\n        const respuesta = await fetch('progRole/relaciones', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        ROLES_ACTIVOS = data.map(item => ({\r\n            programa_id: item.programa_id,\r\n            nombre: item.nombre,\r\n            relacion: item.relacion\r\n        }));\r\n\r\n        let convert = verificarArray(data);\r\n        gridApi.setGridOption('rowData', convert);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n\r\n}\r\n\r\nasync function crearRelacion(datosInsertar) {\r\n\r\n    let rol_id = $(\"#rol_id\").val()\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('rol_id', rol_id);\r\n        datos.append('datosInsertar', JSON.stringify(datosInsertar));\r\n\r\n        const respuesta = await fetch('crear/progRoles', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n        // Registro Creado Exitosamente\r\n        if (data.exito == 1) {\r\n            SwalLoad('success', 'Éxito', 'Relación Creada Correctamente', false);\r\n            setTimeout(() => {\r\n                swal.close();\r\n                obtenerRelaciones(rol_id);\r\n            }, 1500);\r\n        } else if (data.exito == 0) {\r\n            SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            cerrarVentana('.contenedor-altas', ['#formAltas']);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\n\r\nasync function eliminarRelacion(datosEliminar) {\r\n\r\n    let rol_id = $(\"#rol_id\").val();\r\n\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('rol_id', rol_id);\r\n        datos.append('datosEliminar', JSON.stringify(datosEliminar));\r\n\r\n        const respuesta = await fetch('eliminar/progRoles', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            SwalLoad('success', 'Éxito', 'Relación Eliminada Correctamente', false);\r\n            setTimeout(() => {\r\n                swal.close();\r\n                obtenerRelaciones(rol_id);\r\n            }, 1500);\r\n        } else if (data.exito == 0) {\r\n            SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            cerrarVentana('.contenedor-altas', ['#formAltas']);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}"]}