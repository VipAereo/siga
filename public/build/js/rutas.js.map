{"version":3,"sources":["rutas.js"],"names":["gridOptions","AEROPUERTOS","asignarEventos","$","hide","aplicarMascaraKm","document","addEventListener","e","key","resetForm","getElementById","async","event","preventDefault","show","focus","data","obtenerAeropuertos","mostrarListaSearch","calcualarDistancia","configurarBotones","click","mostrarContenedorAltas","validateInputs","val","crearRuta","actualizarRuta","inicializarPagina","iniciarTabla","headerName","field","width","cellEditor","cellRenderer","params","value","editButton","createElement","className","title","ruta_id","distancia","estado_ruta","aeropuerto_id","text","nombre_aeropuerto","origen","nombre_origen","destino","nombre_destino","actionContainer","classList","appendChild","headerClass","cellClass","filter","traeRutas","cerrarVentana","origenLatLong","find","aeropuerto","latOrigen","latitud","lonOrigen","longitud","destLatLong","obtenerDistancia","latDest","lonDest","respuesta","fetch","method","json","convert","verificarArray","gridApi","setGridOption","error","console","SwalToast","SwalLoad","datos","FormData","append","body","exito","setTimeout","swal","close","errorSMS","alertas","valores","lat1_rad","degToRad","lon1_rad","lat2_rad","d_lat","d_lon","a","Math","sin","cos","atan2","sqrt","toFixed","deg","PI"],"mappings":"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","file":"rutas.js","sourcesContent":["let gridOptions;\r\nlet AEROPUERTOS;\r\n\r\n// Utilizando el Principio de Modularidad\r\n$(function () {\r\n    asignarEventos();\r\n    inicializarPagina();\r\n    configurarBotones();\r\n});\r\nfunction asignarEventos() {\r\n    // Ocultar Listados\r\n    $('.aeropSearch').hide();\r\n    $('.origenSearch').hide();\r\n    $('.destinoSearch').hide();\r\n\r\n    aplicarMascaraKm('distancia');\r\n\r\n    document.addEventListener(\"keydown\", e => {\r\n        if (e.key === 'Escape') {\r\n            resetForm();\r\n        }\r\n    });\r\n\r\n    // Lista Aeropuertos\r\n    document.getElementById(\"aeropuerto_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.aeropSearch').show();\r\n        $('.inAeropSrch').focus();\r\n        let data = await obtenerAeropuertos();\r\n        const listSearch = await mostrarListaSearch(data, '.aeropSearch', 'aeropuerto_id', 'municipio');\r\n    });\r\n\r\n    // Lista Origen\r\n    document.getElementById(\"origen\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.origenSearch').show();\r\n        $('.inOrigenSrch').focus();\r\n        let data = await obtenerAeropuertos();\r\n        const listSearch = await mostrarListaSearch(data, '.origenSearch', 'aeropuerto_id', 'municipio');\r\n        calcualarDistancia();\r\n    });\r\n\r\n    // Lista Destino\r\n    document.getElementById(\"destino\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.destinoSearch').show();\r\n        $('.inDestinoSrch').focus();\r\n        let data = await obtenerAeropuertos();\r\n        const listSearch = await mostrarListaSearch(data, '.destinoSearch', 'aeropuerto_id', 'municipio');\r\n        calcualarDistancia();\r\n    });\r\n\r\n}\r\nfunction configurarBotones() {\r\n    $(\".contenedor-altas\").hide();\r\n    $(\"#crear-ruta\").click(mostrarContenedorAltas);\r\n\r\n    $(\".btn-cancelar\").click(e => {\r\n        resetForm();\r\n    });\r\n\r\n    $(\"#btnGuardar\").click(e => {\r\n        let validar = validateInputs($('#formAltas'));\r\n        if (validar) $('#ruta_id').val() == '' ? crearRuta() : actualizarRuta();\r\n    });\r\n}\r\nfunction inicializarPagina() {\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'id',\r\n            field: 'ruta_id',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Aeropuerto',\r\n            field: 'nombre_aeropuerto',\r\n            width: 250\r\n        },\r\n        {\r\n            headerName: 'Origen',\r\n            field: 'nombre_origen',\r\n            width: 170\r\n        },\r\n        {\r\n            headerName: 'Destino',\r\n            field: 'nombre_destino',\r\n            width: 170\r\n        },\r\n        {\r\n            headerName: 'Tipo de Vuelo',\r\n            field: 'tipo_vuelo',\r\n            width: 120,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellRenderer: function (params) {\r\n                if (params.value === 'N') {\r\n                    return 'Nacional';\r\n                } else if (params.value === 'I') {\r\n                    return 'Internacional';\r\n                } else {\r\n                    return params.value; // Mantener el valor original si no es 'N' ni 'I'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Distancia',\r\n            field: 'distancia',\r\n            width: 120\r\n        },\r\n        {\r\n            headerName: 'Estatus',\r\n            field: 'estado_ruta',\r\n            width: 120\r\n        },\r\n        {\r\n            headerName: 'Acci√≥n',\r\n            cellRenderer: function (params) {\r\n                const editButton = document.createElement('I');\r\n                editButton.className = \"fa-regular fa-pen-to-square btn btn-editar\";\r\n                editButton.title = 'Editar';\r\n\r\n                editButton.addEventListener('click', async function () {\r\n                    await mostrarContenedorAltas();\r\n\r\n                    $('#ruta_id').val(params.data.ruta_id);\r\n                    $('#distancia').val(params.data.distancia);\r\n                    $('#estado_ruta').val(params.data.estado_ruta);\r\n\r\n                    $('#aeropuerto_id option').val(params.data.aeropuerto_id);\r\n                    $('#aeropuerto_id option').text(params.data.nombre_aeropuerto);\r\n\r\n                    $('#origen option').val(params.data.origen);\r\n                    $('#origen option').text(params.data.nombre_origen);\r\n\r\n                    $('#destino option').val(params.data.destino);\r\n                    $('#destino option').text(params.data.nombre_destino);\r\n\r\n                });\r\n\r\n                // Crea un contenedor para los botones y los agrega\r\n                const actionContainer = document.createElement('div');\r\n                actionContainer.classList = \"btn-cont centrado\";\r\n                actionContainer.appendChild(editButton);\r\n\r\n                return actionContainer;\r\n            },\r\n            width: 150,\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false\r\n        },\r\n    ];\r\n\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid');\r\n    traeRutas();\r\n}\r\n\r\n// FUNCIONES\r\nfunction resetForm() {\r\n    cerrarVentana('.contenedor-altas', ['#formAltas']);\r\n}\r\nfunction calcualarDistancia() {\r\n    let origen = $('#origen').val();\r\n    let destino = $('#destino').val();\r\n\r\n    if (origen && destino) {\r\n\r\n        const origenLatLong = AEROPUERTOS.find(aeropuerto => aeropuerto.aeropuerto_id == origen);\r\n\r\n        let latOrigen = origenLatLong.latitud;\r\n        let lonOrigen = origenLatLong.longitud;\r\n\r\n        const destLatLong = AEROPUERTOS.find(aeropuerto => aeropuerto.aeropuerto_id == destino);\r\n        let latDest = destLatLong.latitud;\r\n        let lonDest = destLatLong.longitud;\r\n\r\n        const valores = { latOrigen, lonOrigen, latDest, lonDest };\r\n\r\n        let distancia = obtenerDistancia(valores);\r\n        $('#distancia').val(distancia);\r\n    }\r\n}\r\nasync function mostrarContenedorAltas() {\r\n    $(\".contenedor-altas\").show();\r\n    await obtenerAeropuertos();\r\n}\r\nasync function traeRutas() {\r\n    try {\r\n        const respuesta = await fetch('obtener/rutas', {\r\n            method: 'GET',\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        let convert = verificarArray(data);\r\n        gridApi.setGridOption('rowData', convert);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los datos', 2500);\r\n    }\r\n}\r\nasync function obtenerAeropuertos() {\r\n    try {\r\n        const respuesta = await fetch('allAeropuertos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        AEROPUERTOS = data;\r\n        // console.log(data);\r\n\r\n        // let selectAeropuerto = document.getElementById('aeropuerto_id');\r\n        // let selectOrigen = document.getElementById('origen');\r\n        // let selectDestino = document.getElementById('destino');\r\n        // selectAeropuerto.innerHTML = '';\r\n        // selectOrigen.innerHTML = '';\r\n        // selectDestino.innerHTML = '';\r\n\r\n        // // A√±adir la opci√≥n en blanco como la primera opci√≥n\r\n        // selectAeropuerto.insertBefore(new Option('', ''), selectAeropuerto.firstChild);\r\n        // selectOrigen.insertBefore(new Option('', ''), selectOrigen.firstChild);\r\n        // selectDestino.insertBefore(new Option('', ''), selectDestino.firstChild);\r\n\r\n        // data.length > 0 ? data.forEach(valor => {\r\n\r\n        //     let option = document.createElement('option');\r\n        //     option.value = valor.aeropuerto_id;\r\n        //     option.textContent = valor.municipio;\r\n        //     selectOrigen.appendChild(option);\r\n\r\n        //     let option2 = document.createElement('option');\r\n        //     option2.value = valor.aeropuerto_id;\r\n        //     option2.textContent = valor.municipio;\r\n        //     selectDestino.appendChild(option2);\r\n\r\n        //     let option3 = document.createElement('option');\r\n        //     option3.value = valor.aeropuerto_id;\r\n        //     option3.textContent = valor.nombre;\r\n        //     selectAeropuerto.appendChild(option3);\r\n\r\n        // }) : SwalToast('warning', 'No hay Aeropuertos disponibles.', 2500);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conecci√≥n Perdida a BD.', false);\r\n    }\r\n}\r\nasync function crearRuta() {\r\n\r\n    const origen = $('#origen').val();\r\n    const destino = $('#destino').val();\r\n    const distancia = $('#distancia').val();\r\n    const estado_ruta = $('#estado_ruta').val();\r\n    const aeropuerto_id = $('#aeropuerto_id').val();\r\n\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('origen', origen);\r\n        datos.append('destino', destino);\r\n        datos.append('distancia', distancia);\r\n        datos.append('estado_ruta', estado_ruta);\r\n        datos.append('aeropuerto_id', aeropuerto_id);\r\n\r\n        const respuesta = await fetch('crear/ruta', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        if (data.exito == 1) {\r\n            // Registro Creado Exitosamente\r\n            SwalLoad('success', '√âxito', 'Registro Creado Correctamente', false);\r\n            setTimeout(() => {\r\n                swal.close();\r\n                resetForm();\r\n                traeRutas();\r\n            }, 1500);\r\n        } else if (data.exito == 0) {\r\n            SwalLoad('error', 'Error en la Transacci√≥n', data.errorSMS, true);\r\n        }\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexi√≥n', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function actualizarRuta() {\r\n\r\n    const ruta_id = $('#ruta_id').val();\r\n    const origen = $('#origen').val();\r\n    const destino = $('#destino').val();\r\n    const distancia = $('#distancia').val();\r\n    const estado_ruta = $('#estado_ruta').val();\r\n    const aeropuerto_id = $('#aeropuerto_id').val();\r\n\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('ruta_id', ruta_id);\r\n        datos.append('origen', origen);\r\n        datos.append('destino', destino);\r\n        datos.append('distancia', distancia);\r\n        datos.append('estado_ruta', estado_ruta);\r\n        datos.append('aeropuerto_id', aeropuerto_id);\r\n\r\n        const respuesta = await fetch('actualizar/ruta', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            // Registro Creado Exitosamente\r\n            SwalLoad('success', '√âxito', 'Registro Actualizado Correctamente', false);\r\n            setTimeout(() => {\r\n                swal.close();\r\n                resetForm();\r\n                traeRutas();\r\n            }, 1500);\r\n        } else if (data.exito == 0) {\r\n            SwalLoad('error', 'Error en la Transacci√≥n', data.errorSMS, true);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexi√≥n', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nfunction obtenerDistancia(valores) {\r\n\r\n    const { latDest, latOrigen, lonDest, lonOrigen } = valores;\r\n\r\n    // let latOrigen = 21.042216;\r\n    // let lon1 = -86.87361;\r\n    // let lat2 = 19.43630;\r\n    // let lon2 = -99.07210;\r\n    var radio_tierra = 6371; // Radio medio de la Tierra en kil√≥metros\r\n\r\n    // Convertir grados a radianes\r\n    var lat1_rad = degToRad(latOrigen);\r\n    var lon1_rad = degToRad(lonOrigen);\r\n    var lat2_rad = degToRad(latDest);\r\n    var lon2_rad = degToRad(lonDest);\r\n\r\n    // Diferencia de coordenadas\r\n    var d_lat = lat2_rad - lat1_rad;\r\n    var d_lon = lon2_rad - lon1_rad;\r\n\r\n    // F√≥rmula de Haversine\r\n    var a = Math.sin(d_lat / 2) * Math.sin(d_lat / 2) + Math.cos(lat1_rad) * Math.cos(lat2_rad) * Math.sin(d_lon / 2) * Math.sin(d_lon / 2);\r\n    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n\r\n    // Calcular la distancia\r\n    var distancia = (radio_tierra * c).toFixed(2) + ' Km';\r\n\r\n    return distancia;\r\n}\r\nfunction degToRad(deg) {\r\n    return deg * (Math.PI / 180);\r\n}"]}