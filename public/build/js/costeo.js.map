{"version":3,"sources":["costeo.js"],"names":["gridOptions","PASAJEROS","asignarEventos","$","hide","addClass","aplicarMascaraCantidad","document","addEventListener","e","key","resetForm","getElementById","async","event","preventDefault","show","focus","data","obtenerAeronaves","listSearch","mostrarListaSearch","asientos","activarRutas","gridApi","updateGridOptions","rowData","obtenerPasajeros","val","text","nuevoPax","setPaxId","mostrarClienteEmpresa","obtenerClientes","obtenerEmpresas","contacto_principal","title","querySelector","content","classList","contains","remove","add","removeClass","titleRel","contentRel","empty","toggleRelRuta","relRutasPax","configurarBotones","click","mostrarContenedorAltas","obtenerTipoCambio","SwalToast","validar","validateInputs","estatus","querySelectorAll","actualizarCotizacion","actualizarRutaPax","crearCotizacion","obtenerCotizacionPDF","generarServicio","inicializarPagina","setFechaActual","iniciarTabla","headerName","field","width","cellStyle","textAlign","valueFormatter","params","Number","value","toFixed","replace","cellRenderer","editButton","createElement","className","Object","keys","length","prop","cotizar_id","folio_cotizar","formatearFechaCompleta","fecha_creacion","comentarios","aeronave_id","modeloAeronave","tipoCambio","tipo_cambio","tipo_cambio_id","cliente_id","nombreCli","broker_id","nombreBrok","botonPdfCotizar","detalleRutas","obtnerVuelosId","nuevosDatos","Promise","all","Array","from","map","valida","validaRutaTarifa","cot","origenId","destinoId","costo_tarifa","ruta","tipo_vuelo","tarifa","costo_mx","costo_usd","baseObjeto","cot_det_id","fecha_salida","hora_salida","categoria","categoria_id","nombre","nombreCat","concepto","pasajeros","cantidad","percost","subtotal","rel_ruta","relaciones_id","relacion_id","line_id","costo_id","origen","aeropuerto_id","municipio","origMun","destino","destMun","arreglo2","fill","nuevosDatosClonados","concat","obj","setGridOption","forEachNode","node","actTotalesLine","obtenerTarifaCosto","generarTUA","generarAterrizajes","generarPernoctas","actTotales","datosPax","obtenerPax","detallePax","paxDoc","i","formPax","forEach","indice","paxId","pasajero_id","paxName","inputPaxName","dataset","pax","documentos","isArray","obtenerDocumentosPorPaxId","contenedorDocs","doc","enlace","href","hash_doc","tipo_doc","setAttribute","divIcon","icon","divName","name","textContent","nombre_doc","appendChild","ordenarPorCategoria","actionContainer","headerClass","cellClass","filter","obtenerCotizaciones","configTablaCrear","aeropuerto","obtenerAeropuertos","obtenerCategorias","producto","obtenerProductos","columnDefs","headerGroupComponent","CustomHeaderGroup","children","cellEditor","editable","fecha","formatearFecha","cellClassRules","event-none","cotDetIdValue","cotFechaSalida","columnGroupShow","undefined","hora","horas","minutos","includes","partes","split","hrsNum","parseFloat","minNum","horaFormateada","toString","padStart","test","cellEditorParams","values","a","valueGetter","valueSetter","newValue","valueParser","Math","round","tipoVuelo","isNaN","lineId","rowNode","validarDetEliminar","limpiarCelda","establecerAsientos","columnName","column","colId","rowIndex","origenVal","destinoVal","exito","alertas","error","getRowNode","setDataValue","ruta_id","cod","obtenerCodigosIATA","newLineID","consecutivoLineID","oldValue","applyTransaction","update","rutasData","push","cellElement","target","nuevacategoria","objeto","id","grid","mostrarListaGrid","valor","redrawRows","nuevoProducto","producto_id","prodFind","find","item","obtenerFechaActual","precio","nuevoAeropuerto","allColumns","setData","lineaAct","pernocta","refreshCells","force","cantPernoctas","totPernoctas","cantHoras","totalHoras","subtotalInpt","subtNac","subtInt","ivaNac","ivaInt","hr_cant","opcionSeleccionada","aeronaveValue","clienteValue","brokerValue","allData","rutaRows","aterrizajeRows","pernoctaRows","otrasCategoriasRows","sortedRows","rowDataToRemove","cat","idLine","pernoctasMap","rowsToAdd","fechaActual","diaActual","obtenerDia","conceptoActual","substring","lastIndexOf","tarifaActual","relacionActual","lineID","fechaSiguiente","daysDifference","calcularDiferenciaDias","newRow","rowsToUpdate","row","aterrizajesMap","aeronave","relacion","valAterrizaje","obtenerTasaAterrizaje","aterrizaje","tarifa_aterrizaje","tasa_aterrizaje_id","tuasMap","aeropuertos","aeropuertoFind","subtotales","resetearTabla","cerrarVentana","MAXPAX","limpiarForm","toggle","formPasajeros","contadorPasajeros","nuevoPasajeroDiv","divInputGroupText","idPaxInput","type","nuevoNombreInput","placeholder","nuevoNombreLabel","htmlFor","divInputGroupFile","nuevoArchivoInput","accept","nuevoEliminar","divDocs","on","this","closest","eliminarPasajero","flagRepetido","inputElement","paxn","docsPAx","obtenerDocsbyPax","datos","FormData","append","respuesta","fetch","method","body","json","console","SwalLoad","validarGrid","detalles","nodes","tHoras","formattedFecha","formatearFechaYear","categoria_nombre","filaModificada","horaFormat","formatoHora","validarGridPDF","ordenCategoria","sort","b","fechaA","Date","fechaB","indexA","indexOf","indexB","localeCompare","validarPasajeros","pasajerosDet","nombre_ruta","paxActual","trim","id_pax","files","validarRutaPax","relaciones","each","attr","allRowData","maxLineID","relRutasPax2","nodo","pRuta","selectPasajeros","pasajerosElements","optionEmpty","disabled","selected","pasajeroElement","nombrePasajero","idPasajero","option","pasajerosSeleccionadosPorRuta","pasajeroSeleccionado","idPasajeroSeleccionado","options","selectedIndex","getAttribute","idRuta","log","pasajeroElemento","insertBefore","relRutasPaxOld","pasajerosPorRuta","obtenerRutPaxCot","reduce","acc","optionToSelect","convert","verificarArray","aeronaves","aeronaveId","aeronaveEncontrada","cliente","broker","AEROPUERTOS","porciento","cambioNuevo","EMPRESAS","fecha_cot","folio","clienteName","brokerName","condiciones","total","cant_pernocta","tot_pernocta","cant_hrs","tot_hrs","JSON","stringify","urlArchivo","window","open","rowNodeP","eliminarDet","fechaCot","sinComa","tipo_de_viaje","dtO1","dtD1","dtO2","pasajero","index","prefijo","word","charAt","join","setTimeout","swal","close","errorSMS","csrfToken","headers","X-CSRF-Token","relRutaPax","cotizar","[object Object]","eGui","innerHTML","displayName","onExpandButtonClickedListener","expandOrCollapse","bind","eExpandButton","onExpandChangedListener","syncExpandButtons","columnGroup","getProvidedColumnGroup","currentState","isExpanded","setExpanded","toDeactivate","toActivate","removeEventListener"],"mappings":"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","file":"costeo.js","sourcesContent":["let gridOptions;\r\nlet PASAJEROS = '';\r\n\r\n// Utilizando el Principio de Modularidad\r\n$(function () {\r\n    asignarEventos();\r\n    inicializarPagina();\r\n    configurarBotones();\r\n});\r\nfunction asignarEventos() {\r\n    $(\".contenedor-altas\").hide();\r\n    $(\".costeo-relacion\").hide();\r\n\r\n    $(\".btn-pdf\").hide();\r\n    $(\"#btnServicio\").hide();\r\n    $(\"#myGrid2\").addClass('event-none');\r\n\r\n    // Ocultar Listados\r\n    $('.aeroSearch').hide();\r\n    $('.emprSearch').hide();\r\n    $('.cliSearch').hide();\r\n    $('.paxSearch').hide();\r\n\r\n    aplicarMascaraCantidad('subtotal', 'ivaNac', 'ivaInt', 'total', 'cant_pernocta', 'tot_pernocta', 'cant_hrs', 'tot_hrs');\r\n\r\n    // Esc Cerrar\r\n    document.addEventListener(\"keydown\", e => {\r\n        if (e.key === 'Escape') {\r\n            // Limpiar Ruta\r\n            resetForm();\r\n        }\r\n    });\r\n    // Lista Aeronaves\r\n    document.getElementById(\"aeronave_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.aeroSearch').show();\r\n        $('.inAeroSrch').focus();\r\n        let data = await obtenerAeronaves();\r\n        const listSearch = await mostrarListaSearch(data, '.aeroSearch', 'aeronave_id', 'modelo');\r\n        if (listSearch) {\r\n            PASAJEROS = listSearch.asientos;\r\n            activarRutas();\r\n            gridApi.updateGridOptions({ rowData: ['', '', '', '', '', '', '', ''] })\r\n        }\r\n    });\r\n\r\n    // Lista Pasajeros\r\n    document.getElementById(\"pasajero_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.paxSearch').show();\r\n        $('.inPaxSrch').focus();\r\n        let data = await obtenerPasajeros();\r\n        const listSearch = await mostrarListaSearch(data, '.paxSearch', 'pasajero_id', 'nombre', true);\r\n        if (listSearch == 'nuevo') {\r\n            $(\"#pasajero_id option\").val();\r\n            $(\"#pasajero_id option\").text('');\r\n            nuevoPax();\r\n        } else {\r\n            $(\"#pasajero_id option\").val();\r\n            $(\"#pasajero_id option\").text('');\r\n            setPaxId(listSearch);\r\n        }\r\n\r\n    });\r\n\r\n    // Seleccion Cliente/Broker\r\n    document.getElementById(\"slctOpcion\").addEventListener(\"change\", async function (event) {\r\n        mostrarClienteEmpresa();\r\n    });\r\n    // Lista Clientes\r\n    document.getElementById(\"cliente_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.cliSearch').show();\r\n        $('.inCliSrch').focus();\r\n        let data = await obtenerClientes();\r\n        const listSearch = await mostrarListaSearch(data, '.cliSearch', 'cliente_id', 'nombre');\r\n        if (listSearch) {\r\n            activarRutas();\r\n            gridApi.updateGridOptions({ rowData: ['', '', '', '', '', '', '', ''] })\r\n        }\r\n    });\r\n    // Lista Broker\r\n    document.getElementById(\"broker_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.emprSearch').show();\r\n        $('.inEmprSrch').focus()\r\n        let data = await obtenerEmpresas();\r\n        const listSearch = await mostrarListaSearch(data, '.emprSearch', 'broker_id', 'nombre');\r\n        if (listSearch) {\r\n            activarRutas();\r\n            gridApi.updateGridOptions({ rowData: ['', '', '', '', '', '', '', ''] })\r\n        }\r\n        $('#rt-responsable').val(listSearch.contacto_principal);\r\n    });\r\n\r\n    // toggle\r\n    const title = document.querySelector(\".toggle-pax\");\r\n    const content = document.querySelector(\".toggle-pax-cont\");\r\n\r\n    title.addEventListener(\"click\", function () {\r\n        if (content.classList.contains(\"expanded\")) {\r\n            content.classList.remove(\"expanded\");\r\n            title.classList.remove(\"expanded\");\r\n            $(\"#formPasajeros\").addClass(\"toggle-pax-cont\");\r\n        } else {\r\n            content.classList.add(\"expanded\");\r\n            title.classList.add(\"expanded\");\r\n            $(\"#formPasajeros\").removeClass(\"toggle-pax-cont\");\r\n        }\r\n    });\r\n\r\n    const titleRel = document.querySelector(\".toggle-relRuta\");\r\n    const contentRel = document.querySelector(\".toggle-relRuta-cont\");\r\n    titleRel.addEventListener(\"click\", async function () {\r\n        if (contentRel.classList.contains(\"expanded\")) {\r\n            contentRel.classList.remove(\"expanded\");\r\n            titleRel.classList.remove(\"expanded\");\r\n            $('#formRelRuta').empty();\r\n        } else {\r\n            contentRel.classList.add(\"expanded\");\r\n            titleRel.classList.add(\"expanded\");\r\n        }\r\n    });\r\n\r\n    const toggleRelRuta = document.querySelector('.toggle-relRuta');\r\n    toggleRelRuta.addEventListener('mousedown', async function () {\r\n        await relRutasPax(toggleRelRuta);\r\n    });\r\n\r\n}\r\nfunction configurarBotones() {\r\n\r\n    $(\"#crear-solCot\").click(mostrarContenedorAltas);\r\n\r\n    $(\"#btnCancel\").click(e => {\r\n        resetForm();\r\n    });\r\n\r\n    $(\"#actTipoCambio\").click(async e => {\r\n        let tipo = await obtenerTipoCambio();\r\n        if (tipo) SwalToast('success', 'Tipo de Cambio Actualizado.', 2500);\r\n    });\r\n\r\n    // $(\"#btnPasajero\").click(e => {\r\n    //     nuevoPax();\r\n    // });\r\n\r\n    $(\"#btnGuardar\").click(async e => {\r\n        const validar = validateInputs($('#formAltas'));\r\n        const estatus = $(\"#estatus\").val();\r\n        if ((validar) && (estatus == '' || estatus == 'PND' || estatus == 'CTZ')) {\r\n            // $('#cotizar_id').val() == '' ? crearCotizacion() : actualizarCotizacion();\r\n            if ($(\"#cotizar_id\").val()) {\r\n                // Obtener el formulario de pasajeros\r\n                let formPasajeros = document.getElementById('formPasajeros');\r\n                let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n                if (pasajerosElements) {\r\n                    await actualizarCotizacion();\r\n                    await actualizarRutaPax();\r\n                } else {\r\n                    await actualizarCotizacion();\r\n                }\r\n            } else {\r\n                await crearCotizacion();\r\n            }\r\n        }\r\n    });\r\n\r\n    $(\"#genera_pdf\").click(e => {\r\n        if ($('#cotizar_id').val()) obtenerCotizacionPDF();\r\n    });\r\n\r\n    $(\"#btnServicio\").click(e => {\r\n        if ($('#cotizar_id').val()) generarServicio();\r\n    });\r\n\r\n}\r\nfunction inicializarPagina() {\r\n    setFechaActual('fecha-cot');\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'id',\r\n            field: 'cotizar_id',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Folio',\r\n            field: 'folio_cotizar',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Broker',\r\n            field: 'nombreBrok',\r\n            width: 110\r\n        },\r\n        {\r\n            headerName: 'Cliente',\r\n            field: 'nombreCli',\r\n            width: 110\r\n        },\r\n        {\r\n            headerName: 'Aeronave',\r\n            field: 'modeloAeronave',\r\n            width: 160\r\n        },\r\n        {\r\n            headerName: 'Ruta',\r\n            field: 'concepto',\r\n            width: 180\r\n        },\r\n        {\r\n            headerName: 'Fecha Salida',\r\n            field: 'fecha_salida',\r\n            width: 100\r\n        },\r\n        {\r\n            headerName: 'Total',\r\n            field: 'total',\r\n            width: 120,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            valueFormatter: function (params) {\r\n                // Formatea el número con comas como separadores de miles y dos decimales\r\n                return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Estatus',\r\n            field: 'estatus',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            cellRenderer: function (params) {\r\n                const editButton = document.createElement('I');\r\n                editButton.className = \"fa-regular fa-pen-to-square btn btn-editar\";\r\n                editButton.title = 'Ver o Editar';\r\n\r\n                // Datos a Editar\r\n                editButton.addEventListener('click', async function (e) {\r\n\r\n                    if (Object.keys(params.data).length == 0) return\r\n\r\n                    $('#aeronave_id').prop('disabled', true);\r\n                    $('#slctOpcion').prop('disabled', true);\r\n                    $('#cliente_id').prop('disabled', true);\r\n                    $('#broker_id').prop('disabled', true);\r\n\r\n                    // Establecer Datos\r\n                    $('#cotizar_id').val(params.data.cotizar_id);\r\n                    $('#folio').val(params.data.folio_cotizar);\r\n\r\n                    $('#fecha-cot').val(formatearFechaCompleta(params.data.fecha_creacion));\r\n\r\n                    $('#rt-comment').val(params.data.comentarios);\r\n                    $('#estatus').val(params.data.estatus);\r\n                    $('#aeronave_id option').val(params.data.aeronave_id);\r\n                    $('#aeronave_id option').text(params.data.modeloAeronave);\r\n\r\n                    let tipoCambio = 0;\r\n                    if (params.data.tipo_cambio) {\r\n                        tipoCambio = params.data.tipo_cambio;\r\n                        $('#tipo_cambio option').val(params.data.tipo_cambio_id);\r\n                    } else {\r\n                        tipoCambio = await obtenerTipoCambio();\r\n                        $('#tipo_cambio option').val(tipoCambio.tipo_cambio_id);\r\n                        tipoCambio = tipoCambio.tipo_cambio;\r\n                    }\r\n\r\n                    $('#tipo_cambio option').val(params.data.tipo_cambio_id);\r\n                    $('#tipo_cambio option').text(Number(tipoCambio).toFixed(2));\r\n\r\n                    await mostrarContenedorAltas();\r\n\r\n                    if (params.data.cliente_id) {\r\n                        $('#slctOpcion').val(1);\r\n                        mostrarClienteEmpresa();\r\n                        $(\"#cliente_id option\").val(params.data.cliente_id);\r\n                        $(\"#cliente_id option\").text(params.data.nombreCli);\r\n                    } else if (params.data.broker_id) {\r\n                        $('#slctOpcion').val(2);\r\n                        mostrarClienteEmpresa();\r\n                        $(\"#broker_id option\").val(params.data.broker_id);\r\n                        $(\"#broker_id option\").text(params.data.nombreBrok);\r\n                        $('#rt-responsable').val(params.data.contacto_principal);\r\n                    }\r\n\r\n                    // mostrar PDF\r\n                    botonPdfCotizar();\r\n\r\n                    let detalleRutas = await obtnerVuelosId(params.data.cotizar_id);\r\n\r\n                    // SIN COTIZAR\r\n                    if ($(\"#estatus\").val() == 'PND') {\r\n\r\n                        // await Promise.all(Array.from(formDestino).map(async (ruta, indice) => {\r\n                        let nuevosDatos = await Promise.all(Array.from(detalleRutas).map(async cot => {\r\n                            // let nuevosDatos = detalleRutas.map(async cot => {\r\n\r\n                            let valida = await validaRutaTarifa(cot.origenId, cot.destinoId);\r\n\r\n                            let costo_tarifa = 0;\r\n                            if (valida.ruta.tipo_vuelo == 'N') {\r\n                                costo_tarifa = valida.tarifa.costo_mx;\r\n                            } else {\r\n                                costo_tarifa = valida.tarifa.costo_usd;\r\n                            }\r\n\r\n                            let baseObjeto = {\r\n                                cot_det_id: cot.cot_det_id,\r\n                                fecha_salida: cot.fecha_salida,\r\n                                hora_salida: cot.hora_salida,\r\n                                categoria: { categoria_id: cot.categoria_id, nombre: cot.nombreCat },\r\n                                concepto: cot.concepto,\r\n                                pasajeros: cot.pasajeros,\r\n                                tipo_vuelo: cot.tipo_vuelo,\r\n                                cantidad: 1,\r\n                                percost: 0.5,\r\n                                tarifa: cot.tarifa,\r\n                                subtotal: cot.subtotal,\r\n                                rel_ruta: cot.rel_ruta,\r\n                                relaciones_id: cot.relacion_id,\r\n                                line_id: cot.line_id,\r\n                                costo_id: valida.tarifa.costo_id,\r\n                                tarifa: costo_tarifa\r\n                            }\r\n\r\n                            // Agregar origen y destino solo si categoria es 1\r\n                            if (cot.categoria_id == 1) {\r\n                                baseObjeto.origen = { 'aeropuerto_id': cot.origenId, 'municipio': cot.origMun };\r\n                                baseObjeto.destino = { 'aeropuerto_id': cot.destinoId, 'municipio': cot.destMun };\r\n                            }\r\n\r\n                            return baseObjeto;\r\n                        }));\r\n\r\n                        if (nuevosDatos.length < 9) {\r\n                            const numObjetosVacios = 8;\r\n                            const arreglo2 = Array(numObjetosVacios - nuevosDatos.length).fill({});\r\n                            const arregloCombinado = nuevosDatos.concat(arreglo2);\r\n                            const nuevosDatosClonados = arregloCombinado.map(obj => ({ ...obj }));\r\n                            gridApi.setGridOption('rowData', nuevosDatosClonados);\r\n                        } else {\r\n                            gridApi.setGridOption('rowData', nuevosDatos);\r\n                        }\r\n\r\n\r\n                        gridApi.forEachNode(node => {\r\n                            const rowData = node.data;\r\n                            if (Object.keys(rowData).length > 0) actTotalesLine(rowData);\r\n                        });\r\n\r\n                        await obtenerTarifaCosto();\r\n                        await generarTUA();\r\n                        await generarAterrizajes();\r\n                        await generarPernoctas();\r\n\r\n                    } else {\r\n\r\n                        // YA COTIZADO Establecer datos conforme la categoria\r\n                        let nuevosDatos = detalleRutas.map(cot => {\r\n\r\n                            let baseObjeto = {\r\n                                cot_det_id: cot.cot_det_id,\r\n                                fecha_salida: cot.fecha_salida,\r\n                                hora_salida: cot.hora_salida,\r\n                                categoria: { categoria_id: cot.categoria_id, nombre: cot.nombreCat },\r\n                                concepto: cot.concepto,\r\n                                pasajeros: cot.pasajeros,\r\n                                tipo_vuelo: cot.tipo_vuelo,\r\n                                cantidad: cot.cantidad,\r\n                                percost: cot.percost,\r\n                                tarifa: cot.tarifa,\r\n                                subtotal: cot.subtotal,\r\n                                rel_ruta: cot.rel_ruta,\r\n                                relaciones_id: cot.relacion_id,\r\n                                line_id: cot.line_id,\r\n                            }\r\n\r\n                            // Agregar origen y destino solo si categoria es 1\r\n                            if (cot.categoria_id == 1) {\r\n                                baseObjeto.origen = { 'aeropuerto_id': cot.origenId, 'municipio': cot.origMun };\r\n                                baseObjeto.destino = { 'aeropuerto_id': cot.destinoId, 'municipio': cot.destMun };\r\n                            }\r\n\r\n                            return baseObjeto;\r\n                        });\r\n\r\n                        if (nuevosDatos.length < 9) {\r\n                            const numObjetosVacios = 8;\r\n                            const arreglo2 = Array(numObjetosVacios - nuevosDatos.length).fill({});\r\n                            const arregloCombinado = nuevosDatos.concat(arreglo2);\r\n                            const nuevosDatosClonados = arregloCombinado.map(obj => ({ ...obj }));\r\n                            gridApi.setGridOption('rowData', nuevosDatosClonados);\r\n                        } else {\r\n                            gridApi.setGridOption('rowData', nuevosDatos);\r\n                        }\r\n\r\n\r\n                    }\r\n\r\n                    // Validaremos los datos obtenidos de la BD\r\n                    actTotales();\r\n                    activarRutas();\r\n\r\n                    // CARGAR PASAJEROS\r\n                    let datosPax = await obtenerPax(params.data.cotizar_id);\r\n                    detallePax = datosPax.pasajeros;\r\n                    let paxDoc = datosPax.paxDoc;\r\n\r\n                    for (let i = 0; i < detallePax.length; i++) {\r\n                        nuevoPax();\r\n                    }\r\n\r\n                    // Agregar datos a Seccion Pax\r\n                    const formPax = document.querySelectorAll(`#formPasajeros .cont-pasajero`);\r\n                    if (formPax.length == detallePax.length) {\r\n                        formPax.forEach((ruta, indice) => {\r\n                            const paxId = detallePax[indice].pasajero_id;\r\n                            const paxName = detallePax[indice].nombre;\r\n\r\n                            // const inputPaxId = ruta.querySelector(`#pasajero_id${indice + 1}`);\r\n                            const inputPaxName = ruta.querySelector(`#paxName${indice + 1}`);\r\n\r\n                            // inputPaxId.value = paxId;\r\n                            inputPaxName.value = paxName;\r\n                            inputPaxName.dataset.pax = paxId;\r\n\r\n                            if (paxDoc) {\r\n\r\n                                const documentos = obtenerDocumentosPorPaxId(paxId);\r\n\r\n                                // Obtener el contenedor de documentos\r\n                                const contenedorDocs = ruta.querySelector('.contenedor-docs');\r\n\r\n                                // Crear enlaces y agregarlos al DOM\r\n                                documentos.forEach(doc => {\r\n\r\n                                    const enlace = document.createElement('a');\r\n                                    enlace.classList.add('thumbnail');\r\n                                    enlace.href = `/${doc.ruta}/${doc.hash_doc}.${doc.tipo_doc}`;\r\n                                    enlace.setAttribute('target', '_blank'); // Abre el enlace en una nueva pestaña\r\n\r\n                                    const divIcon = document.createElement('DIV');\r\n                                    divIcon.classList.add('fileicon');\r\n\r\n                                    const icon = document.createElement('I');\r\n                                    icon.classList.add('fa-regular', 'fa-file');\r\n\r\n                                    const divName = document.createElement('DIV');\r\n                                    divName.classList.add('filename');\r\n\r\n                                    const name = document.createElement('P');\r\n                                    name.textContent = `${doc.nombre_doc}`;\r\n\r\n                                    divIcon.appendChild(icon);\r\n                                    divName.appendChild(name);\r\n                                    enlace.appendChild(divIcon);\r\n                                    enlace.appendChild(divName);\r\n                                    contenedorDocs.appendChild(enlace);\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n                    // Función para contar documentos y crear enlaces por paxId\r\n                    function obtenerDocumentosPorPaxId(paxId) {\r\n                        if (paxDoc[paxId]) {\r\n                            if (Array.isArray(paxDoc[paxId])) {\r\n                                return paxDoc[paxId];\r\n                            } else {\r\n                                return [paxDoc[paxId]]; // Si no es un arreglo, convertirlo en un arreglo con un solo elemento\r\n                            }\r\n                        } else {\r\n                            return []; // No hay documentos para el pasajero dado\r\n                        }\r\n                    }\r\n\r\n                    await ordenarPorCategoria();\r\n\r\n                    $(\".costeo-relacion\").show();\r\n                });\r\n\r\n                const actionContainer = document.createElement('div');\r\n                actionContainer.classList = \"btn-cont centrado\";\r\n                actionContainer.appendChild(editButton);\r\n                $('.pasajeros').prop('disabled', false);\r\n\r\n                return actionContainer;\r\n\r\n            },\r\n            width: 150,\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false\r\n        }\r\n    ];\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid');\r\n    obtenerCotizaciones();\r\n}\r\n\r\n// Ag-Grid\r\nasync function configTablaCrear() {\r\n    mostrarClienteEmpresa();\r\n\r\n    ////// MOVER A DONDE SEA REQUERIDO\r\n    let aeropuerto = await obtenerAeropuertos();\r\n    let categoria = await obtenerCategorias();\r\n    let producto = await obtenerProductos();\r\n    ////// MOVER A DONDE SEA REQUERIDO\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'Id',\r\n            field: 'cot_det_id',\r\n            width: 60\r\n        },\r\n        {\r\n            headerName: \"\",\r\n            headerGroupComponent: CustomHeaderGroup,\r\n            children: [\r\n                {\r\n                    headerName: 'Fecha',\r\n                    field: \"fecha_salida\",\r\n                    width: 100,\r\n                    cellEditor: 'agDateCellEditor',\r\n                    editable: true,\r\n                    valueFormatter: function (params) {\r\n                        let fecha = params.value;\r\n                        if (fecha) {\r\n                            return formatearFecha(fecha);\r\n                        }\r\n                        return null;\r\n                    },\r\n                    cellClassRules: {\r\n                        'event-none': params => {\r\n                            // Verificar si cot_det_id tiene un valor\r\n                            const cotDetIdValue = params.data.categoria;\r\n                            const cotFechaSalida = params.data.fecha_salida;\r\n                            if (cotDetIdValue && cotFechaSalida) return cotDetIdValue.nombre == 'Pernocta' || cotDetIdValue.nombre == 'Aterrizaje';\r\n                            return\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Hora',\r\n                    field: \"hora_salida\",\r\n                    width: 120,\r\n                    editable: true,\r\n                    columnGroupShow: \"open\",\r\n                    valueFormatter: function (params) {\r\n\r\n                        if (params.value !== null && params.value !== undefined) {\r\n                            const hora = params.value;\r\n                            let horas = 0;\r\n                            let minutos = 0;\r\n                            if (hora) {\r\n                                if (hora.includes(':')) {\r\n                                    const partes = hora.split(':');\r\n\r\n                                    horas = partes[0];\r\n                                    minutos = partes[1];\r\n                                } else {\r\n                                    horas = hora;\r\n                                }\r\n                            } else {\r\n                                horas = hora;\r\n                            }\r\n                            // Convertir el valor numérico a horas y minutos\r\n                            const hrsNum = parseFloat(horas);\r\n                            const minNum = parseFloat(minutos);\r\n\r\n                            const horaFormateada = `${hrsNum.toString().padStart(2, '0')}:${minNum.toString().padStart(2, '0')}`;\r\n                            const horaRegex = /^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$/;\r\n\r\n                            if (horaRegex.test(horaFormateada)) {\r\n                                return horaFormateada; // Devolver la hora formateada si es válida\r\n                            } else {\r\n                                return '00:00'; // Devolver un valor por defecto si el formato no es válido\r\n                            }\r\n                        }\r\n\r\n                        return null;\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            headerName: 'Cat',\r\n            field: 'categoria',\r\n            width: 80,\r\n            cellEditor: 'agSelectCellEditor',\r\n            editable: false,\r\n            cellEditorParams: {\r\n                values: ['', ...categoria.map(a => ({ categoria_id: a.categoria_id, nombre: a.nombre }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    return params.value.nombre;\r\n                }\r\n            },\r\n            valueGetter: function (params) {\r\n                // return params.data.categoria; // Debe devolver el objeto seleccionado\r\n                return params.data.categoria ? params.data.categoria.nombre : '';\r\n            },\r\n            valueSetter: function (params) {\r\n                params.data.categoria = params.newValue;\r\n                return true;\r\n\r\n            },\r\n            cellClassRules: {\r\n                'event-none': params => {\r\n                    // Verificar si cot_det_id tiene un valor\r\n                    const cotDetIdValue = params.data.cot_det_id;\r\n                    return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Concepto',\r\n            field: 'concepto',\r\n            width: 160,\r\n            editable: false,\r\n        },\r\n        {\r\n            headerName: 'Origen',\r\n            field: 'origen',\r\n            width: 120,\r\n            editable: false,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['', ...aeropuerto.map(a => ({ aeropuerto_id: a.aeropuerto_id, municipio: a.municipio }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    return params.value.municipio;\r\n                }\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.origen ? params.data.origen.municipio : '' // Debe devolver el objeto seleccionado\r\n            },\r\n            valueSetter: function (params) {\r\n                params.data.origen = params.newValue;\r\n                return true;\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Destino',\r\n            field: 'destino',\r\n            width: 120,\r\n            editable: false,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['', ...aeropuerto.map(a => ({ aeropuerto_id: a.aeropuerto_id, municipio: a.municipio }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) return params.value.municipio;\r\n            },\r\n            valueParser: function (params) {\r\n                if (params.value) return { aeropuerto_id: params.value.aeropuerto_id, municipio: params.value.municipio };\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.destino ? params.data.destino.municipio : '' // Debe devolver el objeto seleccionado\r\n            },\r\n            cellClassRules: {\r\n                'event-none': params => {\r\n                    // Verificar si cot_det_id tiene un valor\r\n                    const cotDetIdValue = params.data.cot_det_id;\r\n                    return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Pax',\r\n            field: 'pasajeros',\r\n            width: 60,\r\n            editable: true,\r\n            cellEditor: 'agNumberCellEditor',\r\n            valueParser: function (params) {\r\n                // Convertir la entrada en un número entero\r\n                return parseFloat(params.newValue) || null;\r\n            },\r\n            valueFormatter: function (params) {\r\n                // Formatear el número como entero\r\n                if (params.value !== null && params.value !== undefined) {\r\n                    return Math.round(params.value);\r\n                }\r\n                return null;\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Tipo',\r\n            field: 'tipo_vuelo',\r\n            width: 80,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['N', 'I'], // Valores disponibles en el select: 'I' para Internacional y 'N' para Nacional\r\n            },\r\n            valueFormatter: function (params) {\r\n                const tipoVuelo = params.value;\r\n\r\n                // Mapear el valor 'I' a 'Internacional' y 'N' a 'Nacional'\r\n                if (tipoVuelo === 'I') {\r\n                    return 'Internacional';\r\n                } else if (tipoVuelo === 'N') {\r\n                    return 'Nacional';\r\n                }\r\n\r\n                // Retornar el valor original si no coincide con 'I' o 'N'\r\n                return tipoVuelo;\r\n            },\r\n            editable: false,\r\n        },\r\n        {\r\n            headerName: \"\",\r\n            headerGroupComponent: CustomHeaderGroup,\r\n            children: [\r\n                {\r\n                    headerName: 'Cant',\r\n                    field: 'cantidad',\r\n                    width: 80,\r\n                    cellEditor: 'agNumberCellEditor',\r\n                    editable: true,\r\n                    valueParser: function (params) {\r\n                        // Convertir la entrada en un número entero\r\n                        value = params.newValue\r\n                        if (value == 0) {\r\n                            value = 1;\r\n                        }\r\n                        return value;\r\n                        // Convertir la entrada en un número entero\r\n                        // return parseFloat(params.newValue) || null;\r\n                    },\r\n                    valueFormatter: function (params) {\r\n                        // Formatear el número como entero\r\n                        if (typeof params.value === 'number' && !isNaN(params.value)) {\r\n                            // Formatear el número como un decimal con un dígito después del punto decimal\r\n                            return params.value.toFixed(1);\r\n                        }\r\n                        return null;\r\n                    }\r\n                },\r\n                {\r\n                    headerName: 'Pernocta Costo',\r\n                    field: 'percost',\r\n                    width: 80,\r\n                    cellEditor: 'agNumberCellEditor',\r\n                    editable: true,\r\n                    columnGroupShow: \"open\",\r\n                    valueParser: function (params) {\r\n                        if (params.newValue == '0') {\r\n                            return 0.5\r\n                        }\r\n                        // Convertir la entrada en un número entero\r\n                        return parseFloat(params.newValue) || null;\r\n                    },\r\n                    valueFormatter: function (params) {\r\n                        // Formatear el número como entero\r\n                        if (typeof params.value === 'number' && !isNaN(params.value)) {\r\n                            // Formatear el número como un decimal con un dígito después del punto decimal\r\n                            return params.value.toFixed(1);\r\n                        }\r\n                        return null;\r\n                    }\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            headerName: 'Tarifa',\r\n            field: 'tarifa',\r\n            width: 100,\r\n            editable: true,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            cellEditor: 'agNumberCellEditor',\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    // Formatea el número con comas como separadores de miles y dos decimales\r\n                    return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Subtotal',\r\n            field: 'subtotal',\r\n            width: 100,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    // Formatea el número con comas como separadores de miles y dos decimales\r\n                    return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Relacion Ruta',\r\n            field: 'rel_ruta',\r\n            width: 80,\r\n            // hide: true,\r\n        },\r\n        {\r\n            headerName: 'Relacion',\r\n            field: 'relaciones_id',\r\n            width: 80,\r\n            // hide: true,\r\n        },\r\n        {\r\n            headerName: 'LineID',\r\n            field: 'line_id',\r\n            width: 80,\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            width: 90,\r\n            cellRenderer: function (params) {\r\n\r\n                // Que el estatus sea Pendiente o Cotizado \r\n                const estatus = $(\"#estatus\").val();\r\n\r\n                if ((estatus == 'PND' || estatus == 'CTZ' || estatus == '') && (params.data.categoria && params.data.categoria.nombre)) {\r\n\r\n                    const editButton = document.createElement('I');\r\n                    editButton.className = \"fa-regular fa-trash-can btn btn-eliminar\";\r\n                    editButton.title = 'Eliminar';\r\n\r\n                    editButton.addEventListener('click', async function () {\r\n                        if (Object.keys(params.data).length == 0) return\r\n                        const lineId = params.data.cot_det_id\r\n                        const rowNode = params.node;\r\n                        if (lineId) {\r\n                            await validarDetEliminar(lineId, rowNode);\r\n                            actTotales();\r\n                            actualizarCotizacion();\r\n                        } else {\r\n                            limpiarCelda(rowNode);\r\n                            actTotales();\r\n                        }\r\n                    });\r\n\r\n                    const actionContainer = document.createElement('div');\r\n                    actionContainer.classList = \"btn-cont centrado\";\r\n                    actionContainer.appendChild(editButton);\r\n\r\n                    return actionContainer;\r\n                }\r\n            },\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false\r\n        }\r\n    ];\r\n\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid2');\r\n    if (!$('#cotizar_id').val()) await obtenerTipoCambio();\r\n\r\n    // Establece los asientos para la aronave\r\n    establecerAsientos();\r\n\r\n    // OnChange\r\n    gridApi.addEventListener('cellValueChanged', async function (e) {\r\n        const columnName = e.column.colId;\r\n        const rowData = e.node.data;\r\n        const rowIndex = e.rowIndex;\r\n\r\n        let origenVal = rowData.origen ? rowData.origen.aeropuerto_id : '';\r\n        let destinoVal = rowData.destino ? rowData.destino.aeropuerto_id : '';\r\n\r\n        if (columnName == 'origen' || columnName == 'destino') {\r\n            const aeronave = $('#aeronave_id').val();\r\n\r\n            // Validar que origen y destino tengan ruta y tarifa\r\n            if (aeronave) {\r\n                if (origenVal && destinoVal) {\r\n                    let valida = await validaRutaTarifa(origenVal, destinoVal);\r\n                    if (valida.exito == '0') {\r\n                        SwalToast('warning', valida.alertas.error[0], 2500);\r\n                        let rowNode = gridApi.getRowNode(rowIndex);\r\n                        if (rowNode && rowNode.data) {\r\n                            // Limpiar los valores de todas las celdas en la fila\r\n                            Object.keys(rowNode.data).forEach(key => {\r\n                                rowNode.setDataValue(key, null);\r\n                            });\r\n                        }\r\n                    } else {\r\n                        $('#costo_id').val(valida.tarifa.costo_id);\r\n                        if (valida.ruta.tipo_vuelo == 'N') {\r\n                            rowData.tarifa = valida.tarifa.costo_mx;\r\n                            rowData.subtotal = valida.tarifa.costo_mx;\r\n                        } else if (valida.ruta.tipo_vuelo == 'I') {\r\n                            rowData.tarifa = valida.tarifa.costo_usd;\r\n                            rowData.subtotal = valida.tarifa.costo_usd;\r\n                        }\r\n                        // rowData.categoria = { categoria_id: 1, nombre: 'Ruta' };\r\n                        rowData.tipo_vuelo = valida.ruta.tipo_vuelo;\r\n                        rowData.relaciones_id = valida.ruta.ruta_id;\r\n                        rowData.rel_ruta = valida.ruta.ruta_id;\r\n                        rowData.hora_salida = '00:00';\r\n                        rowData.cantidad = '1';\r\n\r\n                        let categoria = rowData.categoria;\r\n                        let cod = '';\r\n                        if (categoria.nombre == 'Ruta') {\r\n                            cod = await obtenerCodigosIATA(origenVal, destinoVal);\r\n                            rowData.concepto = cod;\r\n                        }\r\n\r\n                        let newLineID = await consecutivoLineID();\r\n                        rowData.line_id = newLineID;\r\n\r\n                        // gridApi.applyTransaction({ update: [rowData] });\r\n                        await generarPernoctas();\r\n                        await generarAterrizajes();\r\n                        await generarTUA();\r\n                        await ordenarPorCategoria();\r\n                        actTotales();\r\n                        // gridApi.applyTransaction({ update: [rowData] });\r\n                    }\r\n                }\r\n            } else {\r\n                SwalToast('warning', 'Selecciona una Aeronave', 2500);\r\n            }\r\n        }\r\n\r\n        if (columnName == 'fecha_salida') {\r\n            if (origenVal && destinoVal) {\r\n                await generarPernoctas();\r\n                await ordenarPorCategoria();\r\n            }\r\n        }\r\n\r\n        if (columnName == 'pasajeros') {\r\n            const value = e.newValue;\r\n            const oldValue = e.oldValue; // Guardar el valor anterior\r\n\r\n            if (value > PASAJEROS) {\r\n                rowData.pasajeros = PASAJEROS;\r\n                gridApi.applyTransaction({ update: [rowData] });\r\n            }\r\n\r\n            if (rowData.origen && rowData.destino) {\r\n\r\n                // Verificar si hay suficientes TUAS para el número de pasajeros\r\n                const rutasData = [];\r\n                gridApi.forEachNode(node => {\r\n                    const rowData = node.data;\r\n                    if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n                        rutasData.push(rowData);\r\n                    }\r\n                });\r\n\r\n                // Si se supera la validación de los pasajeros, generar TUAS y ordenar por categoría\r\n                await generarTUA();\r\n                await ordenarPorCategoria();\r\n            }\r\n        }\r\n\r\n        if (columnName == 'concepto') {\r\n            // console.log(rowData);\r\n            // console.log(rowIndex);\r\n        }\r\n\r\n        // Calcular totales\r\n        if (\r\n            (e.oldValue !== e.newValue) &&\r\n            !isNaN(e.oldValue) &&\r\n            !isNaN(e.newValue) &&\r\n            (e.oldValue !== null && e.oldValue !== undefined) &&\r\n            (e.newValue !== null && e.newValue !== undefined) &&\r\n            (rowData.categoria) &&\r\n            (rowData.percost || rowData.categoria || rowData.tarifa || rowData.cantidad)\r\n        ) {\r\n            actTotalesLine(rowData);\r\n            actTotales();\r\n        }\r\n\r\n    });\r\n\r\n    gridApi.addEventListener('cellDoubleClicked', async function (e) {\r\n        const columnName = e.column.colId;\r\n        const rowData = e.node.data;\r\n        const rowIndex = e.rowIndex;\r\n        const cellElement = e.event.target; // Elemento DOM de la celda clicada\r\n        const contLista = '#filtro'; // DIV para las busquedas\r\n        const contScroll = '.contenedor-altas'; // DIV donde obtendremos el Scroll\r\n\r\n        // Al cambiar de categoria\r\n        if (columnName == 'categoria') {\r\n            const nuevacategoria = categoria.map(objeto => {\r\n                return {\r\n                    id: objeto.categoria_id,\r\n                    nombre: objeto.nombre\r\n                };\r\n            });\r\n\r\n            let grid = await mostrarListaGrid(cellElement, nuevacategoria, contLista, contScroll);\r\n            let rowNode = gridApi.getRowNode(rowIndex);\r\n\r\n            if (rowData.categoria) {\r\n                limpiarCelda(rowNode);\r\n            }\r\n            rowNode = gridApi.getRowNode(rowIndex);\r\n            const valor = { categoria_id: grid.id, nombre: grid.nombre };\r\n            rowNode.setDataValue('categoria', valor);\r\n            gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n        }\r\n\r\n        // Mostrar concepto dependiendo de la ruta\r\n        if (columnName == 'concepto' && rowData.categoria) {\r\n\r\n            // Servicio ID => 4\r\n            if (rowData.categoria.nombre == 'Producto') {\r\n\r\n                const nuevoProducto = producto.map(objeto => {\r\n                    return {\r\n                        id: objeto.producto_id,\r\n                        nombre: objeto.nombre\r\n                    };\r\n                });\r\n\r\n                let grid = await mostrarListaGrid(cellElement, nuevoProducto, contLista, contScroll);\r\n\r\n                let newLineID = await consecutivoLineID();\r\n\r\n                const rowNode = gridApi.getRowNode(rowIndex);\r\n                const prodFind = producto.find(item => item.producto_id === grid.id);\r\n\r\n                rowNode.setDataValue('fecha_salida', obtenerFechaActual());\r\n                rowNode.setDataValue('concepto', grid.nombre);\r\n                rowNode.setDataValue('relaciones_id', grid.id);\r\n                rowNode.setDataValue('tarifa', prodFind.precio);\r\n                rowNode.setDataValue('cantidad', '1');\r\n                rowNode.setDataValue('line_id', newLineID);\r\n                rowNode.setDataValue('subtotal', prodFind.precio * 1);\r\n\r\n                gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n\r\n            }\r\n\r\n            // Aterrizaje ID => 3\r\n            if (rowData.categoria.nombre == 'Aterrizaje') {\r\n\r\n            }\r\n\r\n            // Pernocta ID => 2\r\n            if (rowData.categoria.nombre == 'Pernocta') {\r\n\r\n            }\r\n\r\n            // Ruta ID => 1\r\n            if (rowData.categoria.nombre == 'Ruta') {\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // seleccionar si la cat = Ruta\r\n        if (columnName === 'origen' || columnName === 'destino') {\r\n            const nuevoAeropuerto = aeropuerto.map(objeto => {\r\n                return {\r\n                    id: objeto.aeropuerto_id,\r\n                    nombre: objeto.municipio,\r\n                };\r\n            });\r\n\r\n            if (rowData.categoria && rowData.categoria.nombre == 'Ruta' && !(rowData && rowData.cot_det_id)) {\r\n                let grid = await mostrarListaGrid(cellElement, nuevoAeropuerto, contLista, contScroll);\r\n                const rowNode = gridApi.getRowNode(rowIndex);\r\n                const valor = { aeropuerto_id: grid.id, municipio: grid.nombre };\r\n\r\n                if (columnName === 'origen') {\r\n                    rowNode.setDataValue('origen', valor);\r\n                } else {\r\n                    rowNode.setDataValue('destino', valor);\r\n                }\r\n\r\n                gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n}\r\nfunction limpiarCelda(rowNode) {\r\n\r\n    // Obtén todas las columnas del grid\r\n    const allColumns = [];\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        allColumns.push(rowData);\r\n    });\r\n\r\n    // Crea un objeto vacío para almacenar los cambios\r\n    let updatedData = {};\r\n\r\n    // Itera sobre cada columna y establece el valor a null o ''\r\n    allColumns.forEach(column => {\r\n        const colId = column.colId;\r\n        // updatedData[colId] = null; // o '' si prefieres\r\n    });\r\n\r\n    // Actualiza los datos de la fila\r\n    rowNode.setData(updatedData);\r\n}\r\nfunction actTotalesLine(rowData) {\r\n\r\n    if (!rowData) return\r\n\r\n    const lineaAct = rowData.line_id;\r\n\r\n    gridApi.forEachNode(node => {\r\n        if (node.data.line_id === lineaAct && node.data.categoria) {\r\n\r\n            const categoria = node.data.categoria.nombre;\r\n            const pernocta = node.data.percost;\r\n            const cantidad = node.data.cantidad;\r\n            const tarifa = node.data.tarifa;\r\n            let subtotal = 0;\r\n\r\n            if (categoria == 'Ruta') {\r\n                subtotal = cantidad * tarifa;\r\n            } else if (categoria == 'Pernocta') {\r\n                subtotal = (cantidad * pernocta) * tarifa;\r\n            } else if (categoria == 'Aterrizaje') {\r\n                subtotal = tarifa;\r\n                // } else if (categoria == 'Producto') {\r\n            } else {\r\n                subtotal = cantidad * tarifa;\r\n            }\r\n\r\n            // Actualizar el subtotal en el nodo de datos\r\n            node.setDataValue('subtotal', subtotal);\r\n        }\r\n        // Refrescar las celdas para mostrar los nuevos subtotales\r\n        gridApi.refreshCells({ force: true });\r\n    });\r\n}\r\nfunction actTotales() {\r\n\r\n    // Actualizar Totales Generales\r\n    let cantPernoctas = 0;\r\n    let totPernoctas = 0;\r\n    let cantHoras = 0;\r\n    let totalHoras = 0;\r\n    let subtotalInpt = 0;\r\n\r\n    let subtNac = 0;\r\n    let subtInt = 0;\r\n    let ivaNac = 0;\r\n    let ivaInt = 0;\r\n\r\n    // Iterar sobre todas las filas de la tabla\r\n    gridApi.forEachNode(node => {\r\n        const hr_cant = parseFloat(node.data.cantidad || 0);\r\n        const subtotal = parseFloat(node.data.subtotal || 0);\r\n\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Pernocta') {\r\n            cantPernoctas += hr_cant;\r\n            totPernoctas += subtotal;\r\n        }\r\n\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Ruta') {\r\n            cantHoras += hr_cant;\r\n            totalHoras += subtotal;\r\n        }\r\n\r\n        subtotalInpt += subtotal;\r\n\r\n        if (node.data.tipo_vuelo == 'N') {\r\n            subtNac += subtotal;\r\n        } else if (node.data.tipo_vuelo == 'I') {\r\n            subtInt += subtotal;\r\n        }\r\n\r\n    });\r\n\r\n    ivaNac = subtNac * 0.16;\r\n    ivaInt = subtInt * 0.04;\r\n\r\n    // Actualizar el valor del input 'cant_hrs'\r\n    $('#cant_pernocta').val(cantPernoctas);\r\n    $('#tot_pernocta').val(totPernoctas);\r\n    $('#cant_hrs').val(cantHoras);\r\n    $('#tot_hrs').val(totalHoras);\r\n    $('#subtotal').val(subtotalInpt);\r\n    $('#ivaNac').val(ivaNac);\r\n    $('#ivaInt').val(ivaInt);\r\n    $('#total').val(subtotalInpt + ivaNac + ivaInt);\r\n}\r\nfunction mostrarClienteEmpresa() {\r\n\r\n    let opcionSeleccionada = $('#slctOpcion').val();\r\n\r\n    if (opcionSeleccionada == 1) {\r\n        $('#inpCliente').show();\r\n        $('#inpEmpresa').hide();\r\n        $(\"label[for='cliente_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='broker_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='broker_id'] option\").val(\"\");\r\n        $(\"select[id='broker_id'] option\").text(\"\");\r\n    } else if (opcionSeleccionada == 2) {\r\n        $('#inpCliente').hide();\r\n        $('#inpEmpresa').show();\r\n        // $(\"#rt-responsable\").val(\"\");\r\n        $(\"label[for='broker_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='cliente_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='cliente_id'] option\").val(\"\");\r\n        $(\"select[id='cliente_id'] option\").text(\"\");\r\n    }\r\n}\r\nfunction activarRutas() {\r\n    // Obtener los valores de los campos\r\n    let aeronaveValue = $('#aeronave_id').val();\r\n    let clienteValue = $('#cliente_id').val();\r\n    let brokerValue = $('#broker_id').val();\r\n    let estatus = $('#estatus').val();\r\n\r\n    // Verificar si aeronave_id tiene valor y al menos uno de cliente_id o broker_id tiene valor\r\n    let aeronaveTieneValor = (aeronaveValue !== '');\r\n    let clienteOBrokerTieneValor = (clienteValue !== '' || brokerValue !== '');\r\n\r\n    if ((estatus == 'PND' || estatus == 'CTZ' || estatus == '') && (aeronaveTieneValor && clienteOBrokerTieneValor)) {\r\n        $(\"#myGrid2\").removeClass('event-none');\r\n        $(\"#formTotales\").removeClass('event-none');\r\n        $(\"#formPasajeros\").removeClass('event-none');\r\n    } else {\r\n        $(\"#myGrid2\").addClass('event-none');\r\n        $(\"#formTotales\").addClass('event-none');\r\n        $(\"#formPasajeros\").addClass('event-none');\r\n    }\r\n}\r\nasync function ordenarPorCategoria() {\r\n    const allData = [];\r\n    const rutaRows = [];\r\n    const aterrizajeRows = [];\r\n    const pernoctaRows = [];\r\n    const otrasCategoriasRows = [];\r\n\r\n    // Iterar sobre todas las filas de datos en la tabla\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        allData.push(rowData);\r\n\r\n        // Clasificar las filas en diferentes arreglos segun la categoria\r\n        if (rowData.categoria) {\r\n            if (rowData.categoria.nombre == 'Ruta') {\r\n                rutaRows.push(rowData);\r\n            } else if (rowData.categoria && rowData.categoria.nombre == 'Pernocta') {\r\n                pernoctaRows.push(rowData);\r\n            } else if (rowData.categoria && rowData.categoria.nombre == 'Aterrizaje') {\r\n                aterrizajeRows.push(rowData);\r\n            } else {\r\n                // Cualquier otra categoría\r\n                otrasCategoriasRows.push(rowData);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Concatenar todas las filas en el nuevo orden deseado\r\n    let sortedRows = [...rutaRows, ...pernoctaRows, ...aterrizajeRows, ...otrasCategoriasRows];\r\n    sortedRows.push({});\r\n\r\n    if (sortedRows.length < 9) {\r\n        const numObjetosVacios = 8;\r\n        const arreglo2 = Array(numObjetosVacios - sortedRows.length).fill({});\r\n        const arregloCombinado = sortedRows.concat(arreglo2);\r\n        const nuevosDatosClonados = arregloCombinado.map(obj => ({ ...obj }));\r\n        gridApi.updateGridOptions({ rowData: nuevosDatosClonados })\r\n    } else {\r\n        gridApi.updateGridOptions({ rowData: sortedRows })\r\n    }\r\n\r\n}\r\nasync function generarPernoctas() {\r\n\r\n    const rowDataToRemove = [];\r\n    // Eliminar todas las pernoctas existentes, menos las que tengan id\r\n    gridApi.forEachNode(node => {\r\n        let cat = node.data.categoria;\r\n        let idLine = node.data.cot_det_id;\r\n        if ((cat && node.data.categoria.nombre === 'Pernocta') && (!idLine)) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas identificadas como pernoctas\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const pernoctasMap = {}; // Mapa para rastrear pernoctas por 'relaciones_id'\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular las pernoctas\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Pernocta') {\r\n            pernoctasMap[rowData.rel_ruta] = rowData;\r\n        }\r\n    });\r\n\r\n    if (allData.length > 1) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de pernocta\r\n\r\n        let newLineID = await consecutivoLineID();\r\n\r\n        for (let i = 0; i < allData.length - 1; i++) {\r\n            // const fechaActual = new Date(allData[i].fecha_salida);\r\n            const fechaActual = formatearFecha(allData[i].fecha_salida);\r\n            const diaActual = obtenerDia(fechaActual);\r\n            let conceptoActual = allData[i].concepto;\r\n            conceptoActual = conceptoActual.substring(conceptoActual.lastIndexOf(' ') + 1);\r\n            const tarifaActual = allData[i].tarifa;\r\n            const relacionActual = allData[i].relaciones_id;\r\n            const lineID = allData[i].line_id;\r\n\r\n            const fechaSiguiente = formatearFecha(allData[i + 1].fecha_salida);\r\n            const daysDifference = calcularDiferenciaDias(fechaActual, fechaSiguiente);\r\n\r\n            if (daysDifference > 0) {\r\n                if (pernoctasMap[lineID]) {\r\n                    // Actualizar cantidad de 'daysDifference' en la pernocta existente\r\n                    pernoctasMap[relacionActual].concepto = `${conceptoActual} - Día: ${diaActual}`;\r\n                    pernoctasMap[relacionActual].cantidad = daysDifference;\r\n                    pernoctasMap[relacionActual].subtotal = (daysDifference * 0.5) * tarifaActual;\r\n                } else {\r\n                    // Crear nueva fila Pernocta\r\n                    const newRow = {\r\n                        cot_det_id: '',\r\n                        fecha_salida: fechaActual,\r\n                        hora_salida: '0',\r\n                        categoria: { categoria_id: 2, nombre: 'Pernocta' },\r\n                        concepto: `${conceptoActual} - Día: ${diaActual}`,\r\n                        origen: '',\r\n                        destino: '',\r\n                        pasajeros: '',\r\n                        tipo_vuelo: '',\r\n                        cantidad: daysDifference,\r\n                        tarifa: tarifaActual,\r\n                        percost: '0.5',\r\n                        subtotal: (daysDifference * 0.5) * tarifaActual,\r\n                        // relaciones_id: relacionActual,\r\n                        rel_ruta: lineID,\r\n                        line_id: newLineID\r\n                    };\r\n                    newLineID++;\r\n                    rowsToAdd.push(newRow);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        const rowsToUpdate = Object.values(pernoctasMap).filter(row => row.cantidad !== undefined);\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n    }\r\n}\r\nasync function generarAterrizajes() {\r\n\r\n    // Eliminar todas las tasas de aterrizaje en el grid\r\n    const rowDataToRemove = [];\r\n\r\n    gridApi.forEachNode(node => {\r\n        let cat = node.data.categoria;\r\n        let idLine = node.data.cot_det_id;\r\n        if ((cat && node.data.categoria.nombre === 'Aterrizaje') && (!idLine)) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas indetificadas como Aterrizajes\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const aterrizajesMap = {}; // Mapa para rastrear Aterrizajes por 'relaciones_id'\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular Aterrizajes\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje') {\r\n            aterrizajesMap[rowData.rel_ruta] = rowData;\r\n        }\r\n    });\r\n\r\n    if (allData.length > 0) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de Aterrizaje\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        let newLineID = await consecutivoLineID();\r\n\r\n        for (i in allData) {\r\n            if (allData[i].destino) {\r\n                const destino = allData[i].destino.aeropuerto_id;\r\n                let concepto = allData[i].concepto;\r\n                concepto = concepto.substring(concepto.lastIndexOf(' ') + 1);\r\n                const relacion = allData[i].line_id;\r\n                const fechaActual = formatearFecha(allData[i].fecha_salida);\r\n\r\n                if (!aterrizajesMap[relacion]) {\r\n\r\n                    const valAterrizaje = await obtenerTasaAterrizaje(destino, aeronave);\r\n                    if (valAterrizaje.exito == 1) {\r\n                        const newRow = {\r\n                            cot_det_id: '',\r\n                            fecha_salida: fechaActual,\r\n                            hora_salida: '0',\r\n                            categoria: { categoria_id: 3, nombre: 'Aterrizaje' },\r\n                            concepto: concepto,\r\n                            origen: '',\r\n                            destino: '',\r\n                            pax: '',\r\n                            tipo_vuelo: '',\r\n                            tarifa: valAterrizaje.aterrizaje.tarifa_aterrizaje,\r\n                            subtotal: valAterrizaje.aterrizaje.tarifa_aterrizaje,\r\n                            relaciones_id: valAterrizaje.aterrizaje.tasa_aterrizaje_id,\r\n                            rel_ruta: relacion,\r\n                            line_id: newLineID,\r\n                            cantidad: 1\r\n                        }\r\n                        newLineID++; // Incrementar el lineID para cada nueva fila\r\n                        rowsToAdd.push(newRow);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        const rowsToUpdate = Object.values(aterrizajesMap).filter(row => row.cantidad !== undefined);\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n\r\n    }\r\n\r\n}\r\nasync function generarTUA() {\r\n\r\n    const rowDataToRemove = [];\r\n\r\n    // Eliminar todas las Tuas existentes, menos las que tengan id\r\n    gridApi.forEachNode(node => {\r\n        let cat = node.data.categoria;\r\n        let idLine = node.data.cot_det_id;\r\n        if ((cat && node.data.categoria.nombre === 'Tua') && (!idLine)) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas identificadas como Tuas\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const tuasMap = {}; // Mapa para rastrear TUAS por 'relaciones_id'\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular las TUAS\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Tua') {\r\n            tuasMap[rowData.rel_ruta] = rowData;\r\n        }\r\n    });\r\n\r\n    const tipoCambio = await obtenerTipoCambio();\r\n    if (!tipoCambio) return;\r\n\r\n    if (allData.length > 0) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de Tuas\r\n        const rowsToUpdate = []; // Aquí almacenaremos las filas de Tuas a actualizar\r\n        let newLineID = await consecutivoLineID();\r\n        const aeropuertos = await obtenerAeropuertos();\r\n\r\n        for (let i = 0; i < allData.length; i++) {\r\n            const origen = allData[i].origen.aeropuerto_id;\r\n            const pax = allData[i].pasajeros;\r\n            const ruta = allData[i];\r\n            const rel_ruta = ruta.line_id;\r\n            const concepto = ruta.concepto;\r\n            const fechaActual = formatearFecha(ruta.fecha_salida);\r\n\r\n            const aeropuertoFind = aeropuertos.find(objeto => objeto.aeropuerto_id == origen);\r\n\r\n            if (aeropuertoFind && aeropuertoFind['costo_tua']) {\r\n\r\n                const tarifa = parseFloat(aeropuertoFind['costo_tua']) / parseFloat(tipoCambio.tipo_cambio);\r\n                const subtotales = (parseFloat(aeropuertoFind['costo_tua']) / parseFloat(tipoCambio.tipo_cambio)) * pax;\r\n\r\n                if (tuasMap[rel_ruta]) {\r\n                    // Actualizar TUA existente\r\n                    tuasMap[rel_ruta].cantidad = pax;\r\n                    tuasMap[rel_ruta].tarifa = tarifa;\r\n                    tuasMap[rel_ruta].subtotal = subtotales;\r\n                    rowsToUpdate.push(tuasMap[rel_ruta]);\r\n                } else if (pax > 0) {\r\n                    // Crear nueva fila TUA\r\n                    const newRow = {\r\n                        cot_det_id: '',\r\n                        fecha_salida: fechaActual,\r\n                        hora_salida: '0',\r\n                        categoria: { categoria_id: 5, nombre: 'Tua' },\r\n                        concepto: `${concepto}`,\r\n                        origen: '',\r\n                        destino: '',\r\n                        pax: '',\r\n                        tipo_vuelo: '',\r\n                        cantidad: pax,\r\n                        tarifa: tarifa,\r\n                        subtotal: subtotales,\r\n                        relaciones_id: aeropuertoFind['aeropuerto_id'],\r\n                        rel_ruta: rel_ruta,\r\n                        line_id: newLineID\r\n                    };\r\n                    newLineID++; // Incrementar el lineID para cada nueva fila\r\n                    rowsToAdd.push(newRow);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n// FUNCIONES \r\nfunction resetForm() {\r\n    resetearTabla('#myGrid2', '#searchInput1');\r\n    cerrarVentana('.contenedor-altas', ['#formAltas', '#formTotales']);\r\n    $('#inpCliente').hide();\r\n    $('#inpEmpresa').hide();\r\n    $('#inpGeneral').hide();\r\n\r\n    $('#aeronave_id').prop('disabled', false);\r\n    $('#slctOpcion').prop('disabled', false);\r\n    $('#cliente_id').prop('disabled', false);\r\n    $('#broker_id').prop('disabled', false);\r\n\r\n    // limpiar pax\r\n    const pax = document.querySelectorAll(`#formPasajeros .cont-pasajero`);\r\n    // Iterar sobre los elementos a partir del segundo elemento\r\n    for (let i = 0; i < pax.length; i++) {\r\n        pax[i].remove(); // Eliminar el elemento\r\n    }\r\n    $('#formRelRuta').empty();\r\n    botonPdfCotizar();\r\n    PASAJEROS = '';\r\n    MAXPAX = 0;\r\n    limpiarForm(\"#formAltas\");\r\n    obtenerCotizaciones();\r\n}\r\nasync function mostrarContenedorAltas() {\r\n    await configTablaCrear();\r\n    $(\".contenedor-altas\").show();\r\n}\r\nfunction botonPdfCotizar() {\r\n    $(\".btn-pdf\").toggle(['CTZ', 'SVC', 'CMP'].includes($('#estatus').val()));\r\n    $(\"#btnServicio\").toggle($('#estatus').val() === 'CTZ');\r\n}\r\nfunction nuevoPax() {\r\n    const formPasajeros = document.getElementById('formPasajeros');\r\n    const btnPasajero = document.getElementById('btnPasajero');\r\n    const slcPasajero = document.getElementById('pasajero_id');\r\n    let contadorPasajeros = formPasajeros.querySelectorAll('.cont-pasajero').length + 1;\r\n\r\n    // Crear nuevo div para el nuevo pasajero\r\n    const nuevoPasajeroDiv = document.createElement('DIV');\r\n    nuevoPasajeroDiv.classList.add('cont-form3', 'cont-pasajero');\r\n\r\n    // Crear div contenedor para el grupo de entrada de texto\r\n    const divInputGroupText = document.createElement('DIV');\r\n    divInputGroupText.classList.add('form-group');\r\n\r\n    // Crear input para el id del pasajero\r\n    const idPaxInput = document.createElement('INPUT');\r\n    idPaxInput.type = 'text';\r\n    idPaxInput.id = 'pasajero_id' + contadorPasajeros;\r\n    idPaxInput.classList.add('hidden');\r\n\r\n    // Crear input para el nombre del pasajero\r\n    const nuevoNombreInput = document.createElement('INPUT');\r\n    nuevoNombreInput.type = 'text';\r\n    nuevoNombreInput.id = 'paxName' + contadorPasajeros;\r\n    // nuevoNombreInput.dataset.target = contadorPasajeros;\r\n    nuevoNombreInput.placeholder = '';\r\n    divInputGroupText.appendChild(nuevoNombreInput);\r\n\r\n    // Crear label para el nombre del pasajero\r\n    const nuevoNombreLabel = document.createElement('LABEL');\r\n    nuevoNombreLabel.textContent = 'Pasajero ' + contadorPasajeros + ':';\r\n    nuevoNombreLabel.htmlFor = 'paxName' + contadorPasajeros;\r\n    divInputGroupText.appendChild(nuevoNombreLabel);\r\n\r\n    // Agregar div de entrada de texto al div del pasajero\r\n    nuevoPasajeroDiv.appendChild(divInputGroupText);\r\n\r\n    // Crear div contenedor para el grupo de entrada de archivo\r\n    const divInputGroupFile = document.createElement('DIV');\r\n    divInputGroupFile.classList.add('form-group');\r\n\r\n    // Crear input de archivo para el pasajero\r\n    const nuevoArchivoInput = document.createElement('INPUT');\r\n    nuevoArchivoInput.type = 'file';\r\n    nuevoArchivoInput.name = 'paxFile' + contadorPasajeros;\r\n    nuevoArchivoInput.id = 'paxFile' + contadorPasajeros;\r\n    nuevoArchivoInput.accept = 'image/*';  // Esto permite solo archivos de imagen\r\n    divInputGroupFile.appendChild(nuevoArchivoInput);\r\n\r\n    // Crear input de eliminar para el pasajero\r\n    const nuevoEliminar = document.createElement('A');\r\n    nuevoEliminar.id = 'btnEliminarPax' + contadorPasajeros;\r\n    nuevoEliminar.classList.add('btn', 'btn-eliminarPax');\r\n    nuevoEliminar.title = 'Eliminar Pasajero';\r\n\r\n    // Crear Div Mostrar Docs\r\n    const divDocs = document.createElement('DIV');\r\n    divDocs.classList.add('contenedor-docs', 'flex');\r\n\r\n    divInputGroupFile.appendChild(nuevoEliminar);\r\n\r\n    // Agregar div de entrada de archivo al div del pasajero\r\n    nuevoPasajeroDiv.appendChild(divInputGroupFile);\r\n\r\n    // Insertar el nuevo pasajero antes del botón \"Agregar Pasajero\"\r\n    // formPasajeros.insertBefore(nuevoPasajeroDiv, btnPasajero);\r\n    formPasajeros.appendChild(nuevoPasajeroDiv);\r\n\r\n    // Agregar Div Docs\r\n    nuevoPasajeroDiv.appendChild(divDocs);\r\n\r\n    $(`#btnEliminarPax${contadorPasajeros}`).on(\"click\", async function () {\r\n        // id a eliminar \r\n        const cotizar_id = $('#cotizar_id').val();\r\n        // const pasajero_id = $(`#pasajero_id${contadorPasajeros}`).val();\r\n        const pasajero_id = $(this).closest('.cont-pasajero').find('input[id^=\"paxName\"]').data('pax');\r\n\r\n        if (cotizar_id && pasajero_id) await eliminarPasajero(cotizar_id, pasajero_id);\r\n\r\n        $(this).closest('.cont-pasajero').remove(); // Eliminar el div padre más cercano con la clase 'nuevaRuta'\r\n    });\r\n}\r\nasync function setPaxId(listSearch) {\r\n\r\n    let flagRepetido = 0;\r\n\r\n    // Antes de agregar el pasajero, validar si ya existe \r\n    let form = '#formPasajeros';\r\n    const contPasajeros = document.querySelectorAll(`${form} .cont-pasajero`);\r\n    contPasajeros.forEach((ruta, indice) => {\r\n        let inputElement = ruta.querySelector('input[id^=\"paxName\"]');\r\n\r\n        // const inputElement = ruta.querySelector('input[data-paxn]');\r\n        if (inputElement) {\r\n            let dataPaxnValue = inputElement.dataset.paxn || inputElement.dataset.pax;\r\n            if (dataPaxnValue == listSearch['pasajero_id']) flagRepetido = 1;\r\n        }\r\n    });\r\n\r\n    if (flagRepetido == 0) {\r\n\r\n        const pasajero_id = listSearch['pasajero_id'];\r\n\r\n        const docsPAx = await obtenerDocsbyPax(pasajero_id);\r\n\r\n        const formPasajeros = document.getElementById('formPasajeros');\r\n        const btnPasajero = document.getElementById('btnPasajero');\r\n        const slcPasajero = document.getElementById('pasajero_id');\r\n        let contadorPasajeros = formPasajeros.querySelectorAll('.cont-pasajero').length + 1;\r\n\r\n        // Crear nuevo div para el nuevo pasajero\r\n        const nuevoPasajeroDiv = document.createElement('DIV');\r\n        nuevoPasajeroDiv.classList.add('cont-form3', 'cont-pasajero');\r\n\r\n        // Crear div contenedor para el grupo de entrada de texto\r\n        const divInputGroupText = document.createElement('DIV');\r\n        divInputGroupText.classList.add('form-group');\r\n\r\n        // Crear input para el id del pasajero\r\n        const idPaxInput = document.createElement('INPUT');\r\n        idPaxInput.type = 'text';\r\n        idPaxInput.id = 'pasajero_id' + contadorPasajeros;\r\n        idPaxInput.classList.add('hidden');\r\n\r\n        // Crear input para el nombre del pasajero\r\n        const nuevoNombreInput = document.createElement('INPUT');\r\n        nuevoNombreInput.type = 'text';\r\n        nuevoNombreInput.id = 'paxName' + contadorPasajeros;\r\n        // nuevoNombreInput.dataset.target = contadorPasajeros;\r\n        nuevoNombreInput.placeholder = '';\r\n        nuevoNombreInput.value = listSearch['nombre'];\r\n        nuevoNombreInput.setAttribute('data-paxN', pasajero_id); // Añadir atributo data-pax con el ID del pasajero\r\n        divInputGroupText.appendChild(nuevoNombreInput);\r\n\r\n        // Crear label para el nombre del pasajero\r\n        const nuevoNombreLabel = document.createElement('LABEL');\r\n        nuevoNombreLabel.textContent = 'Pasajero ' + contadorPasajeros + ':';\r\n        nuevoNombreLabel.htmlFor = 'paxName' + contadorPasajeros;\r\n        divInputGroupText.appendChild(nuevoNombreLabel);\r\n\r\n        // Agregar div de entrada de texto al div del pasajero\r\n        nuevoPasajeroDiv.appendChild(divInputGroupText);\r\n\r\n        // Crear div contenedor para el grupo de entrada de archivo\r\n        const divInputGroupFile = document.createElement('DIV');\r\n        divInputGroupFile.classList.add('form-group');\r\n\r\n        // Crear input de archivo para el pasajero\r\n        const nuevoArchivoInput = document.createElement('INPUT');\r\n        nuevoArchivoInput.type = 'file';\r\n        nuevoArchivoInput.name = 'paxFile' + contadorPasajeros;\r\n        nuevoArchivoInput.id = 'paxFile' + contadorPasajeros;\r\n        nuevoArchivoInput.accept = 'image/*';  // Esto permite solo archivos de imagen\r\n        divInputGroupFile.appendChild(nuevoArchivoInput);\r\n\r\n        // Crear input de eliminar para el pasajero\r\n        const nuevoEliminar = document.createElement('A');\r\n        nuevoEliminar.id = 'btnEliminarPax' + contadorPasajeros;\r\n        nuevoEliminar.classList.add('btn', 'btn-eliminarPax');\r\n        nuevoEliminar.title = 'Eliminar Pasajero';\r\n\r\n        // Crear Div Mostrar Docs\r\n        const divDocs = document.createElement('DIV');\r\n        divDocs.classList.add('contenedor-docs', 'flex');\r\n\r\n        divInputGroupFile.appendChild(nuevoEliminar);\r\n\r\n        // Agregar div de entrada de archivo al div del pasajero\r\n        nuevoPasajeroDiv.appendChild(divInputGroupFile);\r\n\r\n        // Insertar el nuevo pasajero antes del botón \"Agregar Pasajero\"\r\n        // formPasajeros.insertBefore(nuevoPasajeroDiv, btnPasajero);\r\n        formPasajeros.appendChild(nuevoPasajeroDiv);\r\n\r\n        // Agregar Div Docs\r\n        nuevoPasajeroDiv.appendChild(divDocs);\r\n\r\n        // Si tiene Documentos agregarlos\r\n        if (docsPAx.length > 0) {\r\n            // let container = document.getElementsByClassName('contenedor-docs');\r\n            // container = container[0];\r\n\r\n            docsPAx.forEach(doc => {\r\n                const enlace = document.createElement('a');\r\n                enlace.classList.add('thumbnail');\r\n                enlace.href = `/${doc.ruta}/${doc.hash_doc}.${doc.tipo_doc}`;\r\n                enlace.setAttribute('target', '_blank'); // Abre el enlace en una nueva pestaña\r\n\r\n                const divIcon = document.createElement('DIV');\r\n                divIcon.classList.add('fileicon');\r\n\r\n                const icon = document.createElement('I');\r\n                icon.classList.add('fa-regular', 'fa-file');\r\n\r\n                const divName = document.createElement('DIV');\r\n                divName.classList.add('filename');\r\n\r\n                const name = document.createElement('P');\r\n                name.textContent = `${doc.nombre_doc}`;\r\n\r\n                divIcon.appendChild(icon);\r\n                divName.appendChild(name);\r\n                enlace.appendChild(divIcon);\r\n                enlace.appendChild(divName);\r\n                divDocs.appendChild(enlace);\r\n            });\r\n        }\r\n\r\n        $(`#btnEliminarPax${contadorPasajeros}`).on(\"click\", async function () {\r\n\r\n            // id a eliminar \r\n            const cotizar_id = $('#cotizar_id').val();\r\n            // const pasajero_id = $(`#pasajero_id${contadorPasajeros}`).val();\r\n            const pasajero_id = $(this).closest('.cont-pasajero').find('input[id^=\"paxName\"]').data('paxn');\r\n\r\n\r\n            $(this).closest('.cont-pasajero').remove(); // Eliminar el div padre más cercano con la clase 'nuevaRuta'\r\n        });\r\n\r\n    }\r\n\r\n}\r\nasync function obtenerPax(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/pax', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function validarGrid() {\r\n    let detalles = [];\r\n\r\n    try {\r\n        const nodes = [];\r\n        gridApi.forEachNode(node => nodes.push(node));\r\n\r\n        for (const node of nodes) {\r\n            // Obtener los datos de la fila\r\n            const relacion_id = node.data.relaciones_id;\r\n            const categoria = node.data.categoria;\r\n            const concepto = node.data.concepto;\r\n            const fecha = node.data.fecha_salida;\r\n            const tHoras = node.data.cantidad;\r\n\r\n            // Validar que tengan fecha obligatoriamente\r\n            if (!fecha && categoria) {\r\n                SwalToast('warning', 'Fecha Obligatoria', 2500);\r\n                return []; // Retornar un arreglo vacío si alguna fila no tiene fecha\r\n            }\r\n\r\n            const formattedFecha = formatearFechaYear(fecha);\r\n            node.data.fecha_salida = formattedFecha;\r\n            node.data.categoria_nombre = '';\r\n\r\n            // Verificar si la fila tiene relacion_id\r\n            if (relacion_id) {\r\n\r\n                // Copiar la fila y modificar el valor de origen\r\n                let filaModificada = { ...node.data }; // Crear una copia de la fila\r\n\r\n                // Agregar categoria_nombre si categoria está definida\r\n                if (categoria) {\r\n                    filaModificada.categoria_nombre = filaModificada.categoria.nombre;\r\n                }\r\n\r\n                // Ajustar 'Categoria' para contener solo el ID\r\n                if (filaModificada.categoria && filaModificada.categoria.categoria_id !== undefined) {\r\n                    filaModificada.categoria = filaModificada.categoria.categoria_id;\r\n                }\r\n\r\n                if (categoria && categoria.nombre == 'Ruta') {\r\n                    // Validar que tengan fecha obligatoriamente\r\n                    if (fecha == undefined) {\r\n                        throw SwalToast('warning', 'Fecha Obligatoria', 2500);\r\n                    }\r\n\r\n                    if (tHoras == undefined) {\r\n                        throw SwalToast('warning', 'Horas Obligatorias', 2500);\r\n                    }\r\n\r\n                    // Formatear la fecha a 'año-mes-día' (YYYY-MM-DD)\r\n                    // const formattedFecha = new Date(fecha).toISOString().split('T')[0];\r\n                    const formattedFecha = formatearFechaYear(fecha);\r\n\r\n                    // Asignar el valor de 'aeropuerto_id' de 'origen' a 'origen'\r\n                    if (filaModificada.origen && filaModificada.origen.aeropuerto_id !== undefined) {\r\n                        filaModificada.origen = filaModificada.origen.aeropuerto_id;\r\n                    }\r\n\r\n                    // Ajustar 'destino' para contener solo 'aeropuerto_id'\r\n                    if (filaModificada.destino && filaModificada.destino.aeropuerto_id !== undefined) {\r\n                        filaModificada.destino = filaModificada.destino.aeropuerto_id;\r\n                    }\r\n\r\n                    // Ajustar la Hora\r\n                    const horaFormat = await formatoHora(filaModificada.hora_salida);\r\n\r\n                    filaModificada.hora_salida = horaFormat;\r\n                    filaModificada.fecha_salida = formattedFecha;\r\n                }\r\n\r\n\r\n\r\n                // Agregar la fila modificada al arreglo detalles\r\n                detalles.push(filaModificada);\r\n            } else if (categoria && categoria.nombre == 'Pernocta') {\r\n                if (concepto == undefined) {\r\n                    throw SwalToast('warning', 'Concepto Obligatorio para Pernocta', 2500);\r\n                }\r\n                filaModificada = { ...node.data }; // Crear una copia de la fila\r\n\r\n                // Ajustar 'Categoria' para contener solo el ID\r\n                if (filaModificada.categoria && filaModificada.categoria.categoria_id !== undefined) {\r\n                    filaModificada.categoria = filaModificada.categoria.categoria_id;\r\n                    filaModificada.categoria_nombre = categoria.nombre;\r\n                }\r\n                detalles.push(filaModificada);\r\n            }\r\n\r\n        }\r\n\r\n    } catch (error) {\r\n        return detalles = '';\r\n    }\r\n\r\n    return detalles;\r\n}\r\nasync function validarGridPDF() {\r\n\r\n    let rowData = [];\r\n    gridApi.forEachNode(node => {\r\n        if (node.data.categoria) {\r\n            let data = { ...node.data }; // Copia del objeto original\r\n            data.categoria = `${data.categoria.nombre}`\r\n            rowData.push(data);\r\n        }\r\n    });\r\n\r\n    let categorias = await obtenerCategorias();\r\n    const ordenCategoria = categorias.map(categoria => categoria.nombre);\r\n\r\n    // Orden específico para los valores de categoria.nombre\r\n    // const ordenCategoria = ['Ruta', 'Pernocta', 'Aterrizaje', 'Tua', 'Producto'];\r\n\r\n    // Función de comparación para múltiples campos\r\n    function compararVuelos(a, b) {\r\n        // Comparar por fecha_salida\r\n        const fechaA = new Date(a.fecha_salida);\r\n        const fechaB = new Date(b.fecha_salida);\r\n\r\n        if (fechaA - fechaB != 0) return fechaA - fechaB;\r\n\r\n        // Comparar por categoria.nombre según el orden especificado\r\n        const indexA = ordenCategoria.indexOf(a.categoria);\r\n        const indexB = ordenCategoria.indexOf(b.categoria);\r\n        // const indexA = ordenCategoria.indexOf(a.categoria.nombre);\r\n        // const indexB = ordenCategoria.indexOf(b.categoria.nombre);\r\n\r\n        if (indexA - indexB !== 0) return indexA - indexB;\r\n\r\n        // Agregar más comparaciones si es necesario\r\n        // Comparar por concepto\r\n        if (a.concepto.localeCompare(b.concepto) !== 0) return a.concepto.localeCompare(b.concepto);\r\n\r\n        // Comparar por destino.municipio\r\n        if (a.destino.municipio.localeCompare(b.destino.municipio) !== 0) return a.destino.municipio.localeCompare(b.destino.municipio);\r\n\r\n        // Comparar por origen.municipio\r\n        if (a.origen.municipio.localeCompare(b.origen.municipio) !== 0) return a.origen.municipio.localeCompare(b.origen.municipio);\r\n\r\n        // Comparar por tarifa\r\n        return parseFloat(a.tarifa) - parseFloat(b.tarifa);\r\n    }\r\n\r\n    // Ordenar el arreglo usando la función de comparación\r\n    rowData.sort(compararVuelos);\r\n    return rowData\r\n}\r\nasync function validarPasajeros() {\r\n\r\n    let form = '#formPasajeros';\r\n    const pasajerosDet = [];\r\n    const contPasajeros = document.querySelectorAll(`${form} .cont-pasajero`);\r\n\r\n    contPasajeros.forEach((ruta, indice) => {\r\n        let nombre = ruta.querySelector('input[id^=\"paxName\"]');\r\n        let nombre_ruta = ruta.querySelector('input[id^=\"paxFile\"]');\r\n\r\n        let paxActual = {};\r\n\r\n        if ((nombre && nombre.value.trim() !== '') || (nombre && nombre.dataset.paxn)) {\r\n            // Obtener el id de pasajero desde el data-target\r\n            let id_pax = nombre.dataset.pax || nombre.dataset.paxn;\r\n\r\n            if (id_pax) {\r\n                paxActual.pasajero_id = id_pax.trim();\r\n            }\r\n            if (nombre_ruta && nombre_ruta.files.length > 0) {\r\n                paxActual.nombre_ruta = nombre_ruta.files[0];\r\n            }\r\n            paxActual.nombre = nombre.value.trim();\r\n            pasajerosDet.push(paxActual);\r\n        }\r\n    });\r\n\r\n    return pasajerosDet;\r\n}\r\nasync function validarRutaPax() {\r\n\r\n    // Crear un array para almacenar todas las relaciones posibles\r\n    const relaciones = [];\r\n\r\n    // Obtener todos los elementos <p> dentro del formulario 'formRelRuta'\r\n    $('#formRelRuta').find('p[data-id]').each(function () {\r\n        const $pElemento = $(this);\r\n        const ruta_id = $pElemento.attr('data-id');\r\n\r\n        $(this).find('p[data-paxid]').each(function () {\r\n            const $pElemento = $(this);\r\n            const pasajero_id = $pElemento.attr('data-paxid');\r\n\r\n            if (ruta_id && pasajero_id) {\r\n                relaciones.push({ ruta_id, pasajero_id });\r\n            }\r\n        });\r\n    });\r\n\r\n    return relaciones;\r\n}\r\nasync function consecutivoLineID() {\r\n    // Obtiene todos los datos de la grid\r\n    const allRowData = [];\r\n    gridApi.forEachNode(node => allRowData.push(node.data));\r\n\r\n    // Encuentra el máximo valor de lineID\r\n    let maxLineID = 0;\r\n    allRowData.forEach(row => {\r\n        if (row.line_id && row.line_id > maxLineID) {\r\n            maxLineID = row.line_id;\r\n        }\r\n    });\r\n\r\n    // Incrementa el máximo valor en 1 o establece en 1 si no hay registros\r\n    const newLineID = maxLineID + 1 || 1;\r\n\r\n    return newLineID;\r\n}\r\nasync function relRutasPax2(toggleRelRuta) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre == 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.setAttribute('data-id', nodo.data.relaciones_id); // Asumiendo que nodo.data.id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            selectPasajeros.name = `seleccion-${nodo.data.relaciones_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = ''; // Texto vacío para la opción\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Deshabilitar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n\r\n                let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                let idPasajero = $(`#${pasajeroElement.id}`).data('pax');\r\n                let option = document.createElement('option');\r\n                option.value = nombrePasajero; // Valor del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n\r\n                // let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                // let idPasajero = pasajeroElement.querySelector('input').getAttribute('data-pax'); // Obtener el ID del pasajero\r\n                // let option = document.createElement('option');\r\n                // option.value = nombrePasajero; // Valor del pasajero\r\n                // option.textContent = nombrePasajero; // Texto del pasajero\r\n                // option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n            // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n            let pasajerosSeleccionadosPorRuta = {};\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let pasajeroSeleccionado = selectPasajeros.value;\r\n                let idPasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].getAttribute('data-pax');\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    selectPasajeros.value = '';\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-pax al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n        }\r\n    });\r\n}\r\nasync function relRutasPaxOld(toggleRelRuta, params) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n    // Obtener los pasajeros guardados por ruta y cotización\r\n    let detRutPax = await obtenerRutPaxCot($(\"#cotizar_id\").val());\r\n\r\n    // Agrupar los pasajeros por ruta\r\n    let pasajerosPorRuta = detRutPax.reduce((acc, pax) => {\r\n        if (!acc[pax.ruta_id]) {\r\n            acc[pax.ruta_id] = [];\r\n        }\r\n        acc[pax.ruta_id].push(pax);\r\n        return acc;\r\n    }, {});\r\n\r\n    console.log(pasajerosPorRuta);\r\n    // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n    let pasajerosSeleccionadosPorRuta = {};\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre == 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.classList.add(\"rel-ruta\");\r\n            pRuta.setAttribute('data-id', nodo.data.cot_det_id); // Asumiendo que nodo.data.id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            selectPasajeros.name = `seleccion-${nodo.data.cot_det_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = 'Agrega un pasajero'; // Texto vacío para la opción\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Seleccionar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n                let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                let idPasajero = $(`#${pasajeroElement.id}`).data('pax');\r\n                let option = document.createElement('option');\r\n                option.value = nombrePasajero; // Valor del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let pasajeroSeleccionado = selectPasajeros.value;\r\n                let idPasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].getAttribute('data-pax');\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    selectPasajeros.value = '';\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-pax al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                // Restablecer el select a la opción vacía\r\n                selectPasajeros.value = '';\r\n\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n\r\n            // Rellenar los datos si ya existen para esta ruta\r\n            if (pasajerosPorRuta[nodo.data.cot_det_id]) {\r\n                pasajerosPorRuta[nodo.data.cot_det_id].forEach(pax => {\r\n\r\n                    let pasajeroElemento = document.createElement('p');\r\n                    pasajeroElemento.textContent = `Pasajero: ${pax.nombre}`;\r\n                    pasajeroElemento.setAttribute('data-paxid', pax.pasajero_id); // Añadir atributo data-pax al elemento p\r\n\r\n                    // Insertar el elemento p antes del selectPasajeros\r\n                    pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                    // Marcar la opción como seleccionada en el select\r\n                    let optionToSelect = Array.from(selectPasajeros.options).find(option => option.getAttribute('data-pax') == pax.pasajero_id);\r\n                    if (optionToSelect) {\r\n                        optionToSelect.selected = true;\r\n                    }\r\n\r\n                    // Agregar el pasajero al registro de la ruta actual\r\n                    if (!pasajerosSeleccionadosPorRuta[nodo.data.cot_det_id]) {\r\n                        pasajerosSeleccionadosPorRuta[nodo.data.cot_det_id.toString()] = [];\r\n                    }\r\n                    pasajerosSeleccionadosPorRuta[nodo.data.cot_det_id].push(pax.pasajero_id.toString());\r\n                });\r\n\r\n            }\r\n        }\r\n    });\r\n}\r\nasync function relRutasPax(toggleRelRuta, params) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n    // Obtener los pasajeros guardados por ruta y cotización\r\n    let detRutPax = await obtenerRutPaxCot($(\"#cotizar_id\").val());\r\n\r\n    // Agrupar los pasajeros por ruta\r\n    let pasajerosPorRuta = detRutPax.reduce((acc, pax) => {\r\n        if (!acc[pax.ruta_id]) {\r\n            acc[pax.ruta_id] = [];\r\n        }\r\n        acc[pax.ruta_id].push(pax);\r\n        return acc;\r\n    }, {});\r\n\r\n    // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n    let pasajerosSeleccionadosPorRuta = {};\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre === 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.classList.add(\"rel-ruta\");\r\n            pRuta.setAttribute('data-id', nodo.data.line_id); // Asumiendo que nodo.data.line_id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            selectPasajeros.name = `seleccion-${nodo.data.line_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = 'Agrega un pasajero'; // Texto de la opción vacía\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Seleccionar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n                let nombrePasajero = pasajeroElement.value;\r\n                let idPasajero = pasajeroElement.getAttribute('data-pax');\r\n                let option = document.createElement('option');\r\n                option.value = idPasajero; // Usar el ID del pasajero como valor\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let idPasajeroSeleccionado = selectPasajeros.value;\r\n                let pasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].textContent;\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    selectPasajeros.value = '';\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-paxid al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                selectPasajeros.value = '';\r\n\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n\r\n            // Rellenar los datos si ya existen para esta ruta\r\n            if (pasajerosPorRuta[nodo.data.line_id]) {\r\n                pasajerosPorRuta[nodo.data.line_id].forEach(pax => {\r\n                    let pasajeroElemento = document.createElement('p');\r\n                    pasajeroElemento.textContent = `Pasajero: ${pax.nombre}`;\r\n                    pasajeroElemento.setAttribute('data-paxid', pax.pasajero_id); // Añadir atributo data-paxid al elemento p\r\n\r\n                    // Insertar el elemento p antes del selectPasajeros\r\n                    pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                    // Agregar el pasajero al registro de la ruta actual\r\n                    if (!pasajerosSeleccionadosPorRuta[nodo.data.line_id]) {\r\n                        pasajerosSeleccionadosPorRuta[nodo.data.line_id] = [];\r\n                    }\r\n                    pasajerosSeleccionadosPorRuta[nodo.data.line_id].push(pax.pasajero_id.toString());\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n// FETCH\r\nasync function obtenerCotizaciones() {\r\n\r\n    try {\r\n        const respuesta = await fetch('../obtener/cotizaciones', {\r\n            method: 'GET',\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        let convert = verificarArray(data);\r\n        gridApi.setGridOption('rowData', convert);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener las cotizaciones', 2500);\r\n    }\r\n}\r\nasync function obtnerVuelosId(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/vuelos', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function establecerAsientos() {\r\n    let aeronaves = await obtenerAeronaves();\r\n    let aeronaveId = $('#aeronave_id').val();\r\n    const aeronaveEncontrada = aeronaves.find(objeto => objeto.aeronave_id == aeronaveId);\r\n    if (aeronaveEncontrada) PASAJEROS = aeronaveEncontrada.asientos;\r\n}\r\nasync function validaRutaTarifa(origenVal, destinoVal) {\r\n    try {\r\n        let cliente = $('#cliente_id').val();\r\n        let broker = $('#broker_id').val();\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('destino', destinoVal);\r\n        datos.append('cliente_id', cliente);\r\n        datos.append('broker_id', broker);\r\n        datos.append('aeronave_id', aeronave);\r\n\r\n        const respuesta = await fetch('../valida/ruta', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function obtenerTarifaCosto() {\r\n\r\n    try {\r\n\r\n        const aeronave = $(\"#aeronave_id\").val();\r\n        const broker_id = $(\"#broker_id\").val();\r\n        const cliente_id = $(\"#cliente_id\").val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('aeronave', aeronave);\r\n        datos.append('broker_id', broker_id);\r\n        datos.append('cliente_id', cliente_id);\r\n\r\n        const respuesta = await fetch('../obtener/tarifacostos', {\r\n            method: 'post',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (data && data.tarifa) {\r\n            $(\"#costo_id\").val(data.tarifa.costo_id);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerPasajeros() {\r\n    try {\r\n\r\n        const respuesta = await fetch('../obtener/pasajeros', {\r\n            method: 'get',\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerRutPaxCot(id) {\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/rutPaxCot', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerDocsbyPax(id) {\r\n\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('pasajero_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/pasajerosDocs', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        // if (!data.length > 0) SwalToast('warning', 'No hay Documentos disponibles.', 2500);\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function obtenerAeropuertos() {\r\n    try {\r\n        const respuesta = await fetch('../allAeropuertos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Aeropuertos disponibles.', 2500);\r\n        } else {\r\n            AEROPUERTOS = data;\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerTipoCambio() {\r\n    try {\r\n        const respuesta = await fetch('../tipo/cambio', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data) {\r\n            SwalToast('warning', 'No hay Tipo de Cambio.', 2500);\r\n        } else {\r\n\r\n            // Agregar 1% arriba\r\n            let tipoCambio = data.tipo_cambio;\r\n            let porciento = tipoCambio * 0.01;\r\n            let cambioNuevo = parseFloat(tipoCambio) + parseFloat(porciento);\r\n\r\n            $('#tipo_cambio option').val(data.tipo_cambio_id);\r\n            $('#tipo_cambio option').text(parseFloat(cambioNuevo).toFixed(2));\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerCategorias() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/categorias', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Categorias disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerProductos() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/productos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Productos disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerAeronaves() {\r\n    try {\r\n        const respuesta = await fetch('../allAeronaves', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) SwalToast('warning', 'No hay Aeronaves disponibles.', 2500);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerClientes() {\r\n    try {\r\n        const respuesta = await fetch('../allClientes', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data.length > 0) SwalToast('warning', 'No hay Clientes disponibles.', 2500);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerEmpresas() {\r\n    try {\r\n        const respuesta = await fetch('../brokers/activas', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data.length > 0) { SwalToast('warning', 'No hay Empresas disponibles.', 2500); }\r\n        else {\r\n            EMPRESAS = data;\r\n        }\r\n\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerCodigosIATA(origenVal, destinoVal) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('destino', destinoVal);\r\n\r\n        const respuesta = await fetch('../obtener/codigos', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerTasaAterrizaje(origenVal, aeronave) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('aeronave_id', aeronave);\r\n\r\n        const respuesta = await fetch('../valida/aterrizaje', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function obtenerCotizacionPDF() {\r\n\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        const fecha_cot = $('#fecha-cot').val();\r\n        const folio = $('#folio').val();\r\n        const aeronave_id = $('#aeronave_id').val();\r\n        if ($('#slctOpcion').val() == 1) {\r\n            const cliente_id = $('#cliente_id').val();\r\n            const clienteName = $('#cliente_id option').text();\r\n\r\n            datos.append('cliente_id', cliente_id);\r\n            datos.append('clienteName', clienteName);\r\n        } else if ($('#slctOpcion').val() == 2) {\r\n            const broker_id = $('#broker_id').val();\r\n            const brokerName = $('#broker_id option').text();\r\n            datos.append('broker_id', broker_id);\r\n            datos.append('brokerName', brokerName);\r\n        }\r\n        const condiciones = 'Contado';\r\n        const subtotal = $('#subtotal').val();\r\n        const ivaNac = $('#ivaNac').val();\r\n        const ivaInt = $('#ivaInt').val();\r\n        const total = $('#total').val();\r\n        const cant_pernocta = $('#cant_pernocta').val();\r\n        const tot_pernocta = $('#tot_pernocta').val();\r\n        const cant_hrs = $('#cant_hrs').val();\r\n        const tot_hrs = $('#tot_hrs').val();\r\n\r\n        // const detalles = await validarGrid();\r\n        let detalles = await validarGridPDF();\r\n\r\n        // console.log(detalles);\r\n        // return\r\n        if (detalles.length > 0) {\r\n            detalles.forEach(node => {\r\n                // let data = { ...node.data }; // Crear una copia del objeto para no modificar el original\r\n                if (node.categoria && node.categoria != 'Ruta') {\r\n                    delete node.fecha_salida;\r\n                }\r\n            });\r\n        }\r\n\r\n        datos.append('fecha_cot', fecha_cot);\r\n        datos.append('folio', folio);\r\n        datos.append('aeronave_id', aeronave_id);\r\n        datos.append('condiciones', condiciones);\r\n        datos.append('subtotal', subtotal);\r\n        datos.append('ivaNac', ivaNac);\r\n        datos.append('ivaInt', ivaInt);\r\n        datos.append('total', total);\r\n        datos.append('cant_pernocta', cant_pernocta);\r\n        datos.append('tot_pernocta', tot_pernocta);\r\n        datos.append('cant_hrs', cant_hrs);\r\n        datos.append('tot_hrs', tot_hrs);\r\n        datos.append('detalles', JSON.stringify(detalles));\r\n\r\n        const respuesta = await fetch('../obtener/pdf', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        // const blob = await respuesta.blob();\r\n        if (data.urlArchivo) {\r\n            window.open(data.urlArchivo, '_blank');\r\n        } else {\r\n            console.error('No se pudo obtener la URL del archivo PDF.');\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener el PDF', 2500);\r\n    }\r\n}\r\nasync function validarDetEliminar(lineId, rowNode) {\r\n\r\n    // Verificar si la fila tiene la categoría 'Ruta'\r\n    const categoriaRuta = rowNode.data.categoria.nombre === 'Ruta';\r\n\r\n    if (categoriaRuta) {\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        gridApi.forEachNode(async node => {\r\n            const rowData = node.data;\r\n            const rowNodeP = node;\r\n\r\n            // Buscar las filas con la categoría 'Pernocta' y el mismo ID de relaciones\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Pernocta' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.cot_det_id)\r\n            }\r\n\r\n            // Buscar las filas con la categoría 'Tua' y el mismo ID de relaciones\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Tua' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.cot_det_id)\r\n            }\r\n\r\n            // // Buscar las filas con la categoría 'Aterrizaje\r\n            // if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje') {\r\n            //     const destino = rowNode.data.destino.aeropuerto_id;\r\n            //     const valAterrizaje = await obtenerTasaAterrizaje(destino, aeronave);\r\n\r\n            //     // Buscar si existe relacion \r\n            //     if (rowData.relaciones_id == valAterrizaje.aterrizaje.tasa_aterrizaje_id) {\r\n            //         console.log(rowNodeP);\r\n            //         limpiarCelda(rowNodeP);\r\n            //         await eliminarDet(rowData.cot_det_id)\r\n            //     }\r\n            // }\r\n\r\n            // Buscar las filas con la categoria 'Aterrizaje'\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.cot_det_id)\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    // Eliminamos el Registro clickeado\r\n    await eliminarDet(rowNode.data.cot_det_id)\r\n    limpiarCelda(rowNode);\r\n}\r\nasync function crearCotizacion() {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        const aeronave_id = $('#aeronave_id').val();\r\n        const fechaCot = $('#fecha-cot').val();\r\n        const estatus = $('#estatus').val();\r\n        if ($('#slctOpcion').val() == 1) {\r\n            const cliente_id = $('#cliente_id').val();\r\n            datos.append('cliente_id', cliente_id);\r\n        } else if ($('#slctOpcion').val() == 2) {\r\n            const broker_id = $('#broker_id').val();\r\n            datos.append('broker_id', broker_id);\r\n        }\r\n        const tipo_cambio = $('#tipo_cambio').val();\r\n        const cant_pernocta = $('#cant_pernocta').val();\r\n        const tot_pernocta = sinComa($('#tot_pernocta').val());\r\n        const tot_hrs = sinComa($('#tot_hrs').val());\r\n        const subtotal = sinComa($('#subtotal').val());\r\n        const ivaNac = sinComa($('#ivaNac').val());\r\n        const ivaInt = sinComa($('#ivaInt').val());\r\n        const total = sinComa($('#total').val());\r\n        const costo_id = $('#costo_id').val();\r\n        const comentarios = $('#rt-comment').val();\r\n\r\n        let tipo_de_viaje = 0;\r\n\r\n        let detalles = await validarGrid();\r\n        let pasajerosDet = await validarPasajeros();\r\n\r\n        if (detalles.length > 0) {\r\n            let dtO1 = detalles[0]['origen'];\r\n            let dtD1 = detalles[0]['destino'];\r\n            if (detalles.length == 1) {\r\n                tipo_de_viaje = 1;\r\n            } else if (detalles.length == 2) {\r\n                let dtO2 = detalles[1]['origen'];\r\n                let dtD2 = detalles[1]['destino'];\r\n                if (dtO1 == dtD2 && dtD1 == dtO2) {\r\n                    tipo_de_viaje = 2;\r\n                } else {\r\n                    tipo_de_viaje = 3;\r\n                }\r\n            } else {\r\n                tipo_de_viaje = 3;\r\n            }\r\n            datos.append('aeronave_id', aeronave_id);\r\n            datos.append('fechaCot', fechaCot);\r\n            datos.append('estatus', estatus);\r\n            datos.append('tipo_cambio_id', tipo_cambio);\r\n            datos.append('cant_pernocta', cant_pernocta);\r\n            datos.append('tot_pernocta', tot_pernocta);\r\n            datos.append('tot_hr_cotizadas', tot_hrs);\r\n            datos.append('subtotal', subtotal);\r\n            datos.append('ivaNac', ivaNac);\r\n            datos.append('ivaInt', ivaInt);\r\n            datos.append('total', total);\r\n            datos.append('tipo_de_viaje', tipo_de_viaje);\r\n            datos.append('costo_id', costo_id);\r\n            datos.append('comentarios', comentarios);\r\n            datos.append('pasajerosDet', JSON.stringify(pasajerosDet));\r\n            datos.append('detalles', JSON.stringify(detalles));\r\n\r\n            // Agregar los archivos al FormData\r\n            pasajerosDet.forEach((pasajero, index) => {\r\n                if (pasajero && pasajero.nombre) {\r\n                    let prefijo;\r\n                    if (pasajero.pasajero_id) {\r\n                        prefijo = pasajero.pasajero_id;\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    } else {\r\n                        // Obtener la primera letra de cada palabra en el nombre\r\n                        prefijo = pasajero.nombre.split(' ').map(word => word.charAt(0)).join('');\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const respuesta = await fetch('../crear/costeo', {\r\n                method: 'POST',\r\n                body: datos\r\n            });\r\n\r\n            const data = await respuesta.json();\r\n\r\n            if (data.exito == 1) {\r\n                // Registro Creado Exitosamente\r\n                SwalLoad('success', 'Éxito', 'Registro Creado Correctamente', false);\r\n\r\n                setTimeout(() => {\r\n                    swal.close();\r\n                    resetForm();\r\n                    obtenerCotizaciones();\r\n                }, 1500);\r\n            }\r\n            else if (data.exito == 0) {\r\n                SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n            }\r\n\r\n            if (data.alertas) {\r\n                SwalToast('warning', data.alertas.error, 2500);\r\n                return\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function actualizarCotizacion() {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        const cotizar_id = $('#cotizar_id').val();\r\n        const folio = $('#folio').val();\r\n        const estatus = $('#estatus').val();\r\n        const fechaCot = $('#fecha-cot').val();\r\n        const aeronave_id = $('#aeronave_id').val();\r\n        if ($('#slctOpcion').val() == 1) {\r\n            const cliente_id = $('#cliente_id').val();\r\n            datos.append('cliente_id', cliente_id);\r\n        } else if ($('#slctOpcion').val() == 2) {\r\n            const broker_id = $('#broker_id').val();\r\n            datos.append('broker_id', broker_id);\r\n        }\r\n        const tipo_cambio = $('#tipo_cambio').val();\r\n        const cant_pernocta = $('#cant_pernocta').val();\r\n        const tot_pernocta = sinComa($('#tot_pernocta').val());\r\n        const tot_hrs = sinComa($('#tot_hrs').val());\r\n        const subtotal = sinComa($('#subtotal').val());\r\n        const ivaNac = sinComa($('#ivaNac').val());\r\n        const ivaInt = sinComa($('#ivaInt').val());\r\n        const total = sinComa($('#total').val());\r\n        const costo_id = $('#costo_id').val();\r\n        const comentarios = $('#rt-comment').val();\r\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\r\n\r\n        let tipo_de_viaje = 0;\r\n        let detalles = await validarGrid();\r\n        let pasajerosDet = await validarPasajeros();\r\n\r\n        if (detalles.length > 0) {\r\n            let dtO1 = detalles[0]['origen'];\r\n            let dtD1 = detalles[0]['destino'];\r\n            if (detalles.length == 1) {\r\n                tipo_de_viaje = 1;\r\n            } else if (detalles.length == 2) {\r\n                let dtO2 = detalles[1]['origen'];\r\n                let dtD2 = detalles[1]['destino'];\r\n                if (dtO1 == dtD2 && dtD1 == dtO2) {\r\n                    tipo_de_viaje = 2;\r\n                } else {\r\n                    tipo_de_viaje = 3;\r\n                }\r\n            } else {\r\n                tipo_de_viaje = 3;\r\n            }\r\n            datos.append('cotizar_id', cotizar_id);\r\n            datos.append('folio_cotizar', folio);\r\n            datos.append('aeronave_id', aeronave_id);\r\n            datos.append('fecha_creacion', fechaCot);\r\n            datos.append('estatus', estatus);\r\n            datos.append('tipo_cambio_id', tipo_cambio);\r\n            datos.append('cant_pernocta', cant_pernocta);\r\n            datos.append('tot_pernocta', tot_pernocta);\r\n            datos.append('tot_hr_cotizadas', tot_hrs);\r\n            datos.append('subtotal', subtotal);\r\n            datos.append('ivaNac', ivaNac);\r\n            datos.append('ivaInt', ivaInt);\r\n            datos.append('total', total);\r\n            datos.append('comentarios', comentarios);\r\n            datos.append('tipo_de_viaje', tipo_de_viaje);\r\n            datos.append('costo_id', costo_id);\r\n            datos.append('pasajerosDet', JSON.stringify(pasajerosDet));\r\n            datos.append('detalles', JSON.stringify(detalles));\r\n            datos.append('csrf_token', csrfToken);\r\n\r\n            // Agregar los archivos al FormData\r\n            pasajerosDet.forEach((pasajero, index) => {\r\n                if (pasajero && pasajero.nombre && pasajero.nombre_ruta) {\r\n                    let prefijo;\r\n                    if (pasajero.pasajero_id) {\r\n                        prefijo = pasajero.pasajero_id;\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    } else {\r\n                        // Obtener la primera letra de cada palabra en el nombre\r\n                        prefijo = pasajero.nombre.split(' ').map(word => word.charAt(0)).join('');\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const respuesta = await fetch('../actualizar/costeo', {\r\n                method: 'POST',\r\n                body: datos,\r\n                headers: {\r\n                    'X-CSRF-Token': csrfToken\r\n                }\r\n            });\r\n\r\n            const data = await respuesta.json();\r\n\r\n            if (data.exito == 1) {\r\n                SwalLoad('success', 'Éxito', 'Registro Actualizado Correctamente', false);\r\n                setTimeout(() => {\r\n                    swal.close();\r\n                    resetForm();\r\n                    obtenerCotizaciones();\r\n                }, 1500);\r\n            } else if (data.exito == 0) {\r\n                SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n            }\r\n\r\n            if (data.alertas) {\r\n                SwalToast('warning', data.alertas.error, 2500);\r\n                return\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function actualizarRutaPax() {\r\n\r\n    try {\r\n        let relRutaPax = await validarRutaPax();\r\n        if (relRutaPax == '') return\r\n        const cotizar_id = $('#cotizar_id').val();\r\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\r\n\r\n        const datos = new FormData();\r\n        datos.append('id_cot', cotizar_id);\r\n        datos.append('relRutaPax', JSON.stringify(relRutaPax));\r\n        datos.append('csrf_token', csrfToken);\r\n\r\n\r\n        const respuesta = await fetch('../actualizar/relacionRutaPax', {\r\n            method: 'POST',\r\n            body: datos,\r\n            headers: {\r\n                'X-CSRF-Token': csrfToken\r\n            }\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        console.log(data);\r\n\r\n        $('#formRelRuta').empty();\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function eliminarDet(id) {\r\n\r\n    try {\r\n        const cotizar = $('#cotizar_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('cot_det_id', id);\r\n        datos.append('cotizar_id', cotizar);\r\n\r\n        const respuesta = await fetch('../eliminar/detalle', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            // Registro Creado Exitosamente\r\n            SwalToast('success', 'Registro Eliminado Correctamente', 2500);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n\r\n}\r\nasync function eliminarPasajero(cotizar_id, pasajero_id) {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', cotizar_id);\r\n        datos.append('pasajero_id', pasajero_id);\r\n\r\n        const respuesta = await fetch('../eliminar/pasajero', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            SwalToast('success', 'Registro Eliminado Correctamente', 2500);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n\r\n}\r\nasync function generarServicio() {\r\n\r\n    try {\r\n        const cotizar_id = $('#cotizar_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', cotizar_id);\r\n\r\n        const respuesta = await fetch('../generar/servicio', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        if (data.exito == 1) {\r\n            SwalLoad('success', 'Éxito', 'Servicio Creado Correctamente', false);\r\n            setTimeout(() => {\r\n                swal.close();\r\n                resetForm();\r\n                obtenerCotizaciones();\r\n            }, 1500);\r\n        } else if (data.exito == 0) {\r\n            SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\n\r\n//  CLASES\r\nclass CustomHeaderGroup {\r\n\r\n    init(params) {\r\n        this.params = params;\r\n        this.eGui = document.createElement('div');\r\n        this.eGui.className = 'ag-header-group-cell-label';\r\n        this.eGui.innerHTML = '' +\r\n            '<div class=\"customHeaderLabel\">' + this.params.displayName + '</div>' +\r\n            '<div class=\"customExpandButton\"><i class=\"fa fa-arrow-right\"></i></div>';\r\n\r\n        this.onExpandButtonClickedListener = this.expandOrCollapse.bind(this);\r\n        this.eExpandButton = this.eGui.querySelector(\".customExpandButton\");\r\n        this.eExpandButton.addEventListener('click', this.onExpandButtonClickedListener);\r\n\r\n        this.onExpandChangedListener = this.syncExpandButtons.bind(this);\r\n        this.params.columnGroup.getProvidedColumnGroup().addEventListener('expandedChanged', this.onExpandChangedListener);\r\n\r\n        this.syncExpandButtons();\r\n    }\r\n\r\n    getGui() {\r\n        return this.eGui;\r\n    }\r\n\r\n    expandOrCollapse() {\r\n        var currentState = this.params.columnGroup.getProvidedColumnGroup().isExpanded();\r\n        this.params.setExpanded(!currentState);\r\n    }\r\n\r\n    syncExpandButtons() {\r\n        function collapsed(toDeactivate) {\r\n            toDeactivate.className = toDeactivate.className.split(' ')[0] + ' collapsed';\r\n        }\r\n\r\n        function expanded(toActivate) {\r\n            toActivate.className = toActivate.className.split(' ')[0] + ' expanded';\r\n        }\r\n\r\n        if (this.params.columnGroup.getProvidedColumnGroup().isExpanded()) {\r\n            expanded(this.eExpandButton);\r\n        } else {\r\n            collapsed(this.eExpandButton);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.eExpandButton.removeEventListener('click', this.onExpandButtonClickedListener);\r\n    }\r\n}\r\n"]}