{"version":3,"sources":["servicio.js"],"names":["gridOptions","PASAJEROS","asignarEventos","$","hide","addClass","aplicarMascaraCantidad","document","addEventListener","e","key","resetForm","getElementById","async","event","preventDefault","show","focus","data","obtenerPilotos","mostrarListaSearch","activarRutas","obtenerPasajeros","listSearch","val","text","nuevoPax","setPaxId","title","querySelector","content","classList","contains","remove","add","removeClass","titleRel","contentRel","empty","toggleRelRuta","relRutasPax","configurarBotones","click","validar","validateInputs","estatus","querySelectorAll","actualizarCotizacion","actualizarRutaPax","obtenerTipoCambio","SwalToast","inicializarPagina","iniciarTabla","headerName","field","width","cellStyle","textAlign","valueFormatter","params","Number","value","toFixed","replace","headerClass","cellClass","filter","cellRenderer","editButton","createElement","className","console","log","Object","keys","length","prop","servicio_id","cotizar_id","folio_cotizar","formatearFecha","fecha_creacion","comentarios","aeronave_id","modeloAeronave","tipoCambio","tipo_cambio","porciento","cambioNuevo","parseFloat","tipo_cambio_id","piloto_id","nombrePiloto","mostrarContenedorAltas","cliente_id","mostrarClienteEmpresa","nombreCli","broker_id","nombreBrok","contacto_principal","nuevosDatos","obtenerServDet","map","cot","baseObjeto","servicio_detalle_id","fecha_salida","hora_salida","categoria","categoria_id","nombre","nombreCat","concepto","pasajeros","tipo_vuelo","cantidad","percost","tarifa","subtotal","rel_ruta","relaciones_id","relacion_id","line_id","origen","aeropuerto_id","origenId","municipio","origMun","destino","destinoId","destMun","arreglo2","Array","fill","nuevosDatosClonados","concat","obj","gridApi","setGridOption","obtenerTarifaCosto","botonBoardingPass","actTotales","datosPax","obtenerPax","detallePax","paxDoc","i","formPax","forEach","ruta","indice","paxId","pasajero_id","paxName","inputPaxName","dataset","pax","documentos","isArray","obtenerDocumentosPorPaxId","contenedorDocs","doc","enlace","href","hash_doc","tipo_doc","setAttribute","divIcon","icon","divName","name","textContent","nombre_doc","appendChild","ordenarPorCategoria","actionContainer","obtenerServicios","configTablaCrear","aeropuerto","obtenerAeropuertos","obtenerCategorias","producto","obtenerProductos","columnDefs","headerGroupComponent","CustomHeaderGroup","children","cellEditor","editable","fecha","cellClassRules","event-none","columnGroupShow","undefined","hora","horas","minutos","includes","partes","split","hrsNum","minNum","horaFormateada","toString","padStart","test","cellEditorParams","values","a","valueGetter","valueSetter","newValue","cotDetIdValue","valueParser","Math","round","tipoVuelo","isNaN","lineId","rowNode","node","validarDetEliminar","limpiarCelda","establecerAsientos","columnName","column","colId","rowData","rowIndex","origenVal","destinoVal","valida","validaRutaTarifa","exito","alertas","error","getRowNode","setDataValue","costo_id","costo_mx","costo_usd","ruta_id","cod","obtenerCodigosIATA","newLineID","consecutivoLineID","generarPernoctas","generarAterrizajes","generarTUA","oldValue","applyTransaction","update","rutasData","forEachNode","push","actTotalesLine","cellElement","target","nuevacategoria","objeto","id","grid","mostrarListaGrid","valor","redrawRows","nuevoProducto","producto_id","prodFind","find","item","precio","nuevoAeropuerto","allColumns","setData","lineaAct","pernocta","refreshCells","force","cantPernoctas","totPernoctas","cantHoras","totalHoras","subtotalInpt","subtNac","subtInt","ivaNac","ivaInt","hr_cant","allData","rutaRows","aterrizajeRows","pernoctaRows","otrasCategoriasRows","sortedRows","updateGridOptions","rowDataToRemove","cat","idLine","pernoctasMap","rowsToAdd","fechaActual","diaActual","obtenerDia","conceptoActual","substring","lastIndexOf","tarifaActual","relacionActual","lineID","fechaSiguiente","daysDifference","calcularDiferenciaDias","newRow","rowsToUpdate","row","aterrizajesMap","aeronave","relacion","valAterrizaje","obtenerTasaAterrizaje","aterrizaje","tarifa_aterrizaje","tasa_aterrizaje_id","tuasMap","aeropuertos","aeropuertoFind","subtotales","resetearTabla","cerrarVentana","MAXPAX","limpiarForm","opcionSeleccionada","toggle","piloto","allRowData","maxLineID","formPasajeros","contadorPasajeros","nuevoPasajeroDiv","divInputGroupText","idPaxInput","type","nuevoNombreInput","placeholder","nuevoNombreLabel","htmlFor","divInputGroupFile","nuevoArchivoInput","accept","nuevoEliminar","divDocs","on","this","closest","eliminarPasajero","flagRepetido","inputElement","paxn","docsPAx","obtenerDocsbyPax","relRutasPaxPld","pasajerosPorRuta","obtenerRutPaxCot","reduce","acc","pasajerosSeleccionadosPorRuta","nodo","pRuta","selectPasajeros","pasajerosElements","optionEmpty","disabled","selected","pasajeroElement","nombrePasajero","idPasajero","option","pasajeroSeleccionado","idPasajeroSeleccionado","options","selectedIndex","getAttribute","idRuta","pasajeroElemento","insertBefore","optionToSelect","from","datos","FormData","append","respuesta","fetch","method","body","json","SwalLoad","validarGrid","detalles","nodes","tHoras","filaModificada","formattedFecha","formatearFechaYear","horaFormat","formatoHora","validarPasajeros","pasajerosDet","nombre_ruta","paxActual","trim","id_pax","files","validarRutaPax","relaciones","each","attr","convert","verificarArray","AEROPUERTOS","obtenerAeronaves","cliente","broker","aeronaves","aeronaveId","aeronaveEncontrada","asientos","rowNodeP","eliminarDet","servicio","folio","fechaCot","cant_pernocta","tot_pernocta","sinComa","tot_hrs","total","tipo_de_viaje","dtO1","dtD1","dtO2","JSON","stringify","pasajero","index","prefijo","word","charAt","join","setTimeout","swal","close","errorSMS","relRutaPax","csrfToken","headers","X-CSRF-Token","[object Object]","eGui","innerHTML","displayName","onExpandButtonClickedListener","expandOrCollapse","bind","eExpandButton","onExpandChangedListener","syncExpandButtons","columnGroup","getProvidedColumnGroup","currentState","isExpanded","setExpanded","toDeactivate","toActivate","removeEventListener"],"mappings":"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","file":"servicio.js","sourcesContent":["let gridOptions;\r\nlet PASAJEROS = '';\r\n\r\n\r\n// Utilizando el Principio de Modularidad\r\n$(function () {\r\n    asignarEventos();\r\n    inicializarPagina();\r\n    configurarBotones();\r\n});\r\nfunction asignarEventos() {\r\n    $(\".contenedor-altas\").hide();\r\n    $(\".costeo-relacion\").hide();\r\n    $(\".btn-pass\").hide();\r\n    $(\"#myGrid2\").addClass('event-none');\r\n\r\n    // Ocultar Listados\r\n    $('.pilSearch').hide();\r\n    $('.aeroSearch').hide();\r\n    $('.emprSearch').hide();\r\n    $('.cliSearch').hide();\r\n    $('.paxSearch').hide();\r\n\r\n    aplicarMascaraCantidad('subtotal', 'ivaNac', 'ivaInt', 'total', 'cant_pernocta', 'tot_pernocta', 'cant_hrs', 'tot_hrs');\r\n\r\n    // Esc Cerrar\r\n    document.addEventListener(\"keydown\", e => {\r\n        if (e.key === 'Escape') {\r\n            // Limpiar Ruta\r\n            resetForm();\r\n        }\r\n    });\r\n\r\n    // Lista Pilotos\r\n    document.getElementById(\"piloto_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.pilSearch').show();\r\n        $('.inPilSrch').focus();\r\n        let data = await obtenerPilotos();\r\n        const listSearch = await mostrarListaSearch(data, '.pilSearch', 'piloto_id', 'nombre_empleado');\r\n        if (listSearch) activarRutas();\r\n    });\r\n\r\n    // Lista Pasajeros\r\n    document.getElementById(\"pasajero_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.paxSearch').show();\r\n        $('.inPaxSrch').focus();\r\n        let data = await obtenerPasajeros();\r\n        const listSearch = await mostrarListaSearch(data, '.paxSearch', 'pasajero_id', 'nombre', true);\r\n        if (listSearch == 'nuevo') {\r\n            $(\"#pasajero_id option\").val();\r\n            $(\"#pasajero_id option\").text('');\r\n            nuevoPax();\r\n        } else {\r\n            $(\"#pasajero_id option\").val();\r\n            $(\"#pasajero_id option\").text('');\r\n            setPaxId(listSearch);\r\n        }\r\n    });\r\n\r\n    // toggle\r\n    const title = document.querySelector(\".toggle-pax\");\r\n    const content = document.querySelector(\".toggle-pax-cont\");\r\n\r\n    title.addEventListener(\"click\", function () {\r\n        if (content.classList.contains(\"expanded\")) {\r\n            content.classList.remove(\"expanded\");\r\n            title.classList.remove(\"expanded\");\r\n            $(\"#formPasajeros\").addClass(\"toggle-pax-cont\");\r\n        } else {\r\n            content.classList.add(\"expanded\");\r\n            title.classList.add(\"expanded\");\r\n            $(\"#formPasajeros\").removeClass(\"toggle-pax-cont\");\r\n        }\r\n    });\r\n\r\n    const titleRel = document.querySelector(\".toggle-relRuta\");\r\n    const contentRel = document.querySelector(\".toggle-relRuta-cont\");\r\n    titleRel.addEventListener(\"click\", async function () {\r\n        if (contentRel.classList.contains(\"expanded\")) {\r\n            contentRel.classList.remove(\"expanded\");\r\n            titleRel.classList.remove(\"expanded\");\r\n            $('#formRelRuta').empty();\r\n        } else {\r\n            contentRel.classList.add(\"expanded\");\r\n            titleRel.classList.add(\"expanded\");\r\n        }\r\n    });\r\n\r\n    const toggleRelRuta = document.querySelector('.toggle-relRuta');\r\n    toggleRelRuta.addEventListener('mousedown', async function () {\r\n        await relRutasPax(toggleRelRuta);\r\n    });\r\n\r\n}\r\nfunction configurarBotones() {\r\n\r\n    $(\"#btnCancel\").click(e => {\r\n        resetForm();\r\n    });\r\n\r\n    $(\"#btnPasajero\").click(e => {\r\n        nuevoPax();\r\n    });\r\n\r\n    $(\"#btnGuardar\").click(async e => {\r\n        const validar = validateInputs($('#formAltas'));\r\n        const estatus = $(\"#estatus\").val();\r\n        if ((validar) && (estatus == 'SVC') && ($(\"#servicio_id\").val())) {\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n            if (pasajerosElements) {\r\n                await actualizarCotizacion();\r\n                await actualizarRutaPax();\r\n            } else {\r\n                await actualizarCotizacion();\r\n            }\r\n        }\r\n    });\r\n\r\n    $(\"#actTipoCambio\").click(async e => {\r\n        let tipo = await obtenerTipoCambio();\r\n        if (tipo) SwalToast('success', 'Tipo de Cambio Actualizado.', 2500);\r\n    });\r\n}\r\n\r\n// GRID\r\nfunction inicializarPagina() {\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'id',\r\n            field: 'servicio_id',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Folio',\r\n            field: 'folio_cotizar',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Broker',\r\n            field: 'nombreBrok',\r\n            width: 110\r\n        },\r\n        {\r\n            headerName: 'Cliente',\r\n            field: 'nombreCli',\r\n            width: 110\r\n        },\r\n        {\r\n            headerName: 'Aeronave',\r\n            field: 'modeloAeronave',\r\n            width: 160\r\n        },\r\n        {\r\n            headerName: 'Ruta',\r\n            field: 'concepto',\r\n            width: 180\r\n        },\r\n        {\r\n            headerName: 'Fecha Salida',\r\n            field: 'fecha_salida',\r\n            width: 100\r\n        },\r\n        {\r\n            headerName: 'Total',\r\n            field: 'total',\r\n            width: 120,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            valueFormatter: function (params) {\r\n                // Formatea el número con comas como separadores de miles y dos decimales\r\n                return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Estatus',\r\n            field: 'estatus',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            width: 150,\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false,\r\n            cellRenderer: function (params) {\r\n                const editButton = document.createElement('I');\r\n                editButton.className = \"fa-regular fa-pen-to-square btn btn-editar\";\r\n                editButton.title = 'Ver o Editar';\r\n\r\n                // Datos a Editar\r\n                editButton.addEventListener('click', async function (e) {\r\n\r\n                    console.log(params.data);\r\n                    if (Object.keys(params.data).length == 0) return;\r\n\r\n                    $('#aeronave_id').prop('disabled', true);\r\n                    $('#slctOpcion').prop('disabled', true);\r\n                    $('#cliente_id').prop('disabled', true);\r\n                    $('#broker_id').prop('disabled', true);\r\n\r\n                    // Establecer Datos\r\n                    $('#servicio_id').val(params.data.servicio_id);\r\n                    $('#cotizar_id').val(params.data.cotizar_id);\r\n                    $('#folio').val(params.data.folio_cotizar);\r\n                    $('#fecha-cot').val(formatearFecha(params.data.fecha_creacion));\r\n                    $('#rt-comment').val(params.data.comentarios);\r\n                    $('#estatus').val(params.data.estatus);\r\n                    $('#aeronave_id option').val(params.data.aeronave_id);\r\n                    $('#aeronave_id option').text(params.data.modeloAeronave);\r\n\r\n                    // Agregar 1% arriba\r\n                    let tipoCambio = params.data.tipo_cambio;\r\n                    let porciento = tipoCambio * 0.01;\r\n                    let cambioNuevo = parseFloat(tipoCambio) + parseFloat(porciento);\r\n                    cambioNuevo.toFixed();\r\n\r\n                    $('#tipo_cambio option').val(params.data.tipo_cambio_id);\r\n                    $('#tipo_cambio option').text(Number(cambioNuevo).toFixed(2));\r\n\r\n                    $('#piloto_id option').val(params.data.piloto_id);\r\n                    $('#piloto_id option').text(params.data.nombrePiloto);\r\n\r\n                    await mostrarContenedorAltas();\r\n\r\n                    if (params.data.cliente_id) {\r\n                        $('#slctOpcion').val(1);\r\n                        mostrarClienteEmpresa();\r\n                        $(\"#cliente_id option\").val(params.data.cliente_id);\r\n                        $(\"#cliente_id option\").text(params.data.nombreCli);\r\n                    } else if (params.data.broker_id) {\r\n                        $('#slctOpcion').val(2);\r\n                        mostrarClienteEmpresa();\r\n                        $(\"#broker_id option\").val(params.data.broker_id);\r\n                        $(\"#broker_id option\").text(params.data.nombreBrok);\r\n                        $('#rt-responsable').val(params.data.contacto_principal);\r\n                    }\r\n\r\n                    let detalleRutas = await obtenerServDet(params.data.servicio_id);\r\n\r\n                    let nuevosDatos = detalleRutas.map(cot => {\r\n\r\n                        let baseObjeto = {\r\n                            servicio_detalle_id: cot.servicio_detalle_id,\r\n                            fecha_salida: cot.fecha_salida,\r\n                            hora_salida: cot.hora_salida,\r\n                            categoria: { categoria_id: cot.categoria_id, nombre: cot.nombreCat },\r\n                            concepto: cot.concepto,\r\n                            pasajeros: cot.pasajeros,\r\n                            tipo_vuelo: cot.tipo_vuelo,\r\n                            cantidad: cot.cantidad,\r\n                            percost: cot.percost,\r\n                            tarifa: cot.tarifa,\r\n                            subtotal: cot.subtotal,\r\n                            rel_ruta: cot.rel_ruta,\r\n                            relaciones_id: cot.relacion_id,\r\n                            line_id: cot.line_id,\r\n                        }\r\n\r\n                        // Agregar origen y destino solo si categoria es 1\r\n                        if (cot.categoria_id == 1) {\r\n                            baseObjeto.origen = { 'aeropuerto_id': cot.origenId, 'municipio': cot.origMun };\r\n                            baseObjeto.destino = { 'aeropuerto_id': cot.destinoId, 'municipio': cot.destMun };\r\n                        }\r\n\r\n                        return baseObjeto;\r\n                    });\r\n\r\n                    if (nuevosDatos.length < 9) {\r\n                        const numObjetosVacios = 8;\r\n                        const arreglo2 = Array(numObjetosVacios - nuevosDatos.length).fill({});\r\n                        const arregloCombinado = nuevosDatos.concat(arreglo2);\r\n                        const nuevosDatosClonados = arregloCombinado.map(obj => ({ ...obj }));\r\n                        gridApi.setGridOption('rowData', nuevosDatosClonados);\r\n                    } else {\r\n                        gridApi.setGridOption('rowData', nuevosDatos);\r\n                    }\r\n\r\n                    obtenerTarifaCosto();\r\n                    botonBoardingPass();\r\n                    activarRutas();\r\n                    actTotales();\r\n\r\n                    // CARGAR PASAJEROS\r\n                    let datosPax = await obtenerPax(params.data.cotizar_id);\r\n                    detallePax = datosPax.pasajeros;\r\n                    let paxDoc = datosPax.paxDoc;\r\n\r\n                    for (let i = 0; i < detallePax.length; i++) {\r\n                        nuevoPax();\r\n                    }\r\n\r\n\r\n                    // Agregar datos a Seccion Pax\r\n                    const formPax = document.querySelectorAll(`#formPasajeros .cont-pasajero`);\r\n                    if (formPax.length == detallePax.length) {\r\n                        formPax.forEach((ruta, indice) => {\r\n                            const paxId = detallePax[indice].pasajero_id;\r\n                            const paxName = detallePax[indice].nombre;\r\n\r\n                            // const inputPaxId = ruta.querySelector(`#pasajero_id${indice + 1}`);\r\n                            const inputPaxName = ruta.querySelector(`#paxName${indice + 1}`);\r\n\r\n                            // inputPaxId.value = paxId;\r\n                            inputPaxName.value = paxName;\r\n                            inputPaxName.dataset.pax = paxId;\r\n\r\n                            if (paxDoc) {\r\n                                const documentos = obtenerDocumentosPorPaxId(paxId);\r\n\r\n                                // Obtener el contenedor de documentos\r\n                                const contenedorDocs = ruta.querySelector('.contenedor-docs');\r\n\r\n                                // Crear enlaces y agregarlos al DOM\r\n                                documentos.forEach(doc => {\r\n\r\n                                    const enlace = document.createElement('a');\r\n                                    enlace.classList.add('thumbnail');\r\n                                    enlace.href = `/${doc.ruta}/${doc.hash_doc}.${doc.tipo_doc}`;\r\n                                    enlace.setAttribute('target', '_blank'); // Abre el enlace en una nueva pestaña\r\n\r\n                                    const divIcon = document.createElement('DIV');\r\n                                    divIcon.classList.add('fileicon');\r\n\r\n                                    const icon = document.createElement('I');\r\n                                    icon.classList.add('fa-regular', 'fa-file');\r\n\r\n                                    const divName = document.createElement('DIV');\r\n                                    divName.classList.add('filename');\r\n\r\n                                    const name = document.createElement('P');\r\n                                    name.textContent = `${doc.nombre_doc}`;\r\n\r\n                                    divIcon.appendChild(icon);\r\n                                    divName.appendChild(name);\r\n                                    enlace.appendChild(divIcon);\r\n                                    enlace.appendChild(divName);\r\n                                    contenedorDocs.appendChild(enlace);\r\n                                });\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    // Función para contar documentos y crear enlaces por paxId\r\n                    function obtenerDocumentosPorPaxId(paxId) {\r\n                        if (paxDoc[paxId]) {\r\n                            if (Array.isArray(paxDoc[paxId])) {\r\n                                return paxDoc[paxId];\r\n                            } else {\r\n                                return [paxDoc[paxId]]; // Si no es un arreglo, convertirlo en un arreglo con un solo elemento\r\n                            }\r\n                        } else {\r\n                            return []; // No hay documentos para el pasajero dado\r\n                        }\r\n                    }\r\n\r\n                    await ordenarPorCategoria();\r\n\r\n                    $(\".costeo-relacion\").show();\r\n\r\n                });\r\n\r\n                const actionContainer = document.createElement('div');\r\n                actionContainer.classList = \"btn-cont centrado\";\r\n                actionContainer.appendChild(editButton);\r\n                $('.pasajeros').prop('disabled', false);\r\n\r\n                return actionContainer;\r\n            }\r\n        }\r\n    ];\r\n\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid');\r\n    obtenerServicios();\r\n}\r\nasync function configTablaCrear() {\r\n    mostrarClienteEmpresa();\r\n\r\n    let aeropuerto = await obtenerAeropuertos();\r\n    let categoria = await obtenerCategorias();\r\n    let producto = await obtenerProductos();\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'Id',\r\n            field: 'servicio_detalle_id',\r\n            width: 60\r\n        },\r\n        {\r\n            headerName: \"\",\r\n            headerGroupComponent: CustomHeaderGroup,\r\n\r\n            children: [\r\n                {\r\n                    headerName: 'Fecha',\r\n                    field: \"fecha_salida\",\r\n                    width: 100,\r\n                    cellEditor: 'agDateCellEditor',\r\n                    editable: true,\r\n                    valueFormatter: function (params) {\r\n                        let fecha = params.value;\r\n                        if (fecha) {\r\n                            return formatearFecha(fecha);\r\n                        }\r\n                        return null;\r\n                    },\r\n                    cellClassRules: {\r\n                        'event-none': params => {\r\n                            // Verificar si servicio_detalle_id tiene un valor\r\n                            const cotDetIdValue = params.data.servicio_detalle_id;\r\n                            // return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                        }\r\n                    },\r\n\r\n                },\r\n                {\r\n                    headerName: 'Hora',\r\n                    field: \"hora_salida\",\r\n                    width: 120,\r\n                    editable: true,\r\n                    columnGroupShow: \"open\",\r\n                    valueFormatter: function (params) {\r\n\r\n                        if (params.value !== null && params.value !== undefined) {\r\n                            const hora = params.value;\r\n                            let horas = 0;\r\n                            let minutos = 0;\r\n                            if (hora) {\r\n                                if (hora.includes(':')) {\r\n                                    const partes = hora.split(':');\r\n\r\n                                    horas = partes[0];\r\n                                    minutos = partes[1];\r\n                                } else {\r\n                                    horas = hora;\r\n                                }\r\n                            } else {\r\n                                horas = hora;\r\n                            }\r\n                            // Convertir el valor numérico a horas y minutos\r\n                            const hrsNum = parseFloat(horas);\r\n                            const minNum = parseFloat(minutos);\r\n\r\n                            const horaFormateada = `${hrsNum.toString().padStart(2, '0')}:${minNum.toString().padStart(2, '0')}`;\r\n                            const horaRegex = /^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$/;\r\n\r\n                            if (horaRegex.test(horaFormateada)) {\r\n                                return horaFormateada; // Devolver la hora formateada si es válida\r\n                            } else {\r\n                                return '00:00'; // Devolver un valor por defecto si el formato no es válido\r\n                            }\r\n                        }\r\n\r\n                        return null;\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            headerName: 'Cat',\r\n            field: 'categoria',\r\n            width: 80,\r\n            cellEditor: 'agSelectCellEditor',\r\n            editable: false,\r\n            cellEditorParams: {\r\n                values: ['', ...categoria.map(a => ({ categoria_id: a.categoria_id, nombre: a.nombre }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    return params.value.nombre;\r\n                }\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.categoria ? params.data.categoria.nombre : '';\r\n            },\r\n            valueSetter: function (params) {\r\n                params.data.categoria = params.newValue;\r\n                return true;\r\n            },\r\n            cellClassRules: {\r\n                'event-none': params => {\r\n                    // Verificar si servicio_detalle_id tiene un valor\r\n                    const cotDetIdValue = params.data.servicio_detalle_id;\r\n                    return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Concepto',\r\n            field: 'concepto',\r\n            width: 160,\r\n            editable: false,\r\n        },\r\n        {\r\n            headerName: 'Origen',\r\n            field: 'origen',\r\n            width: 120,\r\n            editable: false,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['', ...aeropuerto.map(a => ({ aeropuerto_id: a.aeropuerto_id, municipio: a.municipio }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    return params.value.municipio;\r\n                }\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.origen ? params.data.origen.municipio : '' // Debe devolver el objeto seleccionado\r\n            },\r\n            valueSetter: function (params) {\r\n                params.data.origen = params.newValue;\r\n                return true;\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Destino',\r\n            field: 'destino',\r\n            width: 120,\r\n            editable: false,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['', ...aeropuerto.map(a => ({ aeropuerto_id: a.aeropuerto_id, municipio: a.municipio }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) return params.value.municipio;\r\n            },\r\n            valueParser: function (params) {\r\n                if (params.value) return { aeropuerto_id: params.value.aeropuerto_id, municipio: params.value.municipio };\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.destino ? params.data.destino.municipio : '' // Debe devolver el objeto seleccionado\r\n            },\r\n            cellClassRules: {\r\n                'event-none': params => {\r\n                    // Verificar si servicio_detalle_id tiene un valor\r\n                    const cotDetIdValue = params.data.servicio_detalle_id;\r\n                    return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Pax',\r\n            field: 'pasajeros',\r\n            width: 60,\r\n            editable: true,\r\n            cellEditor: 'agNumberCellEditor',\r\n            valueParser: function (params) {\r\n                // Convertir la entrada en un número entero\r\n                return parseFloat(params.newValue) || null;\r\n            },\r\n            valueFormatter: function (params) {\r\n                // Formatear el número como entero\r\n                if (params.value !== null && params.value !== undefined) {\r\n                    return Math.round(params.value);\r\n                }\r\n                return null;\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Tipo',\r\n            field: 'tipo_vuelo',\r\n            width: 80,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['N', 'I'], // Valores disponibles en el select: 'I' para Internacional y 'N' para Nacional\r\n            },\r\n            valueFormatter: function (params) {\r\n                const tipoVuelo = params.value;\r\n\r\n                // Mapear el valor 'I' a 'Internacional' y 'N' a 'Nacional'\r\n                if (tipoVuelo === 'I') {\r\n                    return 'Internacional';\r\n                } else if (tipoVuelo === 'N') {\r\n                    return 'Nacional';\r\n                }\r\n\r\n                // Retornar el valor original si no coincide con 'I' o 'N'\r\n                return tipoVuelo;\r\n            },\r\n            editable: false,\r\n        },\r\n        {\r\n            headerName: \"\",\r\n            headerGroupComponent: CustomHeaderGroup,\r\n            children: [\r\n                {\r\n                    headerName: 'Cant',\r\n                    field: 'cantidad',\r\n                    width: 80,\r\n                    cellEditor: 'agNumberCellEditor',\r\n                    editable: true,\r\n                    valueParser: function (params) {\r\n                        // Convertir la entrada en un número entero\r\n                        return parseFloat(params.newValue) || null;\r\n                    },\r\n                    valueFormatter: function (params) {\r\n                        // Formatear el número como entero\r\n                        if (typeof params.value === 'number' && !isNaN(params.value)) {\r\n                            // Formatear el número como un decimal con un dígito después del punto decimal\r\n                            return params.value.toFixed(1);\r\n                        }\r\n                        return null;\r\n                    }\r\n                },\r\n                {\r\n                    headerName: 'Pernocta Costo',\r\n                    field: 'percost',\r\n                    width: 80,\r\n                    cellEditor: 'agNumberCellEditor',\r\n                    editable: true,\r\n                    columnGroupShow: \"open\",\r\n                    valueParser: function (params) {\r\n                        if (params.newValue == '0') {\r\n                            return 0.5\r\n                        }\r\n                        // Convertir la entrada en un número entero\r\n                        return parseFloat(params.newValue) || null;\r\n                    },\r\n                    valueFormatter: function (params) {\r\n                        // Formatear el número como entero\r\n                        if (typeof params.value === 'number' && !isNaN(params.value)) {\r\n                            // Formatear el número como un decimal con un dígito después del punto decimal\r\n                            return params.value.toFixed(1);\r\n                        }\r\n                        return null;\r\n                    }\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            headerName: 'Tarifa',\r\n            field: 'tarifa',\r\n            width: 100,\r\n            editable: true,\r\n            cellEditor: 'agNumberCellEditor',\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    // Formatea el número con comas como separadores de miles y dos decimales\r\n                    return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                }\r\n            },\r\n            valueSetter: function (params) {\r\n                // Asegura que el valor se guarda como una cadena\r\n                if (params.newValue) {\r\n                    params.data.tarifa = params.newValue.toString();\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Subtotal',\r\n            field: 'subtotal',\r\n            width: 100,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    // Formatea el número con comas como separadores de miles y dos decimales\r\n                    return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                }\r\n            },\r\n            valueSetter: function (params) {\r\n                // Asegura que el valor se guarda como una cadena\r\n                if (params.newValue) {\r\n                    params.data.subtotal = params.newValue.toString();\r\n                    return true;\r\n                } else {\r\n                    return false;\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Relacion Ruta',\r\n            field: 'rel_ruta',\r\n            width: 80,\r\n            // hide: true,\r\n        },\r\n        {\r\n            headerName: 'Relacion',\r\n            field: 'relaciones_id',\r\n            width: 80,\r\n            // hide: true,\r\n        },\r\n        {\r\n            headerName: 'LineID',\r\n            field: 'line_id',\r\n            width: 80,\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            width: 90,\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false,\r\n            cellRenderer: function (params) {\r\n                // Que el estatus sea Cotizado \r\n                const estatus = $(\"#estatus\").val();\r\n                if (estatus == 'SVC' && (params.data.categoria && params.data.categoria.nombre)) {\r\n\r\n                    const editButton = document.createElement('I');\r\n                    editButton.className = \"fa-regular fa-trash-can btn btn-eliminar\";\r\n                    editButton.title = 'Eliminar';\r\n\r\n                    editButton.addEventListener('click', async function () {\r\n\r\n                        if (Object.keys(params.data).length == 0) return;\r\n\r\n                        const lineId = params.data.servicio_detalle_id\r\n                        const rowNode = params.node;\r\n\r\n                        if (lineId) {\r\n                            await validarDetEliminar(lineId, rowNode);\r\n                            actTotales();\r\n                            actualizarCotizacion();\r\n                        } else {\r\n                            limpiarCelda(rowNode);\r\n                            actTotales();\r\n                        }\r\n\r\n                    });\r\n\r\n                    const actionContainer = document.createElement('div');\r\n                    actionContainer.classList = \"btn-cont centrado\";\r\n                    actionContainer.appendChild(editButton);\r\n\r\n                    return actionContainer;\r\n                }\r\n\r\n\r\n            }\r\n        }\r\n    ];\r\n\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid2');\r\n\r\n    // Establece los asientos para la aronave\r\n    establecerAsientos();\r\n\r\n    // OnChange\r\n    gridApi.addEventListener('cellValueChanged', async function (e) {\r\n        const columnName = e.column.colId;\r\n        const rowData = e.node.data;\r\n        const rowIndex = e.rowIndex;\r\n\r\n        let origenVal = rowData.origen ? rowData.origen.aeropuerto_id : '';\r\n        let destinoVal = rowData.destino ? rowData.destino.aeropuerto_id : '';\r\n\r\n        if (columnName == 'origen' || columnName == 'destino') {\r\n\r\n            if (origenVal && destinoVal) {\r\n                let valida = await validaRutaTarifa(origenVal, destinoVal);\r\n                if (valida.exito == '0') {\r\n                    SwalToast('warning', valida.alertas.error[0], 2500);\r\n                    let rowNode = gridApi.getRowNode(rowIndex);\r\n                    if (rowNode && rowNode.data) {\r\n                        Object.keys(rowNode.data).forEach(key => {\r\n                            rowNode.setDataValue(key, null);\r\n                        });\r\n                    }\r\n                } else {\r\n                    $('#costo_id').val(valida.tarifa.costo_id);\r\n                    if (valida.ruta.tipo_vuelo == 'N') {\r\n                        rowData.tarifa = valida.tarifa.costo_mx;\r\n                    } else if (valida.ruta.tipo_vuelo == 'I') {\r\n                        rowData.tarifa = valida.tarifa.costo_usd;\r\n                    }\r\n                    rowData.tipo_vuelo = valida.ruta.tipo_vuelo;\r\n                    rowData.relaciones_id = valida.ruta.ruta_id;\r\n                    rowData.rel_ruta = valida.ruta.ruta_id;\r\n                    rowData.hora_salida = '00:00';\r\n                    rowData.cantidad = '1';\r\n\r\n                    let categoria = rowData.categoria;\r\n                    let cod = '';\r\n\r\n                    if (categoria.nombre == 'Ruta') {\r\n                        cod = await obtenerCodigosIATA(origenVal, destinoVal);\r\n                        rowData.concepto = cod;\r\n                    }\r\n\r\n                    let newLineID = await consecutivoLineID();\r\n                    rowData.line_id = newLineID;\r\n\r\n                    //     gridApi.applyTransaction({ update: [rowData] });\r\n                    await generarPernoctas();\r\n                    await generarAterrizajes();\r\n                    await generarTUA();\r\n                    await ordenarPorCategoria();\r\n                    // gridApi.applyTransaction({ update: [rowData] });\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        if (columnName == 'fecha_salida') {\r\n            if (origenVal && destinoVal) {\r\n                await generarPernoctas();\r\n                await ordenarPorCategoria();\r\n            }\r\n        }\r\n\r\n        // Calcular PAX\r\n        if (columnName == 'pasajeros') {\r\n            const value = e.newValue;\r\n            const oldValue = e.oldValue; // Guardar el valor anterior\r\n\r\n            if (value > PASAJEROS) {\r\n                rowData.pasajeros = PASAJEROS;\r\n                gridApi.applyTransaction({ update: [rowData] });\r\n            }\r\n\r\n            if (rowData.origen && rowData.destino) {\r\n                // Verificar si hay suficientes TUAS para el número de pasajeros\r\n                const rutasData = [];\r\n                gridApi.forEachNode(node => {\r\n                    const rowData = node.data;\r\n                    if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n                        rutasData.push(rowData);\r\n                    }\r\n                });\r\n\r\n                // if (rutasData.length > 0) {\r\n                //     const aeropuertos = await obtenerAeropuertos();\r\n                //     for (let i = 0; i < rutasData.length; i++) {\r\n                //         const ruta = rutasData[i];\r\n                //         const origen = ruta.origen.aeropuerto_id;\r\n                //         // const pax = ruta.pasajeros;\r\n\r\n                //         // Contar TUAS existentes para este origen\r\n                //         let existingTuasCount = 0;\r\n                //         gridApi.forEachNode(node => {\r\n                //             if (node.data.categoria && node.data.categoria.nombre === 'Tua' && node.data.relaciones_id === origen) {\r\n                //                 existingTuasCount++;\r\n                //             }\r\n                //         });\r\n\r\n                //         // Verificar si hay suficientes TUAS para el número de pasajeros\r\n                //         if (value <= existingTuasCount) {\r\n                //             rowData.pasajeros = oldValue;\r\n                //             gridApi.applyTransaction({ update: [rowData] });\r\n                //             SwalToast('warning', 'El número de TUAS existentes es suficiente', 2500);\r\n                //             return; // Detener la ejecución de la función\r\n                //         }\r\n                //     }\r\n                // }\r\n\r\n                // Si se supera la validación de los pasajeros, generar TUAS y ordenar por categoría\r\n                await generarTUA();\r\n                await ordenarPorCategoria();\r\n            }\r\n        }\r\n\r\n        // Calcular totales\r\n        if ((e.oldValue != e.newValue) && (rowData.categoria) && (rowData.percost || rowData.categoria || rowData.tarifa)) {\r\n            actTotalesLine(rowData);\r\n            actTotales();\r\n        }\r\n\r\n    });\r\n\r\n    gridApi.addEventListener('cellDoubleClicked', async function (e) {\r\n        const columnName = e.column.colId;\r\n        const rowData = e.node.data;\r\n        const rowIndex = e.rowIndex;\r\n        const cellElement = e.event.target; // Elemento DOM de la celda clicada\r\n        const contLista = '#filtro'; // DIV para las busquedas\r\n        const contScroll = '.contenedor-altas'; // DIV donde obtendremos el Scroll\r\n\r\n        // Al cambiar de categoria\r\n        if (columnName == 'categoria') {\r\n            const nuevacategoria = categoria.map(objeto => {\r\n                return {\r\n                    id: objeto.categoria_id,\r\n                    nombre: objeto.nombre\r\n                };\r\n            });\r\n\r\n            let grid = await mostrarListaGrid(cellElement, nuevacategoria, contLista, contScroll);\r\n            let rowNode = gridApi.getRowNode(rowIndex);\r\n\r\n            if (rowData.categoria) {\r\n                limpiarCelda(rowNode);\r\n            }\r\n            rowNode = gridApi.getRowNode(rowIndex);\r\n            const valor = { categoria_id: grid.id, nombre: grid.nombre };\r\n            rowNode.setDataValue('categoria', valor);\r\n            gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n        }\r\n\r\n        // Mostrar concepto dependiendo de la ruta\r\n        if (columnName == 'concepto' && rowData.categoria) {\r\n\r\n            if (rowData.categoria.nombre == 'Producto') {\r\n\r\n                const nuevoProducto = producto.map(objeto => {\r\n                    return {\r\n                        id: objeto.producto_id,\r\n                        nombre: objeto.nombre\r\n                    };\r\n                });\r\n\r\n                let grid = await mostrarListaGrid(cellElement, nuevoProducto, contLista, contScroll);\r\n\r\n                let newLineID = await consecutivoLineID();\r\n\r\n                const rowNode = gridApi.getRowNode(rowIndex);\r\n                const prodFind = producto.find(item => item.producto_id === grid.id);\r\n                rowNode.setDataValue('concepto', grid.nombre);\r\n                rowNode.setDataValue('relaciones_id', grid.id);\r\n                rowNode.setDataValue('tarifa', prodFind.precio);\r\n                rowNode.setDataValue('cantidad', '1');\r\n                rowNode.setDataValue('line_id', newLineID);\r\n\r\n                gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n            }\r\n\r\n            if (rowData.categoria.nombre == 'Aterrizaje') {\r\n\r\n            }\r\n\r\n            if (rowData.categoria.nombre == 'Pernocta') {\r\n\r\n            }\r\n\r\n            if (rowData.categoria.nombre == 'Ruta') {\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // seleccionar si la cat = Ruta\r\n        if (columnName === 'origen' || columnName === 'destino') {\r\n            const nuevoAeropuerto = aeropuerto.map(objeto => {\r\n                return {\r\n                    id: objeto.aeropuerto_id,\r\n                    nombre: objeto.municipio,\r\n                };\r\n            });\r\n\r\n            if (rowData.categoria && rowData.categoria.nombre == 'Ruta' && !(rowData && rowData.servicio_detalle_id)) {\r\n                let grid = await mostrarListaGrid(cellElement, nuevoAeropuerto, contLista, contScroll);\r\n                const rowNode = gridApi.getRowNode(rowIndex);\r\n                const valor = { aeropuerto_id: grid.id, municipio: grid.nombre };\r\n\r\n                if (columnName === 'origen') {\r\n                    rowNode.setDataValue('origen', valor);\r\n                } else {\r\n                    rowNode.setDataValue('destino', valor);\r\n                }\r\n\r\n                gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n}\r\nfunction limpiarCelda(rowNode) {\r\n\r\n    // Obtén todas las columnas del grid\r\n    const allColumns = [];\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        allColumns.push(rowData);\r\n    });\r\n\r\n    // Crea un objeto vacío para almacenar los cambios\r\n    let updatedData = {};\r\n\r\n    // Itera sobre cada columna y establece el valor a null o ''\r\n    allColumns.forEach(column => {\r\n        const colId = column.colId;\r\n        // updatedData[colId] = null; // o '' si prefieres\r\n    });\r\n\r\n    // Actualiza los datos de la fila\r\n    rowNode.setData(updatedData);\r\n}\r\nfunction actTotalesLine(rowData) {\r\n\r\n    if (!rowData) return\r\n\r\n    const lineaAct = rowData.line_id;\r\n\r\n    gridApi.forEachNode(node => {\r\n        if (node.data.line_id === lineaAct && node.data.categoria) {\r\n\r\n            const categoria = node.data.categoria.nombre;\r\n            const pernocta = node.data.percost;\r\n            const cantidad = node.data.cantidad;\r\n            const tarifa = node.data.tarifa;\r\n            let subtotal = 0;\r\n\r\n            if (categoria == 'Ruta') {\r\n                subtotal = cantidad * tarifa;\r\n            } else if (categoria == 'Pernocta') {\r\n                subtotal = (cantidad * pernocta) * tarifa;\r\n            } else if (categoria == 'Aterrizaje') {\r\n                subtotal = tarifa;\r\n            } else if (categoria == 'Producto') {\r\n                subtotal = cantidad * tarifa;\r\n            }\r\n\r\n            // Actualizar el subtotal en el nodo de datos\r\n            node.setDataValue('subtotal', subtotal);\r\n        }\r\n        // Refrescar las celdas para mostrar los nuevos subtotales\r\n        gridApi.refreshCells({ force: true });\r\n    });\r\n\r\n\r\n    // const categoria = rowData.categoria.nombre;\r\n    // const cantidad = parseFloat(rowData.cantidad || 0);\r\n    // const tarifa = parseFloat(rowData.tarifa || 0);\r\n    // const pernocta = parseFloat(rowData.percost || 0.5);\r\n    // let subtotal = 0;\r\n\r\n    // if (categoria == 'Ruta') {\r\n    //     subtotal = cantidad * tarifa;\r\n    //     rowData.subtotal = subtotal;\r\n    // } else if (categoria == 'Pernocta') {\r\n    //     subtotal = (cantidad * pernocta) * tarifa;\r\n    //     rowData.subtotal = subtotal;\r\n    // } else if (categoria == 'Aterrizaje') {\r\n    //     subtotal = tarifa;\r\n    //     rowData.subtotal = subtotal;\r\n    // } else if (categoria == 'Producto') {\r\n    //     subtotal = cantidad * tarifa;\r\n    //     rowData.subtotal = subtotal;\r\n    // }\r\n\r\n    // gridApi.applyTransaction({ update: [rowData] });\r\n}\r\nfunction actTotales() {\r\n\r\n    // Actualizar Totales Generales\r\n    let cantPernoctas = 0;\r\n    let totPernoctas = 0;\r\n    let cantHoras = 0;\r\n    let totalHoras = 0;\r\n    let subtotalInpt = 0;\r\n\r\n    let subtNac = 0;\r\n    let subtInt = 0;\r\n    let ivaNac = 0;\r\n    let ivaInt = 0;\r\n\r\n    // Iterar sobre todas las filas de la tabla\r\n    gridApi.forEachNode(node => {\r\n        const hr_cant = parseFloat(node.data.cantidad || 0);\r\n        const subtotal = parseFloat(node.data.subtotal || 0);\r\n\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Pernocta') {\r\n            cantPernoctas += hr_cant;\r\n            totPernoctas += subtotal;\r\n        }\r\n\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Ruta') {\r\n            cantHoras += hr_cant;\r\n            totalHoras += subtotal;\r\n        }\r\n\r\n        subtotalInpt += subtotal;\r\n\r\n        if (node.data.tipo_vuelo == 'N') {\r\n            subtNac += subtotal;\r\n        } else if (node.data.tipo_vuelo == 'I') {\r\n            subtInt += subtotal;\r\n        }\r\n\r\n    });\r\n\r\n    ivaNac = subtNac * 0.16;\r\n    ivaInt = subtInt * 0.04;\r\n\r\n    // Actualizar el valor del input 'cant_hrs'\r\n    $('#cant_pernocta').val(cantPernoctas);\r\n    $('#tot_pernocta').val(totPernoctas);\r\n    $('#cant_hrs').val(cantHoras);\r\n    $('#tot_hrs').val(totalHoras);\r\n    $('#subtotal').val(subtotalInpt);\r\n    $('#ivaNac').val(ivaNac);\r\n    $('#ivaInt').val(ivaInt);\r\n    $('#total').val(subtotalInpt + ivaNac + ivaInt);\r\n}\r\nasync function ordenarPorCategoria() {\r\n    const allData = [];\r\n    const rutaRows = [];\r\n    const aterrizajeRows = [];\r\n    const pernoctaRows = [];\r\n    const otrasCategoriasRows = [];\r\n\r\n    // const categorias = obtenerCategorias();\r\n\r\n    // Iterar sobre todas las filas de datos en la tabla\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        allData.push(rowData);\r\n\r\n        // Clasificar las filas en diferentes arreglos segun la categoria\r\n        if (rowData.categoria) {\r\n            if (rowData.categoria.nombre == 'Ruta') {\r\n                rutaRows.push(rowData);\r\n            } else if (rowData.categoria && rowData.categoria.nombre == 'Pernocta') {\r\n                pernoctaRows.push(rowData);\r\n            } else if (rowData.categoria && rowData.categoria.nombre == 'Aterrizaje') {\r\n                aterrizajeRows.push(rowData);\r\n            } else {\r\n                // Cualquier otra categoría\r\n                otrasCategoriasRows.push(rowData);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Concatenar todas las filas en el nuevo orden deseado\r\n    let sortedRows = [...rutaRows, ...pernoctaRows, ...aterrizajeRows, ...otrasCategoriasRows];\r\n    sortedRows.push({});\r\n\r\n    if (sortedRows.length < 9) {\r\n        const numObjetosVacios = 8;\r\n        const arreglo2 = Array(numObjetosVacios - sortedRows.length).fill({});\r\n        const arregloCombinado = sortedRows.concat(arreglo2);\r\n        const nuevosDatosClonados = arregloCombinado.map(obj => ({ ...obj }));\r\n        gridApi.updateGridOptions({ rowData: nuevosDatosClonados })\r\n    } else {\r\n        gridApi.updateGridOptions({ rowData: sortedRows })\r\n    }\r\n\r\n}\r\nasync function generarPernoctas() {\r\n\r\n    const rowDataToRemove = [];\r\n    // Eliminar todas las pernoctas existentes, menos las que tengan id\r\n    gridApi.forEachNode(node => {\r\n        let cat = node.data.categoria;\r\n        let idLine = node.data.servicio_detalle_id;\r\n        if ((cat && node.data.categoria.nombre === 'Pernocta') && (!idLine)) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas identificadas como pernoctas\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const pernoctasMap = {}; // Mapa para rastrear pernoctas por 'relaciones_id'\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular las pernoctas\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Pernocta') {\r\n            pernoctasMap[rowData.rel_ruta] = rowData;\r\n        }\r\n    });\r\n\r\n    if (allData.length > 1) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de pernocta\r\n\r\n        let newLineID = await consecutivoLineID();\r\n\r\n        for (let i = 0; i < allData.length - 1; i++) {\r\n            // const fechaActual = new Date(allData[i].fecha_salida);\r\n            const fechaActual = formatearFecha(allData[i].fecha_salida);\r\n            const diaActual = obtenerDia(fechaActual);\r\n            let conceptoActual = allData[i].concepto;\r\n            conceptoActual = conceptoActual.substring(conceptoActual.lastIndexOf(' ') + 1);\r\n            const tarifaActual = allData[i].tarifa;\r\n            const relacionActual = allData[i].relaciones_id;\r\n            const lineID = allData[i].line_id;\r\n\r\n            const fechaSiguiente = formatearFecha(allData[i + 1].fecha_salida);\r\n            const daysDifference = calcularDiferenciaDias(fechaActual, fechaSiguiente);\r\n\r\n            if (daysDifference > 0) {\r\n                if (pernoctasMap[lineID]) {\r\n                    // Actualizar cantidad de 'daysDifference' en la pernocta existente\r\n                    pernoctasMap[relacionActual].concepto = `${conceptoActual} - Día: ${diaActual}`;\r\n                    pernoctasMap[relacionActual].cantidad = daysDifference;\r\n                    pernoctasMap[relacionActual].subtotal = (daysDifference * 0.5) * tarifaActual;\r\n                } else {\r\n\r\n                    // Crear nueva fila Pernocta\r\n                    const newRow = {\r\n                        servicio_detalle_id: '',\r\n                        fecha_salida: fechaActual,\r\n                        hora_salida: '0',\r\n                        categoria: { categoria_id: 2, nombre: 'Pernocta' },\r\n                        concepto: `${conceptoActual} - Día: ${diaActual}`,\r\n                        origen: '',\r\n                        destino: '',\r\n                        pasajeros: '',\r\n                        tipo_vuelo: '',\r\n                        cantidad: daysDifference,\r\n                        tarifa: tarifaActual,\r\n                        percost: '0.5',\r\n                        subtotal: (daysDifference * 0.5) * tarifaActual,\r\n                        // relaciones_id: relacionActual,\r\n                        rel_ruta: lineID,\r\n                        line_id: newLineID\r\n                    };\r\n                    newLineID++;\r\n                    rowsToAdd.push(newRow);\r\n                }\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        const rowsToUpdate = Object.values(pernoctasMap).filter(row => row.cantidad !== undefined);\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n\r\n    }\r\n\r\n}\r\nasync function generarAterrizajes() {\r\n\r\n    // Eliminar todas las tasas de aterrizaje en el grid\r\n    const rowDataToRemove = [];\r\n\r\n    gridApi.forEachNode(node => {\r\n        let cat = node.data.categoria;\r\n        let idLine = node.data.servicio_detalle_id;\r\n        if ((cat && node.data.categoria.nombre === 'Aterrizaje') && (!idLine)) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas indetificadas como Aterrizajes\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const aterrizajesMap = {}; // Mapa para rastrear Aterrizajes por 'relaciones_id'\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular Aterrizajes\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje') {\r\n            aterrizajesMap[rowData.rel_ruta] = rowData;\r\n        }\r\n    });\r\n\r\n    if (allData.length > 0) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de Aterrizaje\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        let newLineID = await consecutivoLineID();\r\n\r\n        for (i in allData) {\r\n            if (allData[i].destino) {\r\n                const destino = allData[i].destino.aeropuerto_id;\r\n                let concepto = allData[i].concepto;\r\n                concepto = concepto.substring(concepto.lastIndexOf(' ') + 1);\r\n                const relacion = allData[i].line_id;\r\n                const fechaActual = formatearFecha(allData[i].fecha_salida);\r\n\r\n                if (!aterrizajesMap[relacion]) {\r\n\r\n                    const valAterrizaje = await obtenerTasaAterrizaje(destino, aeronave);\r\n                    if (valAterrizaje.exito == 1) {\r\n                        const newRow = {\r\n                            servicio_detalle_id: '',\r\n                            fecha_salida: fechaActual,\r\n                            hora_salida: '0',\r\n                            categoria: { categoria_id: 3, nombre: 'Aterrizaje' },\r\n                            concepto: concepto,\r\n                            origen: '',\r\n                            destino: '',\r\n                            pax: '',\r\n                            tipo_vuelo: '',\r\n                            tarifa: valAterrizaje.aterrizaje.tarifa_aterrizaje,\r\n                            subtotal: valAterrizaje.aterrizaje.tarifa_aterrizaje,\r\n                            relaciones_id: valAterrizaje.aterrizaje.tasa_aterrizaje_id,\r\n                            rel_ruta: relacion,\r\n                            line_id: newLineID,\r\n                            cantidad: 1\r\n                        }\r\n                        newLineID++; // Incrementar el lineID para cada nueva fila\r\n                        rowsToAdd.push(newRow);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        const rowsToUpdate = Object.values(aterrizajesMap).filter(row => row.cantidad !== undefined);\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n\r\n    }\r\n\r\n}\r\nasync function generarTUA() {\r\n\r\n    const rowDataToRemove = [];\r\n\r\n    // Eliminar todas las Tuas existentes, menos las que tengan id\r\n    gridApi.forEachNode(node => {\r\n        let cat = node.data.categoria;\r\n        let idLine = node.data.servicio_detalle_id;\r\n        if ((cat && node.data.categoria.nombre === 'Tua') && (!idLine)) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas identificadas como Tuas\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const tuasMap = {}; // Mapa para rastrear TUAS por 'relaciones_id'\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular las TUAS\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Tua') {\r\n            tuasMap[rowData.rel_ruta] = rowData;\r\n        }\r\n    });\r\n\r\n    const tipoCambio = await obtenerTipoCambio();\r\n    if (!tipoCambio) return;\r\n\r\n    if (allData.length > 0) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de Tuas\r\n        const rowsToUpdate = []; // Aquí almacenaremos las filas de Tuas a actualizar\r\n        let newLineID = await consecutivoLineID();\r\n        const aeropuertos = await obtenerAeropuertos();\r\n\r\n        for (let i = 0; i < allData.length; i++) {\r\n            const origen = allData[i].origen.aeropuerto_id;\r\n            const pax = allData[i].pasajeros;\r\n            const ruta = allData[i];\r\n            const rel_ruta = ruta.line_id;\r\n            const concepto = ruta.concepto;\r\n            const fechaActual = formatearFecha(ruta.fecha_salida);\r\n\r\n            const aeropuertoFind = aeropuertos.find(objeto => objeto.aeropuerto_id == origen);\r\n\r\n            if (aeropuertoFind && aeropuertoFind['costo_tua']) {\r\n\r\n                const tarifa = parseFloat(aeropuertoFind['costo_tua']) / parseFloat(tipoCambio.tipo_cambio);\r\n                const subtotales = (parseFloat(aeropuertoFind['costo_tua']) / parseFloat(tipoCambio.tipo_cambio)) * pax;\r\n\r\n                if (tuasMap[rel_ruta]) {\r\n                    // Actualizar TUA existente\r\n                    tuasMap[rel_ruta].cantidad = pax;\r\n                    tuasMap[rel_ruta].tarifa = tarifa;\r\n                    tuasMap[rel_ruta].subtotal = subtotales;\r\n                    rowsToUpdate.push(tuasMap[rel_ruta]);\r\n                } else if (pax > 0) {\r\n                    // Crear nueva fila TUA\r\n                    const newRow = {\r\n                        servicio_detalle_id: '',\r\n                        fecha_salida: fechaActual,\r\n                        hora_salida: '0',\r\n                        categoria: { categoria_id: 5, nombre: 'Tua' },\r\n                        concepto: `${concepto}`,\r\n                        origen: '',\r\n                        destino: '',\r\n                        pax: '',\r\n                        tipo_vuelo: '',\r\n                        cantidad: pax,\r\n                        tarifa: tarifa,\r\n                        subtotal: subtotales,\r\n                        relaciones_id: aeropuertoFind['aeropuerto_id'],\r\n                        rel_ruta: rel_ruta,\r\n                        line_id: newLineID\r\n                    };\r\n                    newLineID++; // Incrementar el lineID para cada nueva fila\r\n                    rowsToAdd.push(newRow);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n    }\r\n\r\n}\r\n\r\n\r\n// FUNCIONES \r\nasync function mostrarContenedorAltas() {\r\n    await configTablaCrear();\r\n    $(\".contenedor-altas\").show();\r\n}\r\nfunction resetForm() {\r\n    resetearTabla('#myGrid2', '#searchInput1');\r\n    cerrarVentana('.contenedor-altas', ['#formAltas', '#formTotales']);\r\n    $('#inpCliente').hide();\r\n    $('#inpEmpresa').hide();\r\n    $('#inpGeneral').hide();\r\n\r\n    $('#aeronave_id').prop('disabled', false);\r\n    $('#slctOpcion').prop('disabled', false);\r\n    $('#cliente_id').prop('disabled', false);\r\n    $('#broker_id').prop('disabled', false);\r\n\r\n    // limpiar pax\r\n    const pax = document.querySelectorAll(`#formPasajeros .cont-pasajero`);\r\n    // Iterar sobre los elementos a partir del segundo elemento\r\n    for (let i = 0; i < pax.length; i++) {\r\n        pax[i].remove(); // Eliminar el elemento\r\n    }\r\n    $('#formRelRuta').empty();\r\n    PASAJEROS = '';\r\n    MAXPAX = 0;\r\n    limpiarForm(\"#formAltas\");\r\n    obtenerServicios();\r\n}\r\nfunction mostrarClienteEmpresa() {\r\n\r\n    let opcionSeleccionada = $('#slctOpcion').val();\r\n\r\n    if (opcionSeleccionada == 1) {\r\n        $('#inpCliente').show();\r\n        $('#inpEmpresa').hide();\r\n        $(\"label[for='cliente_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='broker_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='broker_id'] option\").val(\"\");\r\n        $(\"select[id='broker_id'] option\").text(\"\");\r\n    } else if (opcionSeleccionada == 2) {\r\n        $('#inpCliente').hide();\r\n        $('#inpEmpresa').show();\r\n        // $(\"#rt-responsable\").val(\"\");\r\n        $(\"label[for='broker_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='cliente_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='cliente_id'] option\").val(\"\");\r\n        $(\"select[id='cliente_id'] option\").text(\"\");\r\n    }\r\n}\r\nfunction botonBoardingPass() {\r\n    $(\".btn-pass\").toggle(['SVC', 'CMP'].includes($('#estatus').val()));\r\n    $(\"#btnServicio\").toggle($('#estatus').val() === 'CTZ');\r\n}\r\nfunction mostrarClienteEmpresa() {\r\n\r\n    let opcionSeleccionada = $('#slctOpcion').val();\r\n\r\n    if (opcionSeleccionada == 1) {\r\n        $('#inpCliente').show();\r\n        $('#inpEmpresa').hide();\r\n        $(\"label[for='cliente_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='broker_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='broker_id'] option\").val(\"\");\r\n        $(\"select[id='broker_id'] option\").text(\"\");\r\n    } else if (opcionSeleccionada == 2) {\r\n        $('#inpCliente').hide();\r\n        $('#inpEmpresa').show();\r\n        // $(\"#rt-responsable\").val(\"\");\r\n        $(\"label[for='broker_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='cliente_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='cliente_id'] option\").val(\"\");\r\n        $(\"select[id='cliente_id'] option\").text(\"\");\r\n    }\r\n}\r\nfunction activarRutas() {\r\n    // Obtener los valores de los campos\r\n    let piloto = $('#piloto_id').val();\r\n    let estatus = $('#estatus').val();\r\n\r\n    if (estatus == 'SVC' && piloto) {\r\n        $(\"#myGrid2\").removeClass('event-none');\r\n        $(\"#formTotales\").removeClass('event-none');\r\n        $(\"#formPasajeros\").removeClass('event-none');\r\n    } else {\r\n        $(\"#myGrid2\").addClass('event-none');\r\n        $(\"#formTotales\").addClass('event-none');\r\n        $(\"#formPasajeros\").addClass('event-none');\r\n    }\r\n}\r\nasync function consecutivoLineID() {\r\n    // Obtiene todos los datos de la grid\r\n    const allRowData = [];\r\n    gridApi.forEachNode(node => allRowData.push(node.data));\r\n\r\n    // Encuentra el máximo valor de lineID\r\n    let maxLineID = 0;\r\n    allRowData.forEach(row => {\r\n        if (row.line_id && row.line_id > maxLineID) {\r\n            maxLineID = row.line_id;\r\n        }\r\n    });\r\n\r\n    // Incrementa el máximo valor en 1 o establece en 1 si no hay registros\r\n    const newLineID = maxLineID + 1 || 1;\r\n\r\n    return newLineID;\r\n}\r\nfunction nuevoPax() {\r\n    const formPasajeros = document.getElementById('formPasajeros');\r\n    const btnPasajero = document.getElementById('btnPasajero');\r\n    let contadorPasajeros = formPasajeros.querySelectorAll('.cont-pasajero').length + 1;\r\n\r\n    // Crear nuevo div para el nuevo pasajero\r\n    const nuevoPasajeroDiv = document.createElement('DIV');\r\n    nuevoPasajeroDiv.classList.add('cont-form3', 'cont-pasajero');\r\n\r\n    // Crear div contenedor para el grupo de entrada de texto\r\n    const divInputGroupText = document.createElement('DIV');\r\n    divInputGroupText.classList.add('form-group');\r\n\r\n    // Crear input para el id del pasajero\r\n    const idPaxInput = document.createElement('INPUT');\r\n    idPaxInput.type = 'text';\r\n    idPaxInput.id = 'pasajero_id' + contadorPasajeros;\r\n    idPaxInput.classList.add('hidden');\r\n    // divInputGroupText.appendChild(idPaxInput);\r\n\r\n    // Crear input para el nombre del pasajero\r\n    const nuevoNombreInput = document.createElement('INPUT');\r\n    nuevoNombreInput.type = 'text';\r\n    nuevoNombreInput.id = 'paxName' + contadorPasajeros;\r\n    // nuevoNombreInput.dataset.target = contadorPasajeros;\r\n    nuevoNombreInput.placeholder = '';\r\n    divInputGroupText.appendChild(nuevoNombreInput);\r\n\r\n    // Crear label para el nombre del pasajero\r\n    const nuevoNombreLabel = document.createElement('LABEL');\r\n    nuevoNombreLabel.textContent = 'Pasajero ' + contadorPasajeros + ':';\r\n    nuevoNombreLabel.htmlFor = 'paxName' + contadorPasajeros;\r\n    divInputGroupText.appendChild(nuevoNombreLabel);\r\n\r\n    // Agregar div de entrada de texto al div del pasajero\r\n    nuevoPasajeroDiv.appendChild(divInputGroupText);\r\n\r\n    // Crear div contenedor para el grupo de entrada de archivo\r\n    const divInputGroupFile = document.createElement('DIV');\r\n    divInputGroupFile.classList.add('form-group');\r\n\r\n    // Crear input de archivo para el pasajero\r\n    const nuevoArchivoInput = document.createElement('INPUT');\r\n    nuevoArchivoInput.type = 'file';\r\n    nuevoArchivoInput.name = 'paxFile' + contadorPasajeros;\r\n    nuevoArchivoInput.id = 'paxFile' + contadorPasajeros;\r\n    nuevoArchivoInput.accept = 'image/*';  // Esto permite solo archivos de imagen\r\n    divInputGroupFile.appendChild(nuevoArchivoInput);\r\n\r\n    // Crear input de eliminar para el pasajero\r\n    const nuevoEliminar = document.createElement('A');\r\n    nuevoEliminar.id = 'btnEliminarPax' + contadorPasajeros;\r\n    nuevoEliminar.classList.add('btn', 'btn-eliminarPax');\r\n    nuevoEliminar.title = 'Eliminar Pasajero';\r\n\r\n    // Crear Div Mostrar Docs\r\n    const divDocs = document.createElement('DIV');\r\n    divDocs.classList.add('contenedor-docs', 'flex');\r\n\r\n    divInputGroupFile.appendChild(nuevoEliminar);\r\n\r\n    // Agregar div de entrada de archivo al div del pasajero\r\n    nuevoPasajeroDiv.appendChild(divInputGroupFile);\r\n\r\n    // Insertar el nuevo pasajero antes del botón \"Agregar Pasajero\"\r\n    // formPasajeros.insertBefore(nuevoPasajeroDiv, btnPasajero);\r\n    formPasajeros.appendChild(nuevoPasajeroDiv);\r\n\r\n    // Agregar Div Docs\r\n    nuevoPasajeroDiv.appendChild(divDocs);\r\n\r\n    $(`#btnEliminarPax${contadorPasajeros}`).on(\"click\", async function () {\r\n        // id a eliminar \r\n        const cotizar_id = $('#cotizar_id').val();\r\n        // const pasajero_id = $(`#pasajero_id${contadorPasajeros}`).val();\r\n        const pasajero_id = $(this).closest('.cont-pasajero').find('input[id^=\"paxName\"]').data('pax');\r\n\r\n        if (cotizar_id && pasajero_id) await eliminarPasajero(cotizar_id, pasajero_id);\r\n\r\n        $(this).closest('.cont-pasajero').remove(); // Eliminar el div padre más cercano con la clase 'nuevaRuta'\r\n    });\r\n}\r\nasync function setPaxId(listSearch) {\r\n\r\n    let flagRepetido = 0;\r\n\r\n    // Antes de agregar el pasajero, validar si ya existe \r\n    let form = '#formPasajeros';\r\n    const contPasajeros = document.querySelectorAll(`${form} .cont-pasajero`);\r\n    contPasajeros.forEach((ruta, indice) => {\r\n        let inputElement = ruta.querySelector('input[id^=\"paxName\"]');\r\n        // const inputElement = ruta.querySelector('input[data-paxn]');\r\n        if (inputElement) {\r\n            let dataPaxnValue = inputElement.dataset.paxn || inputElement.dataset.pax;\r\n            if (dataPaxnValue == listSearch['pasajero_id']) flagRepetido = 1;\r\n        }\r\n    });\r\n\r\n    if (flagRepetido == 0) {\r\n\r\n        const pasajero_id = listSearch['pasajero_id'];\r\n\r\n        const docsPAx = await obtenerDocsbyPax(pasajero_id);\r\n\r\n        const formPasajeros = document.getElementById('formPasajeros');\r\n        const btnPasajero = document.getElementById('btnPasajero');\r\n        const slcPasajero = document.getElementById('pasajero_id');\r\n        let contadorPasajeros = formPasajeros.querySelectorAll('.cont-pasajero').length + 1;\r\n\r\n        // Crear nuevo div para el nuevo pasajero\r\n        const nuevoPasajeroDiv = document.createElement('DIV');\r\n        nuevoPasajeroDiv.classList.add('cont-form3', 'cont-pasajero');\r\n\r\n        // Crear div contenedor para el grupo de entrada de texto\r\n        const divInputGroupText = document.createElement('DIV');\r\n        divInputGroupText.classList.add('form-group');\r\n\r\n        // Crear input para el id del pasajero\r\n        const idPaxInput = document.createElement('INPUT');\r\n        idPaxInput.type = 'text';\r\n        idPaxInput.id = 'pasajero_id' + contadorPasajeros;\r\n        idPaxInput.classList.add('hidden');\r\n\r\n        // Crear input para el nombre del pasajero\r\n        const nuevoNombreInput = document.createElement('INPUT');\r\n        nuevoNombreInput.type = 'text';\r\n        nuevoNombreInput.id = 'paxName' + contadorPasajeros;\r\n        // nuevoNombreInput.dataset.target = contadorPasajeros;\r\n        nuevoNombreInput.placeholder = '';\r\n        nuevoNombreInput.value = listSearch['nombre'];\r\n        nuevoNombreInput.setAttribute('data-paxN', pasajero_id); // Añadir atributo data-pax con el ID del pasajero\r\n        divInputGroupText.appendChild(nuevoNombreInput);\r\n\r\n        // Crear label para el nombre del pasajero\r\n        const nuevoNombreLabel = document.createElement('LABEL');\r\n        nuevoNombreLabel.textContent = 'Pasajero ' + contadorPasajeros + ':';\r\n        nuevoNombreLabel.htmlFor = 'paxName' + contadorPasajeros;\r\n        divInputGroupText.appendChild(nuevoNombreLabel);\r\n\r\n        // Agregar div de entrada de texto al div del pasajero\r\n        nuevoPasajeroDiv.appendChild(divInputGroupText);\r\n\r\n        // Crear div contenedor para el grupo de entrada de archivo\r\n        const divInputGroupFile = document.createElement('DIV');\r\n        divInputGroupFile.classList.add('form-group');\r\n\r\n        // Crear input de archivo para el pasajero\r\n        const nuevoArchivoInput = document.createElement('INPUT');\r\n        nuevoArchivoInput.type = 'file';\r\n        nuevoArchivoInput.name = 'paxFile' + contadorPasajeros;\r\n        nuevoArchivoInput.id = 'paxFile' + contadorPasajeros;\r\n        nuevoArchivoInput.accept = 'image/*';  // Esto permite solo archivos de imagen\r\n        divInputGroupFile.appendChild(nuevoArchivoInput);\r\n\r\n        // Crear input de eliminar para el pasajero\r\n        const nuevoEliminar = document.createElement('A');\r\n        nuevoEliminar.id = 'btnEliminarPax' + contadorPasajeros;\r\n        nuevoEliminar.classList.add('btn', 'btn-eliminarPax');\r\n        nuevoEliminar.title = 'Eliminar Pasajero';\r\n\r\n        // Crear Div Mostrar Docs\r\n        const divDocs = document.createElement('DIV');\r\n        divDocs.classList.add('contenedor-docs', 'flex');\r\n\r\n        divInputGroupFile.appendChild(nuevoEliminar);\r\n\r\n        // Agregar div de entrada de archivo al div del pasajero\r\n        nuevoPasajeroDiv.appendChild(divInputGroupFile);\r\n\r\n        // Insertar el nuevo pasajero antes del botón \"Agregar Pasajero\"\r\n        // formPasajeros.insertBefore(nuevoPasajeroDiv, btnPasajero);\r\n        formPasajeros.appendChild(nuevoPasajeroDiv);\r\n\r\n        // Agregar Div Docs\r\n        nuevoPasajeroDiv.appendChild(divDocs);\r\n\r\n\r\n        // Si tiene Documentos agregarlos\r\n        if (docsPAx.length > 0) {\r\n            // let container = document.getElementsByClassName('contenedor-docs');\r\n            // container = container[0];\r\n\r\n            docsPAx.forEach(doc => {\r\n\r\n                const enlace = document.createElement('a');\r\n                enlace.classList.add('thumbnail');\r\n                enlace.href = `/${doc.ruta}/${doc.hash_doc}.${doc.tipo_doc}`;\r\n                enlace.setAttribute('target', '_blank'); // Abre el enlace en una nueva pestaña\r\n\r\n                const divIcon = document.createElement('DIV');\r\n                divIcon.classList.add('fileicon');\r\n\r\n                const icon = document.createElement('I');\r\n                icon.classList.add('fa-regular', 'fa-file');\r\n\r\n                const divName = document.createElement('DIV');\r\n                divName.classList.add('filename');\r\n\r\n                const name = document.createElement('P');\r\n                name.textContent = `${doc.nombre_doc}`;\r\n\r\n                divIcon.appendChild(icon);\r\n                divName.appendChild(name);\r\n                enlace.appendChild(divIcon);\r\n                enlace.appendChild(divName);\r\n                divDocs.appendChild(enlace);\r\n            });\r\n        }\r\n\r\n        $(`#btnEliminarPax${contadorPasajeros}`).on(\"click\", async function () {\r\n\r\n            // id a eliminar \r\n            const cotizar_id = $('#cotizar_id').val();\r\n            // const pasajero_id = $(`#pasajero_id${contadorPasajeros}`).val();\r\n            const pasajero_id = $(this).closest('.cont-pasajero').find('input[id^=\"paxName\"]').data('paxn');\r\n\r\n\r\n            $(this).closest('.cont-pasajero').remove(); // Eliminar el div padre más cercano con la clase 'nuevaRuta'\r\n        });\r\n\r\n    }\r\n\r\n}\r\nasync function relRutasPaxPld(toggleRelRuta, params) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n    // Obtener los pasajeros guardados por ruta y cotización\r\n    let detRutPax = await obtenerRutPaxCot($(\"#cotizar_id\").val());\r\n\r\n    // Agrupar los pasajeros por ruta\r\n    let pasajerosPorRuta = detRutPax.reduce((acc, pax) => {\r\n        if (!acc[pax.ruta_id]) {\r\n            acc[pax.ruta_id] = [];\r\n        }\r\n        acc[pax.ruta_id].push(pax);\r\n        return acc;\r\n    }, {});\r\n\r\n    // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n    let pasajerosSeleccionadosPorRuta = {};\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre == 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.classList.add(\"rel-ruta\");\r\n            // pRuta.setAttribute('data-id', nodo.data.servicio_detalle_id); // Asumiendo que nodo.data.id es el ID de la ruta\r\n            pRuta.setAttribute('data-id', nodo.data.line_id); // Asumiendo que nodo.data.id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            // selectPasajeros.name = `seleccion-${nodo.data.servicio_detalle_id}`;\r\n            selectPasajeros.name = `seleccion-${nodo.data.line_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = 'Agrega un pasajero'; // Texto vacío para la opción\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Seleccionar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n                let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                let idPasajero = $(`#${pasajeroElement.id}`).data('pax');\r\n                let option = document.createElement('option');\r\n                option.value = nombrePasajero; // Valor del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let pasajeroSeleccionado = selectPasajeros.value;\r\n                let idPasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].getAttribute('data-pax');\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    selectPasajeros.value = '';\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-pax al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                selectPasajeros.value = '';\r\n\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n\r\n            console.log(pasajerosPorRuta);\r\n\r\n            // Rellenar los datos si ya existen para esta ruta\r\n            if (pasajerosPorRuta[nodo.data.servicio_detalle_id]) {\r\n                pasajerosPorRuta[nodo.data.servicio_detalle_id].forEach(pax => {\r\n\r\n                    let pasajeroElemento = document.createElement('p');\r\n                    pasajeroElemento.textContent = `Pasajero: ${pax.nombre}`;\r\n                    pasajeroElemento.setAttribute('data-paxid', pax.pasajero_id); // Añadir atributo data-pax al elemento p\r\n\r\n                    // Insertar el elemento p antes del selectPasajeros\r\n                    pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                    // Marcar la opción como seleccionada en el select\r\n                    let optionToSelect = Array.from(selectPasajeros.options).find(option => option.getAttribute('data-pax') == pax.pasajero_id);\r\n                    if (optionToSelect) {\r\n                        optionToSelect.selected = true;\r\n                    }\r\n\r\n\r\n                    // Agregar el pasajero al registro de la ruta actual\r\n                    if (!pasajerosSeleccionadosPorRuta[nodo.data.servicio_detalle_id]) {\r\n                        pasajerosSeleccionadosPorRuta[nodo.data.servicio_detalle_id.toString()] = [];\r\n                    }\r\n                    pasajerosSeleccionadosPorRuta[nodo.data.servicio_detalle_id].push(pax.pasajero_id.toString());\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\nasync function relRutasPax(toggleRelRuta, params) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n    // Obtener los pasajeros guardados por ruta y cotización\r\n    let detRutPax = await obtenerRutPaxCot($(\"#cotizar_id\").val());\r\n\r\n    // Agrupar los pasajeros por ruta\r\n    let pasajerosPorRuta = detRutPax.reduce((acc, pax) => {\r\n        if (!acc[pax.ruta_id]) {\r\n            acc[pax.ruta_id] = [];\r\n        }\r\n        acc[pax.ruta_id].push(pax);\r\n        return acc;\r\n    }, {});\r\n\r\n    // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n    let pasajerosSeleccionadosPorRuta = {};\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre === 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.classList.add(\"rel-ruta\");\r\n            pRuta.setAttribute('data-id', nodo.data.line_id); // Asumiendo que nodo.data.line_id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            selectPasajeros.name = `seleccion-${nodo.data.line_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = 'Agrega un pasajero'; // Texto de la opción vacía\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Seleccionar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n                let nombrePasajero = pasajeroElement.value;\r\n                let idPasajero = pasajeroElement.getAttribute('data-pax');\r\n                let option = document.createElement('option');\r\n                option.value = idPasajero; // Usar el ID del pasajero como valor\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let idPasajeroSeleccionado = selectPasajeros.value;\r\n                let pasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].textContent;\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    selectPasajeros.value = '';\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-paxid al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                selectPasajeros.value = '';\r\n\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n\r\n            // Rellenar los datos si ya existen para esta ruta\r\n            if (pasajerosPorRuta[nodo.data.line_id]) {\r\n                pasajerosPorRuta[nodo.data.line_id].forEach(pax => {\r\n                    let pasajeroElemento = document.createElement('p');\r\n                    pasajeroElemento.textContent = `Pasajero: ${pax.nombre}`;\r\n                    pasajeroElemento.setAttribute('data-paxid', pax.pasajero_id); // Añadir atributo data-paxid al elemento p\r\n\r\n                    // Insertar el elemento p antes del selectPasajeros\r\n                    pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                    // Agregar el pasajero al registro de la ruta actual\r\n                    if (!pasajerosSeleccionadosPorRuta[nodo.data.line_id]) {\r\n                        pasajerosSeleccionadosPorRuta[nodo.data.line_id] = [];\r\n                    }\r\n                    pasajerosSeleccionadosPorRuta[nodo.data.line_id].push(pax.pasajero_id.toString());\r\n                });\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\nasync function obtenerRutPaxCot(id) {\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/rutPaxCot', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function validarGrid() {\r\n    let detalles = [];\r\n    try {\r\n        const nodes = [];\r\n        gridApi.forEachNode(node => nodes.push(node));\r\n\r\n        for (const node of nodes) {\r\n            // Obtener los datos de la fila\r\n            const relacion_id = node.data.relaciones_id;\r\n            const categoria = node.data.categoria;\r\n            const concepto = node.data.concepto;\r\n            const fecha = node.data.fecha_salida;\r\n            const tHoras = node.data.cantidad;\r\n\r\n            // Copiar la fila y modificar el valor de origen\r\n            let filaModificada = {};\r\n            // Verificar si la fila tiene relacion_id\r\n            if (relacion_id) {\r\n\r\n                filaModificada = { ...node.data }; // Crear una copia de la fila\r\n\r\n\r\n                // Ajustar 'Categoria' para contener solo el ID\r\n                if (filaModificada.categoria && filaModificada.categoria.categoria_id !== undefined) {\r\n                    filaModificada.categoria = filaModificada.categoria.categoria_id;\r\n                }\r\n\r\n                if (categoria && categoria.nombre == 'Ruta') {\r\n                    // Validar que tengan fecha obligatoriamente\r\n                    if (fecha == undefined) {\r\n                        throw SwalToast('warning', 'Fecha Obligatoria', 2500);\r\n                    }\r\n\r\n                    if (tHoras == undefined) {\r\n                        throw SwalToast('warning', 'Horas Obligatorias', 2500);\r\n                    }\r\n\r\n                    // Formatear la fecha a 'año-mes-día' (YYYY-MM-DD)\r\n                    // const formattedFecha = new Date(fecha).toISOString().split('T')[0];\r\n                    const formattedFecha = formatearFechaYear(fecha);\r\n\r\n                    // Asignar el valor de 'aeropuerto_id' de 'origen' a 'origen'\r\n                    if (filaModificada.origen && filaModificada.origen.aeropuerto_id !== undefined) {\r\n                        filaModificada.origen = filaModificada.origen.aeropuerto_id;\r\n                    }\r\n\r\n                    // Ajustar 'destino' para contener solo 'aeropuerto_id'\r\n                    if (filaModificada.destino && filaModificada.destino.aeropuerto_id !== undefined) {\r\n                        filaModificada.destino = filaModificada.destino.aeropuerto_id;\r\n                    }\r\n\r\n                    // Ajustar la Hora\r\n                    const horaFormat = await formatoHora(filaModificada.hora_salida);\r\n\r\n\r\n                    filaModificada.hora_salida = horaFormat;\r\n                    filaModificada.fecha_salida = formattedFecha;\r\n                }\r\n\r\n                // Agregar la fila modificada al arreglo detalles\r\n                detalles.push(filaModificada);\r\n            } else if (categoria && categoria.nombre == 'Pernocta') {\r\n                if (concepto == undefined) {\r\n                    throw SwalToast('warning', 'Concepto Obligatorio para Pernocta', 2500);\r\n                }\r\n                filaModificada = { ...node.data }; // Crear una copia de la fila\r\n\r\n                // Ajustar 'Categoria' para contener solo el ID\r\n                if (filaModificada.categoria && filaModificada.categoria.categoria_id !== undefined) {\r\n                    filaModificada.categoria = filaModificada.categoria.categoria_id;\r\n                }\r\n                detalles.push(filaModificada);\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        return detalles = '';\r\n    }\r\n\r\n    return detalles;\r\n}\r\nasync function validarPasajeros() {\r\n\r\n    let form = '#formPasajeros';\r\n    const pasajerosDet = [];\r\n    const contPasajeros = document.querySelectorAll(`${form} .cont-pasajero`);\r\n\r\n    contPasajeros.forEach((ruta, indice) => {\r\n        let nombre = ruta.querySelector('input[id^=\"paxName\"]');\r\n        let nombre_ruta = ruta.querySelector('input[id^=\"paxFile\"]');\r\n\r\n        let paxActual = {};\r\n\r\n        if ((nombre && nombre.value.trim() !== '') || (nombre && nombre.dataset.paxn)) {\r\n            // Obtener el id de pasajero desde el data-target\r\n            let id_pax = nombre.dataset.pax || nombre.dataset.paxn;\r\n\r\n            if (id_pax) {\r\n                paxActual.pasajero_id = id_pax.trim();\r\n            }\r\n            if (nombre_ruta && nombre_ruta.files.length > 0) {\r\n                paxActual.nombre_ruta = nombre_ruta.files[0];\r\n            }\r\n            paxActual.nombre = nombre.value.trim();\r\n            pasajerosDet.push(paxActual);\r\n        }\r\n    });\r\n\r\n    return pasajerosDet;\r\n}\r\nasync function validarRutaPax() {\r\n\r\n    // Crear un array para almacenar todas las relaciones posibles\r\n    const relaciones = [];\r\n\r\n    // Obtener todos los elementos <p> dentro del formulario 'formRelRuta'\r\n    $('#formRelRuta').find('p[data-id]').each(function () {\r\n        const $pElemento = $(this);\r\n        const ruta_id = $pElemento.attr('data-id');\r\n\r\n        $(this).find('p[data-paxid]').each(function () {\r\n            const $pElemento = $(this);\r\n            const pasajero_id = $pElemento.attr('data-paxid');\r\n\r\n            if (ruta_id && pasajero_id) {\r\n                relaciones.push({ ruta_id, pasajero_id });\r\n            }\r\n        });\r\n    });\r\n\r\n    return relaciones;\r\n}\r\n\r\n// FETCH\r\nasync function obtenerServicios() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/servicios', {\r\n            method: 'GET',\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        let convert = verificarArray(data);\r\n        gridApi.setGridOption('rowData', convert);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener las cotizaciones', 2500);\r\n    }\r\n}\r\nasync function obtenerServDet(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('servicio_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/vuelosServ', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerAeropuertos() {\r\n    try {\r\n        const respuesta = await fetch('../allAeropuertos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Aeropuertos disponibles.', 2500);\r\n        } else {\r\n            AEROPUERTOS = data;\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerTarifaCosto() {\r\n\r\n    try {\r\n\r\n        const aeronave = $(\"#aeronave_id\").val();\r\n        const broker_id = $(\"#broker_id\").val();\r\n        const cliente_id = $(\"#cliente_id\").val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('aeronave', aeronave);\r\n        datos.append('broker_id', broker_id);\r\n        datos.append('cliente_id', cliente_id);\r\n\r\n        const respuesta = await fetch('../obtener/tarifacostos', {\r\n            method: 'post',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (data && data.tarifa) {\r\n            $(\"#costo_id\").val(data.tarifa.costo_id);\r\n        }\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerCategorias() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/categorias', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Categorias disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerProductos() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/productos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Productos disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerPilotos() {\r\n    try {\r\n        const respuesta = await fetch('pilotos/activos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Pilotos disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerPasajeros() {\r\n    try {\r\n\r\n        const respuesta = await fetch('../obtener/pasajeros', {\r\n            method: 'get',\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerCodigosIATA(origenVal, destinoVal) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('destino', destinoVal);\r\n\r\n        const respuesta = await fetch('../obtener/codigos', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerTasaAterrizaje(origenVal, aeronave) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('aeronave_id', aeronave);\r\n\r\n        const respuesta = await fetch('../valida/aterrizaje', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function obtenerDocsbyPax(id) {\r\n\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('pasajero_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/pasajerosDocs', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        // if (!data.length > 0) SwalToast('warning', 'No hay Documentos disponibles.', 2500);\r\n\r\n        return data\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function obtenerAeronaves() {\r\n    try {\r\n        const respuesta = await fetch('../allAeronaves', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) SwalToast('warning', 'No hay Aeronaves disponibles.', 2500);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerPax(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/pax', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function validaRutaTarifa(origenVal, destinoVal) {\r\n    try {\r\n        let cliente = $('#cliente_id').val();\r\n        let broker = $('#broker_id').val();\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('destino', destinoVal);\r\n        datos.append('cliente_id', cliente);\r\n        datos.append('broker_id', broker);\r\n        datos.append('aeronave_id', aeronave);\r\n\r\n        const respuesta = await fetch('../valida/ruta', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function establecerAsientos() {\r\n    let aeronaves = await obtenerAeronaves();\r\n    let aeronaveId = $('#aeronave_id').val();\r\n    const aeronaveEncontrada = aeronaves.find(objeto => objeto.aeronave_id == aeronaveId);\r\n    if (aeronaveEncontrada) PASAJEROS = aeronaveEncontrada.asientos;\r\n}\r\nasync function obtenerTipoCambio() {\r\n    try {\r\n        const respuesta = await fetch('../tipo/cambio', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data) {\r\n            SwalToast('warning', 'No hay Tipo de Cambio.', 2500);\r\n        } else {\r\n\r\n            // Agregar 1% arriba\r\n            let tipoCambio = data.tipo_cambio;\r\n            let porciento = tipoCambio * 0.01;\r\n            let cambioNuevo = parseFloat(tipoCambio) + parseFloat(porciento);\r\n\r\n            // console.log(tipoCambio);\r\n            // console.log(cambioNuevo);\r\n\r\n            $('#tipo_cambio option').val(data.tipo_cambio_id);\r\n            $('#tipo_cambio option').text(parseFloat(cambioNuevo).toFixed(2));\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function validarDetEliminar(lineId, rowNode) {\r\n\r\n    // Verificar si la fila tiene la categoría 'Ruta'\r\n    const categoriaRuta = rowNode.data.categoria.nombre === 'Ruta';\r\n\r\n    if (categoriaRuta) {\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        gridApi.forEachNode(async node => {\r\n            const rowData = node.data;\r\n            const rowNodeP = node;\r\n\r\n            // Buscar las filas con la categoría 'Pernocta' y el mismo ID de relaciones\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Pernocta' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.servicio_detalle_id)\r\n            }\r\n\r\n            // Buscar las filas con la categoría 'Tua' y el mismo ID de relaciones\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Tua' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.servicio_detalle_id)\r\n            }\r\n            // Buscar las filas con la categoria 'Aterrizaje'\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.servicio_detalle_id)\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    // Eliminamos el Registro clickeado\r\n    await eliminarDet(rowNode.data.servicio_detalle_id)\r\n    limpiarCelda(rowNode);\r\n}\r\n// ACCIONES\r\nasync function actualizarCotizacion() {\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        const servicio = $('#servicio_id').val();\r\n        const piloto = $('#piloto_id').val();\r\n        const folio = $('#folio').val();\r\n        const estatus = $('#estatus').val();\r\n        const fechaCot = $('#fecha-cot').val();\r\n        const aeronave_id = $('#aeronave_id').val();\r\n        if ($('#slctOpcion').val() == 1) {\r\n            const cliente_id = $('#cliente_id').val();\r\n            datos.append('cliente_id', cliente_id);\r\n        } else if ($('#slctOpcion').val() == 2) {\r\n            const broker_id = $('#broker_id').val();\r\n            datos.append('broker_id', broker_id);\r\n        }\r\n        const tipo_cambio = $('#tipo_cambio').val();\r\n        const cant_pernocta = $('#cant_pernocta').val();\r\n        const tot_pernocta = sinComa($('#tot_pernocta').val());\r\n        const tot_hrs = sinComa($('#tot_hrs').val());\r\n        const subtotal = sinComa($('#subtotal').val());\r\n        const ivaNac = sinComa($('#ivaNac').val());\r\n        const ivaInt = sinComa($('#ivaInt').val());\r\n        const total = sinComa($('#total').val());\r\n        const costo_id = $('#costo_id').val();\r\n        const comentarios = $('#rt-comment').val();\r\n\r\n        let tipo_de_viaje = 0;\r\n        let detalles = await validarGrid();\r\n        let pasajerosDet = await validarPasajeros();\r\n\r\n        if (detalles.length > 0) {\r\n            let dtO1 = detalles[0]['origen'];\r\n            let dtD1 = detalles[0]['destino'];\r\n            if (detalles.length == 1) {\r\n                tipo_de_viaje = 1;\r\n            } else if (detalles.length == 2) {\r\n                let dtO2 = detalles[1]['origen'];\r\n                let dtD2 = detalles[1]['destino'];\r\n                if (dtO1 == dtD2 && dtD1 == dtO2) {\r\n                    tipo_de_viaje = 2;\r\n                } else {\r\n                    tipo_de_viaje = 3;\r\n                }\r\n            } else {\r\n                tipo_de_viaje = 3;\r\n            }\r\n            datos.append('servicio_id', servicio);\r\n            datos.append('piloto_id', piloto);\r\n            datos.append('folio_cotizar', folio);\r\n            datos.append('aeronave_id', aeronave_id);\r\n            datos.append('fecha_creacion', fechaCot);\r\n            datos.append('estatus', estatus);\r\n            datos.append('tipo_cambio_id', tipo_cambio);\r\n            datos.append('cant_pernocta', cant_pernocta);\r\n            datos.append('tot_pernocta', tot_pernocta);\r\n            datos.append('tot_hr_cotizadas', tot_hrs);\r\n            datos.append('subtotal', subtotal);\r\n            datos.append('ivaNac', ivaNac);\r\n            datos.append('ivaInt', ivaInt);\r\n            datos.append('total', total);\r\n            datos.append('comentarios', comentarios);\r\n            datos.append('tipo_de_viaje', tipo_de_viaje);\r\n            datos.append('costo_id', costo_id);\r\n            datos.append('pasajerosDet', JSON.stringify(pasajerosDet));\r\n            datos.append('detalles', JSON.stringify(detalles));\r\n\r\n            // Agregar los archivos al FormData\r\n            pasajerosDet.forEach((pasajero, index) => {\r\n                if (pasajero && pasajero.nombre && pasajero.nombre_ruta) {\r\n                    let prefijo;\r\n                    if (pasajero.pasajero_id) {\r\n                        prefijo = pasajero.pasajero_id;\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    } else {\r\n                        // Obtener la primera letra de cada palabra en el nombre\r\n                        prefijo = pasajero.nombre.split(' ').map(word => word.charAt(0)).join('');\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const respuesta = await fetch('../actualizar/servicio', {\r\n                method: 'POST',\r\n                body: datos\r\n            });\r\n\r\n            const data = await respuesta.json();\r\n\r\n            if (data.exito == 1) {\r\n                SwalLoad('success', 'Éxito', 'Registro Actualizado Correctamente', false);\r\n                setTimeout(() => {\r\n                    swal.close();\r\n                    resetForm();\r\n                    obtenerServicios();\r\n                }, 1500);\r\n            } else if (data.exito == 0) {\r\n                SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n            }\r\n\r\n            if (data.alertas) {\r\n                SwalToast('warning', data.alertas.error, 2500);\r\n                return\r\n            }\r\n\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function actualizarRutaPax() {\r\n\r\n    try {\r\n        let relRutaPax = await validarRutaPax();\r\n        if (relRutaPax == '') return\r\n        const cotizar_id = $('#cotizar_id').val();\r\n        const csrfToken = document.querySelector('meta[name=\"csrf-token\"]').getAttribute('content');\r\n\r\n        const datos = new FormData();\r\n        datos.append('id_cot', cotizar_id);\r\n        datos.append('relRutaPax', JSON.stringify(relRutaPax));\r\n        datos.append('csrf_token', csrfToken);\r\n\r\n        const respuesta = await fetch('../actualizar/relacionRutaPax', {\r\n            method: 'POST',\r\n            body: datos,\r\n            headers: {\r\n                'X-CSRF-Token': csrfToken\r\n            }\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        console.log(data);\r\n\r\n        $('#formRelRuta').empty();\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function eliminarPasajero(cotizar_id, pasajero_id) {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', cotizar_id);\r\n        datos.append('pasajero_id', pasajero_id);\r\n\r\n        const respuesta = await fetch('../eliminar/pasajero', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            SwalToast('success', 'Registro Eliminado Correctamente', 2500);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n\r\n}\r\n\r\nasync function eliminarDet(id) {\r\n\r\n    try {\r\n        const servicio = $('#servicio_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('servicio_detalle_id', id);\r\n        datos.append('servicio_id', servicio);\r\n\r\n        const respuesta = await fetch('../eliminar/detServicio', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            // Registro Creado Exitosamente\r\n            // SwalToast('success', 'Registro Eliminado Correctamente', 2500);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n\r\n}\r\n\r\n//  CLASES\r\nclass CustomHeaderGroup {\r\n\r\n    init(params) {\r\n        this.params = params;\r\n        this.eGui = document.createElement('div');\r\n        this.eGui.className = 'ag-header-group-cell-label';\r\n        this.eGui.innerHTML = '' +\r\n            '<div class=\"customHeaderLabel\">' + this.params.displayName + '</div>' +\r\n            '<div class=\"customExpandButton\"><i class=\"fa fa-arrow-right\"></i></div>';\r\n\r\n        this.onExpandButtonClickedListener = this.expandOrCollapse.bind(this);\r\n        this.eExpandButton = this.eGui.querySelector(\".customExpandButton\");\r\n        this.eExpandButton.addEventListener('click', this.onExpandButtonClickedListener);\r\n\r\n        this.onExpandChangedListener = this.syncExpandButtons.bind(this);\r\n        this.params.columnGroup.getProvidedColumnGroup().addEventListener('expandedChanged', this.onExpandChangedListener);\r\n\r\n        this.syncExpandButtons();\r\n    }\r\n\r\n    getGui() {\r\n        return this.eGui;\r\n    }\r\n\r\n    expandOrCollapse() {\r\n        var currentState = this.params.columnGroup.getProvidedColumnGroup().isExpanded();\r\n        this.params.setExpanded(!currentState);\r\n    }\r\n\r\n    syncExpandButtons() {\r\n        function collapsed(toDeactivate) {\r\n            toDeactivate.className = toDeactivate.className.split(' ')[0] + ' collapsed';\r\n        }\r\n\r\n        function expanded(toActivate) {\r\n            toActivate.className = toActivate.className.split(' ')[0] + ' expanded';\r\n        }\r\n\r\n        if (this.params.columnGroup.getProvidedColumnGroup().isExpanded()) {\r\n            expanded(this.eExpandButton);\r\n        } else {\r\n            collapsed(this.eExpandButton);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.eExpandButton.removeEventListener('click', this.onExpandButtonClickedListener);\r\n    }\r\n}\r\n"]}