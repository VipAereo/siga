{"version":3,"sources":["costeonew.js"],"names":["gridOptions","PASAJEROS","asignarEventos","$","hide","addClass","aplicarMascaraCantidad","document","addEventListener","e","key","resetForm","getElementById","async","event","preventDefault","show","focus","data","obtenerAeronaves","listSearch","mostrarListaSearch","asientos","activarRutas","gridApi","updateGridOptions","rowData","mostrarClienteEmpresa","obtenerClientes","obtenerEmpresas","val","contacto_principal","title","querySelector","content","classList","contains","remove","add","titleRel","contentRel","empty","toggleRelRuta","relRutasPax","configurarBotones","click","mostrarContenedorAltas","obtenerTipoCambio","SwalToast","nuevoPax","validar","validateInputs","estatus","querySelectorAll","actualizarCotizacion","actualizarRutaPax","crearCotizacion","obtenerCotizacionPDF","generarServicio","inicializarPagina","iniciarTabla","headerName","field","width","cellStyle","textAlign","valueFormatter","params","Number","value","toFixed","replace","cellRenderer","editButton","createElement","className","Object","keys","length","prop","cotizar_id","folio_cotizar","formatearFecha","fecha_creacion","comentarios","aeronave_id","text","modeloAeronave","tipo_cambio_id","tipo_cambio","cliente_id","nombreCli","broker_id","nombreBrok","botonPdfCotizar","nuevosDatos","obtnerVuelosId","map","cot","baseObjeto","cot_det_id","fecha_salida","hora_salida","categoria","categoria_id","nombre","nombreCat","concepto","pasajeros","tipo_vuelo","cantidad","percost","tarifa","subtotal","rel_ruta","relaciones_id","relacion_id","line_id","origen","aeropuerto_id","origenId","municipio","origMun","destino","destinoId","destMun","console","log","arreglo2","Array","fill","nuevosDatosClonados","concat","obj","setGridOption","actTotales","detallePax","obtenerPax","i","formPax","forEach","ruta","indice","paxId","pasajero_id","paxName","inputPaxName","dataset","pax","ordenarPorCategoria","actionContainer","appendChild","headerClass","cellClass","filter","obtenerCotizaciones","configTablaCrear","aeropuerto","obtenerAeropuertos","obtenerCategorias","producto","obtenerProductos","columnDefs","headerGroupComponent","CustomHeaderGroup","children","cellEditor","editable","fecha","cellClassRules","event-none","columnGroupShow","undefined","hora","horas","minutos","includes","partes","split","hrsNum","parseFloat","minNum","horaFormateada","toString","padStart","test","cellEditorParams","values","a","valueGetter","valueSetter","newValue","cotDetIdValue","valueParser","Math","round","tipoVuelo","isNaN","lineId","rowNode","node","validarDetEliminar","limpiarCelda","establecerAsientos","columnName","column","colId","rowIndex","origenVal","destinoVal","valida","validaRutaTarifa","exito","alertas","error","getRowNode","setDataValue","costo_id","costo_mx","costo_usd","ruta_id","cod","obtenerCodigosIATA","newLineID","consecutivoLineID","applyTransaction","update","generarPernoctas","generarAterrizajes","generarTUA","oldValue","rutasData","forEachNode","push","existingTuasCount","actTotalesLine","cellElement","target","nuevacategoria","objeto","id","grid","mostrarListaGrid","valor","redrawRows","nuevoProducto","producto_id","prodFind","find","item","precio","nuevoAeropuerto","allColumns","setData","pernocta","cantPernoctas","totPernoctas","cantHoras","totalHoras","subtotalInpt","subtNac","subtInt","ivaNac","ivaInt","hr_cant","opcionSeleccionada","removeClass","aeronaveValue","clienteValue","brokerValue","allData","rutaRows","aterrizajeRows","pernoctaRows","otrasCategoriasRows","sortedRows","rowDataToRemove","pernoctasMap","rowsToAdd","fechaActual","Date","diaActual","getDate","conceptoActual","tarifaActual","relacionActual","lineID","timeDifference","getTime","daysDifference","floor","newRow","rowsToUpdate","row","aeronave","relacion","valAterrizaje","obtenerTasaAterrizaje","aterrizaje","tarifa_aterrizaje","tasa_aterrizaje_id","aeropuertos","rel","aeropuertoFind","tuasToAddCount","j","resetearTabla","cerrarVentana","MAXPAX","limpiarForm","setFechaActual","toggle","formPasajeros","btnPasajero","contadorPasajeros","nuevoPasajeroDiv","divInputGroupText","idPaxInput","type","nuevoNombreInput","placeholder","nuevoNombreLabel","textContent","htmlFor","divInputGroupFile","nuevoArchivoInput","name","accept","nuevoEliminar","insertBefore","on","this","closest","eliminarPasajero","datos","FormData","append","respuesta","fetch","method","body","json","SwalLoad","obtenerRutPaxCot","validarGrid","detalles","tHoras","filaModificada","formattedFecha","toISOString","validarPasajeros","pasajerosDet","nombre_ruta","paxActual","trim","id_pax","files","validarRutaPax","relaciones","each","attr","allRowData","maxLineID","relRutasPax2","nodo","pRuta","setAttribute","selectPasajeros","pasajerosElements","optionEmpty","disabled","selected","pasajeroElement","nombrePasajero","idPasajero","option","pasajerosSeleccionadosPorRuta","pasajeroSeleccionado","idPasajeroSeleccionado","options","selectedIndex","getAttribute","idRuta","pasajeroElemento","pasajerosPorRuta","reduce","acc","optionToSelect","from","convert","verificarArray","aeronaves","aeronaveId","aeronaveEncontrada","cliente","broker","AEROPUERTOS","EMPRESAS","headers","Accept","urlArchivo","window","open","rowNodeP","eliminarDet","fechaCot","cant_pernocta","tot_pernocta","sinComa","tot_hrs","total","tipo_de_viaje","dtO1","dtD1","dtO2","JSON","stringify","pasajero","index","prefijo","word","charAt","join","setTimeout","swal","close","errorSMS","folio","relRutaPax","cotizar","[object Object]","eGui","innerHTML","displayName","onExpandButtonClickedListener","expandOrCollapse","bind","eExpandButton","onExpandChangedListener","syncExpandButtons","columnGroup","getProvidedColumnGroup","currentState","isExpanded","setExpanded","toDeactivate","toActivate","removeEventListener"],"mappings":"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","file":"costeonew.js","sourcesContent":["let gridOptions;\r\nlet PASAJEROS = '';\r\n\r\n// Utilizando el Principio de Modularidad\r\n$(function () {\r\n    asignarEventos();\r\n    inicializarPagina();\r\n    configurarBotones();\r\n});\r\nfunction asignarEventos() {\r\n    $(\".contenedor-altas\").hide();\r\n    $(\".costeo-relacion\").hide();\r\n\r\n    $(\".btn-pdf\").hide();\r\n    $(\"#btnServicio\").hide();\r\n    $(\"#myGrid2\").addClass('event-none');\r\n\r\n    // Ocultar Listados\r\n    $('.aeroSearch').hide();\r\n    $('.emprSearch').hide();\r\n    $('.cliSearch').hide();\r\n\r\n    aplicarMascaraCantidad('subtotal', 'ivaNac', 'ivaInt', 'total', 'cant_pernocta', 'tot_pernocta', 'cant_hrs', 'tot_hrs');\r\n\r\n    // Esc Cerrar\r\n    document.addEventListener(\"keydown\", e => {\r\n        if (e.key === 'Escape') {\r\n            // Limpiar Ruta\r\n            resetForm();\r\n        }\r\n    });\r\n    // Lista Aeronaves\r\n    document.getElementById(\"aeronave_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.aeroSearch').show();\r\n        $('.inAeroSrch').focus();\r\n        let data = await obtenerAeronaves();\r\n        const listSearch = await mostrarListaSearch(data, '.aeroSearch', 'aeronave_id', 'modelo');\r\n        if (listSearch) {\r\n            PASAJEROS = listSearch.asientos;\r\n            activarRutas();\r\n            gridApi.updateGridOptions({ rowData: ['', '', '', '', '', '', '', ''] })\r\n        }\r\n    });\r\n    // Seleccion Cliente/Broker\r\n    document.getElementById(\"slctOpcion\").addEventListener(\"change\", async function (event) {\r\n        mostrarClienteEmpresa();\r\n    });\r\n    // Lista Clientes\r\n    document.getElementById(\"cliente_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.cliSearch').show();\r\n        $('.inCliSrch').focus();\r\n        let data = await obtenerClientes();\r\n        const listSearch = await mostrarListaSearch(data, '.cliSearch', 'cliente_id', 'nombre');\r\n        if (listSearch) {\r\n            activarRutas();\r\n            gridApi.updateGridOptions({ rowData: ['', '', '', '', '', '', '', ''] })\r\n        }\r\n    });\r\n    // Lista Broker\r\n    document.getElementById(\"broker_id\").addEventListener(\"mousedown\", async function (event) {\r\n        event.preventDefault();\r\n        $('.emprSearch').show();\r\n        $('.inEmprSrch').focus()\r\n        let data = await obtenerEmpresas();\r\n        const listSearch = await mostrarListaSearch(data, '.emprSearch', 'broker_id', 'nombre');\r\n        if (listSearch) {\r\n            activarRutas();\r\n            gridApi.updateGridOptions({ rowData: ['', '', '', '', '', '', '', ''] })\r\n        }\r\n        $('#rt-responsable').val(listSearch.contacto_principal);\r\n    });\r\n\r\n    // toggle\r\n    const title = document.querySelector(\".toggle-pax\");\r\n    const content = document.querySelector(\".toggle-pax-cont\");\r\n\r\n    title.addEventListener(\"click\", function () {\r\n        if (content.classList.contains(\"expanded\")) {\r\n            content.classList.remove(\"expanded\");\r\n            title.classList.remove(\"expanded\");\r\n        } else {\r\n            content.classList.add(\"expanded\");\r\n            title.classList.add(\"expanded\");\r\n        }\r\n    });\r\n\r\n    const titleRel = document.querySelector(\".toggle-relRuta\");\r\n    const contentRel = document.querySelector(\".toggle-relRuta-cont\");\r\n    titleRel.addEventListener(\"click\", async function () {\r\n        if (contentRel.classList.contains(\"expanded\")) {\r\n            contentRel.classList.remove(\"expanded\");\r\n            titleRel.classList.remove(\"expanded\");\r\n            $('#formRelRuta').empty();\r\n        } else {\r\n            contentRel.classList.add(\"expanded\");\r\n            titleRel.classList.add(\"expanded\");\r\n        }\r\n    });\r\n\r\n\r\n    const toggleRelRuta = document.querySelector('.toggle-relRuta');\r\n    toggleRelRuta.addEventListener('mousedown', async function () {\r\n        await relRutasPax(toggleRelRuta);\r\n    });\r\n\r\n}\r\nfunction configurarBotones() {\r\n\r\n    $(\"#crear-solCot\").click(mostrarContenedorAltas);\r\n\r\n    $(\"#btnCancel\").click(e => {\r\n        resetForm();\r\n    });\r\n\r\n    $(\"#actTipoCambio\").click(async e => {\r\n        let tipo = await obtenerTipoCambio();\r\n        if (tipo) SwalToast('success', 'Tipo de Cambio Actualizado.', 2500);\r\n    });\r\n\r\n    $(\"#btnPasajero\").click(e => {\r\n        nuevoPax();\r\n    });\r\n\r\n    $(\"#btnGuardar\").click(async e => {\r\n        const validar = validateInputs($('#formAltas'));\r\n        const estatus = $(\"#estatus\").val();\r\n        if ((validar) && (estatus == '' || estatus == 'PND' || estatus == 'CTZ')) {\r\n            // $('#cotizar_id').val() == '' ? crearCotizacion() : actualizarCotizacion();\r\n            if ($(\"#cotizar_id\").val()) {\r\n                // Obtener el formulario de pasajeros\r\n                let formPasajeros = document.getElementById('formPasajeros');\r\n                let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n                if (pasajerosElements) {\r\n                    await actualizarCotizacion();\r\n                    await actualizarRutaPax();\r\n                } else {\r\n                    await actualizarCotizacion();\r\n                }\r\n            } else {\r\n                await crearCotizacion();\r\n            }\r\n        }\r\n    });\r\n\r\n    $(\"#genera_pdf\").click(e => {\r\n        if ($('#cotizar_id').val()) obtenerCotizacionPDF();\r\n    });\r\n\r\n    $(\"#btnServicio\").click(e => {\r\n        if ($('#cotizar_id').val()) generarServicio();\r\n    });\r\n\r\n}\r\nfunction inicializarPagina() {\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'id',\r\n            field: 'cotizar_id',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Folio',\r\n            field: 'folio_cotizar',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Broker',\r\n            field: 'nombreBrok',\r\n            width: 110\r\n        },\r\n        {\r\n            headerName: 'Cliente',\r\n            field: 'nombreCli',\r\n            width: 110\r\n        },\r\n        {\r\n            headerName: 'Aeronave',\r\n            field: 'modeloAeronave',\r\n            width: 160\r\n        },\r\n        {\r\n            headerName: 'Ruta',\r\n            field: 'concepto',\r\n            width: 180\r\n        },\r\n        {\r\n            headerName: 'Fecha Salida',\r\n            field: 'fecha_salida',\r\n            width: 100\r\n        },\r\n        {\r\n            headerName: 'Total',\r\n            field: 'total',\r\n            width: 120,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            valueFormatter: function (params) {\r\n                // Formatea el número con comas como separadores de miles y dos decimales\r\n                return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Estatus',\r\n            field: 'estatus',\r\n            width: 80\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            cellRenderer: function (params) {\r\n                const editButton = document.createElement('I');\r\n                editButton.className = \"fa-regular fa-pen-to-square btn btn-editar\";\r\n                editButton.title = 'Ver o Editar';\r\n\r\n                // Datos a Editar\r\n                editButton.addEventListener('click', async function (e) {\r\n\r\n                    if (Object.keys(params.data).length == 0) return\r\n\r\n                    $('#aeronave_id').prop('disabled', true);\r\n                    $('#slctOpcion').prop('disabled', true);\r\n                    $('#cliente_id').prop('disabled', true);\r\n                    $('#broker_id').prop('disabled', true);\r\n\r\n                    // Establecer Datos\r\n                    $('#cotizar_id').val(params.data.cotizar_id);\r\n                    $('#folio').val(params.data.folio_cotizar);\r\n                    $('#fecha-cot').val(formatearFecha(params.data.fecha_creacion));\r\n                    $('#rt-comment').val(params.data.comentarios);\r\n                    $('#estatus').val(params.data.estatus);\r\n                    $('#aeronave_id option').val(params.data.aeronave_id);\r\n                    $('#aeronave_id option').text(params.data.modeloAeronave);\r\n                    $('#tipo_cambio option').val(params.data.tipo_cambio_id);\r\n                    $('#tipo_cambio option').text(Number(params.data.tipo_cambio).toFixed(2));\r\n\r\n                    await mostrarContenedorAltas();\r\n\r\n                    if (params.data.cliente_id) {\r\n                        $('#slctOpcion').val(1);\r\n                        mostrarClienteEmpresa();\r\n                        $(\"#cliente_id option\").val(params.data.cliente_id);\r\n                        $(\"#cliente_id option\").text(params.data.nombreCli);\r\n                    } else if (params.data.broker_id) {\r\n                        $('#slctOpcion').val(2);\r\n                        mostrarClienteEmpresa();\r\n                        $(\"#broker_id option\").val(params.data.broker_id);\r\n                        $(\"#broker_id option\").text(params.data.nombreBrok);\r\n                        $('#rt-responsable').val(params.data.contacto_principal);\r\n                    }\r\n\r\n                    // mostrar PDF\r\n                    botonPdfCotizar();\r\n\r\n                    let detalleRutas = await obtnerVuelosId(params.data.cotizar_id);\r\n\r\n                    // Establecer datos conforme la categoria\r\n                    let nuevosDatos = detalleRutas.map(cot => {\r\n\r\n                        let baseObjeto = {\r\n                            cot_det_id: cot.cot_det_id,\r\n                            fecha_salida: cot.fecha_salida,\r\n                            hora_salida: cot.hora_salida,\r\n                            categoria: { categoria_id: cot.categoria_id, nombre: cot.nombreCat },\r\n                            concepto: cot.concepto,\r\n                            pasajeros: cot.pasajeros,\r\n                            tipo_vuelo: cot.tipo_vuelo,\r\n                            cantidad: cot.cantidad,\r\n                            percost: cot.percost,\r\n                            tarifa: cot.tarifa,\r\n                            subtotal: cot.subtotal,\r\n                            rel_ruta: cot.rel_ruta,\r\n                            relaciones_id: cot.relacion_id,\r\n                            line_id: cot.line_id\r\n                        }\r\n\r\n                        // Agregar origen y destino solo si categoria es 1\r\n                        if (cot.categoria_id == 1) {\r\n                            baseObjeto.origen = { 'aeropuerto_id': cot.origenId, 'municipio': cot.origMun };\r\n                            baseObjeto.destino = { 'aeropuerto_id': cot.destinoId, 'municipio': cot.destMun };\r\n                        }\r\n\r\n                        return baseObjeto;\r\n                    });\r\n\r\n                    console.log(nuevosDatos);\r\n                    if (nuevosDatos.length < 9) {\r\n                        const numObjetosVacios = 8;\r\n                        const arreglo2 = Array(numObjetosVacios - nuevosDatos.length).fill({});\r\n                        const arregloCombinado = nuevosDatos.concat(arreglo2);\r\n                        const nuevosDatosClonados = arregloCombinado.map(obj => ({ ...obj }));\r\n                        gridApi.setGridOption('rowData', nuevosDatosClonados);\r\n                    } else {\r\n                        gridApi.setGridOption('rowData', nuevosDatos);\r\n                    }\r\n\r\n                    // Validaremos los datos obtenidos de la BD\r\n                    actTotales();\r\n                    activarRutas();\r\n\r\n                    // CARGAR PASAJEROS\r\n                    let detallePax = await obtenerPax(params.data.cotizar_id);\r\n\r\n                    for (let i = 0; i < detallePax.length; i++) {\r\n                        nuevoPax();\r\n                    }\r\n\r\n                    const formPax = document.querySelectorAll(`#formPasajeros .cont-pasajero`);\r\n                    if (formPax.length == detallePax.length) {\r\n                        formPax.forEach((ruta, indice) => {\r\n                            const paxId = detallePax[indice].pasajero_id;\r\n                            const paxName = detallePax[indice].nombre;\r\n\r\n                            // const inputPaxId = ruta.querySelector(`#pasajero_id${indice + 1}`);\r\n                            const inputPaxName = ruta.querySelector(`#paxName${indice + 1}`);\r\n\r\n                            // inputPaxId.value = paxId;\r\n                            inputPaxName.value = paxName;\r\n                            inputPaxName.dataset.pax = paxId;\r\n                        });\r\n                    }\r\n\r\n                    await ordenarPorCategoria();\r\n\r\n                    $(\".costeo-relacion\").show();\r\n                });\r\n\r\n                const actionContainer = document.createElement('div');\r\n                actionContainer.classList = \"btn-cont centrado\";\r\n                actionContainer.appendChild(editButton);\r\n                $('.pasajeros').prop('disabled', false);\r\n\r\n                return actionContainer;\r\n            },\r\n            width: 150,\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false\r\n        }\r\n    ];\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid');\r\n    obtenerCotizaciones();\r\n}\r\n\r\n// Ag-Grid\r\nasync function configTablaCrear() {\r\n    mostrarClienteEmpresa();\r\n\r\n    ////// MOVER A DONDE SEA REQUERIDO\r\n    let aeropuerto = await obtenerAeropuertos();\r\n    let categoria = await obtenerCategorias();\r\n    let producto = await obtenerProductos();\r\n    ////// MOVER A DONDE SEA REQUERIDO\r\n\r\n    let columnDefs = [\r\n        {\r\n            headerName: 'Id',\r\n            field: 'cot_det_id',\r\n            width: 60\r\n        },\r\n        {\r\n            headerName: \"\",\r\n            headerGroupComponent: CustomHeaderGroup,\r\n\r\n            children: [\r\n                {\r\n                    headerName: 'Fecha',\r\n                    field: \"fecha_salida\",\r\n                    width: 80,\r\n                    cellEditor: 'agDateCellEditor',\r\n                    editable: true,\r\n                    valueFormatter: function (params) {\r\n                        let fecha = params.value;\r\n                        if (fecha) {\r\n                            return formatearFecha(fecha);\r\n                        }\r\n                        return null;\r\n                    },\r\n                    cellClassRules: {\r\n                        'event-none': params => {\r\n                            // Verificar si cot_det_id tiene un valor\r\n                            // const cotDetIdValue = params.data.cot_det_id;\r\n                            // return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                        }\r\n                    },\r\n                },\r\n                {\r\n                    headerName: 'Hora',\r\n                    field: \"hora_salida\",\r\n                    width: 120,\r\n                    editable: true,\r\n                    columnGroupShow: \"open\",\r\n                    valueFormatter: function (params) {\r\n\r\n                        if (params.value !== null && params.value !== undefined) {\r\n                            const hora = params.value;\r\n                            let horas = 0;\r\n                            let minutos = 0;\r\n                            if (hora) {\r\n                                if (hora.includes(':')) {\r\n                                    const partes = hora.split(':');\r\n\r\n                                    horas = partes[0];\r\n                                    minutos = partes[1];\r\n                                } else {\r\n                                    horas = hora;\r\n                                }\r\n                            } else {\r\n                                horas = hora;\r\n                            }\r\n                            // Convertir el valor numérico a horas y minutos\r\n                            const hrsNum = parseFloat(horas);\r\n                            const minNum = parseFloat(minutos);\r\n\r\n                            const horaFormateada = `${hrsNum.toString().padStart(2, '0')}:${minNum.toString().padStart(2, '0')}`;\r\n                            const horaRegex = /^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$/;\r\n\r\n                            if (horaRegex.test(horaFormateada)) {\r\n                                return horaFormateada; // Devolver la hora formateada si es válida\r\n                            } else {\r\n                                return '00:00'; // Devolver un valor por defecto si el formato no es válido\r\n                            }\r\n                        }\r\n                        return null;\r\n                    },\r\n                },\r\n            ],\r\n        },\r\n        {\r\n            headerName: 'Cat',\r\n            field: 'categoria',\r\n            width: 80,\r\n            cellEditor: 'agSelectCellEditor',\r\n            editable: false,\r\n            cellEditorParams: {\r\n                values: ['', ...categoria.map(a => ({ categoria_id: a.categoria_id, nombre: a.nombre }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    return params.value.nombre;\r\n                }\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.categoria; // Debe devolver el objeto seleccionado\r\n            },\r\n            valueSetter: function (params) {\r\n                params.data.categoria = params.newValue;\r\n                return true;\r\n            },\r\n            cellClassRules: {\r\n                'event-none': params => {\r\n                    // Verificar si cot_det_id tiene un valor\r\n                    const cotDetIdValue = params.data.cot_det_id;\r\n                    return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Concepto',\r\n            field: 'concepto',\r\n            width: 180,\r\n            editable: false,\r\n        },\r\n        {\r\n            headerName: 'Origen',\r\n            field: 'origen',\r\n            width: 120,\r\n            editable: false,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['', ...aeropuerto.map(a => ({ aeropuerto_id: a.aeropuerto_id, municipio: a.municipio }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    return params.value.municipio;\r\n                }\r\n            },\r\n            valueGetter: function (params) {\r\n                return params.data.origen; // Debe devolver el objeto seleccionado\r\n            },\r\n            valueSetter: function (params) {\r\n                params.data.origen = params.newValue;\r\n                return true;\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Destino',\r\n            field: 'destino',\r\n            width: 120,\r\n            editable: false,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['', ...aeropuerto.map(a => ({ aeropuerto_id: a.aeropuerto_id, municipio: a.municipio }))],\r\n            },\r\n            valueFormatter: function (params) {\r\n                if (params.value) return params.value.municipio;\r\n            },\r\n            valueParser: function (params) {\r\n                if (params.value) return { aeropuerto_id: params.value.aeropuerto_id, municipio: params.value.municipio };\r\n            },\r\n            cellClassRules: {\r\n                'event-none': params => {\r\n                    // Verificar si cot_det_id tiene un valor\r\n                    const cotDetIdValue = params.data.cot_det_id;\r\n                    return cotDetIdValue !== undefined && cotDetIdValue !== null && cotDetIdValue !== '';\r\n                }\r\n            },\r\n        },\r\n        {\r\n            headerName: 'Pax',\r\n            field: 'pasajeros',\r\n            width: 60,\r\n            editable: true,\r\n            cellEditor: 'agNumberCellEditor',\r\n            valueParser: function (params) {\r\n                // Convertir la entrada en un número entero\r\n                return parseFloat(params.newValue) || null;\r\n            },\r\n            valueFormatter: function (params) {\r\n                // Formatear el número como entero\r\n                if (params.value !== null && params.value !== undefined) {\r\n                    return Math.round(params.value);\r\n                }\r\n                return null;\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Tipo',\r\n            field: 'tipo_vuelo',\r\n            width: 80,\r\n            cellEditor: 'agSelectCellEditor',\r\n            cellEditorParams: {\r\n                values: ['N', 'I'], // Valores disponibles en el select: 'I' para Internacional y 'N' para Nacional\r\n            },\r\n            valueFormatter: function (params) {\r\n                const tipoVuelo = params.value;\r\n\r\n                // Mapear el valor 'I' a 'Internacional' y 'N' a 'Nacional'\r\n                if (tipoVuelo === 'I') {\r\n                    return 'Internacional';\r\n                } else if (tipoVuelo === 'N') {\r\n                    return 'Nacional';\r\n                }\r\n\r\n                // Retornar el valor original si no coincide con 'I' o 'N'\r\n                return tipoVuelo;\r\n            },\r\n            editable: false,\r\n        },\r\n        {\r\n            headerName: \"\",\r\n            headerGroupComponent: CustomHeaderGroup,\r\n            children: [\r\n                {\r\n                    headerName: 'Cant',\r\n                    field: 'cantidad',\r\n                    width: 80,\r\n                    cellEditor: 'agNumberCellEditor',\r\n                    editable: true,\r\n                    valueParser: function (params) {\r\n                        // Convertir la entrada en un número entero\r\n                        return parseFloat(params.newValue) || null;\r\n                    },\r\n                    valueFormatter: function (params) {\r\n                        // Formatear el número como entero\r\n                        if (typeof params.value === 'number' && !isNaN(params.value)) {\r\n                            // Formatear el número como un decimal con un dígito después del punto decimal\r\n                            return params.value.toFixed(1);\r\n                        }\r\n                        return null;\r\n                    }\r\n                },\r\n                {\r\n                    headerName: 'Pernocta Costo',\r\n                    field: 'percost',\r\n                    width: 80,\r\n                    cellEditor: 'agNumberCellEditor',\r\n                    editable: true,\r\n                    columnGroupShow: \"open\",\r\n                    valueParser: function (params) {\r\n                        if (params.newValue == '0') {\r\n                            return 0.5\r\n                        }\r\n                        // Convertir la entrada en un número entero\r\n                        return parseFloat(params.newValue) || null;\r\n                    },\r\n                    valueFormatter: function (params) {\r\n                        // Formatear el número como entero\r\n                        if (typeof params.value === 'number' && !isNaN(params.value)) {\r\n                            // Formatear el número como un decimal con un dígito después del punto decimal\r\n                            return params.value.toFixed(1);\r\n                        }\r\n                        return null;\r\n                    }\r\n                },\r\n            ]\r\n        },\r\n        {\r\n            headerName: 'Tarifa',\r\n            field: 'tarifa',\r\n            width: 100,\r\n            editable: true,\r\n            cellEditor: 'agNumberCellEditor',\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    // Formatea el número con comas como separadores de miles y dos decimales\r\n                    return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Subtotal',\r\n            field: 'subtotal',\r\n            width: 100,\r\n            cellStyle: { textAlign: 'right' }, // Alinea los datos a la derecha\r\n            valueFormatter: function (params) {\r\n                if (params.value) {\r\n                    // Formatea el número con comas como separadores de miles y dos decimales\r\n                    return Number(params.value).toFixed(2).replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n                }\r\n            }\r\n        },\r\n        {\r\n            headerName: 'Relacion Ruta',\r\n            field: 'rel_ruta',\r\n            width: 80,\r\n            // hide: true,\r\n        },\r\n        {\r\n            headerName: 'Relacion',\r\n            field: 'relaciones_id',\r\n            width: 80,\r\n            // hide: true,\r\n        },\r\n        {\r\n            headerName: 'LineID',\r\n            field: 'line_id',\r\n            width: 80,\r\n        },\r\n        {\r\n            headerName: 'Acción',\r\n            width: 90,\r\n            cellRenderer: function (params) {\r\n\r\n                // Que el estatus sea Pendiente o Cotizado \r\n                const estatus = $(\"#estatus\").val();\r\n\r\n                if ((estatus == 'PND' || estatus == 'CTZ' || estatus == '') && (params.data.categoria && params.data.categoria.nombre)) {\r\n\r\n                    const editButton = document.createElement('I');\r\n                    editButton.className = \"fa-regular fa-trash-can btn btn-eliminar\";\r\n                    editButton.title = 'Eliminar';\r\n\r\n                    editButton.addEventListener('click', async function () {\r\n                        if (Object.keys(params.data).length == 0) return\r\n                        const lineId = params.data.line_id\r\n                        const rowNode = params.node;\r\n                        if (lineId) {\r\n                            await validarDetEliminar(lineId, rowNode);\r\n                            actTotales();\r\n                            actualizarCotizacion();\r\n                        } else {\r\n                            limpiarCelda(rowNode);\r\n                        }\r\n                    });\r\n\r\n                    const actionContainer = document.createElement('div');\r\n                    actionContainer.classList = \"btn-cont centrado\";\r\n                    actionContainer.appendChild(editButton);\r\n\r\n                    return actionContainer;\r\n                }\r\n            },\r\n            headerClass: 'txt-center',\r\n            cellClass: 'custom-action-cell', // Agregar la clase CSS 'custom-action-cell' a todas las celdas en esta columna\r\n            filter: false\r\n        }\r\n    ];\r\n\r\n    let data = '';\r\n    iniciarTabla(data, columnDefs, '#myGrid2');\r\n    if (!$('#cotizar_id').val()) await obtenerTipoCambio();\r\n\r\n    // Establece los asientos para la aronave\r\n    establecerAsientos();\r\n\r\n    // OnChange\r\n    gridApi.addEventListener('cellValueChanged', async function (e) {\r\n        const columnName = e.column.colId;\r\n        const rowData = e.node.data;\r\n        const rowIndex = e.rowIndex;\r\n\r\n        let origenVal = rowData.origen ? rowData.origen.aeropuerto_id : '';\r\n        let destinoVal = rowData.destino ? rowData.destino.aeropuerto_id : '';\r\n\r\n        if (columnName == 'origen' || columnName == 'destino') {\r\n            const aeronave = $('#aeronave_id').val();\r\n\r\n            // Validar que origen y destino tengan ruta y tarifa\r\n            if (aeronave) {\r\n                if (origenVal && destinoVal) {\r\n                    let valida = await validaRutaTarifa(origenVal, destinoVal);\r\n                    if (valida.exito == '0') {\r\n                        SwalToast('warning', valida.alertas.error[0], 2500);\r\n                        let rowNode = gridApi.getRowNode(rowIndex);\r\n                        if (rowNode && rowNode.data) {\r\n                            // Limpiar los valores de todas las celdas en la fila\r\n                            Object.keys(rowNode.data).forEach(key => {\r\n                                rowNode.setDataValue(key, null);\r\n                            });\r\n                        }\r\n                    } else {\r\n                        $('#costo_id').val(valida.tarifa.costo_id);\r\n                        if (valida.ruta.tipo_vuelo == 'N') {\r\n                            rowData.tarifa = valida.tarifa.costo_mx;\r\n                        } else if (valida.ruta.tipo_vuelo == 'I') {\r\n                            rowData.tarifa = valida.tarifa.costo_usd;\r\n                        }\r\n                        // rowData.categoria = { categoria_id: 1, nombre: 'Ruta' };\r\n                        rowData.tipo_vuelo = valida.ruta.tipo_vuelo;\r\n                        rowData.relaciones_id = valida.ruta.ruta_id;\r\n                        rowData.rel_ruta = valida.ruta.ruta_id;\r\n                        rowData.hora_salida = '00:00';\r\n                        rowData.cantidad = '1';\r\n\r\n                        let categoria = rowData.categoria;\r\n                        let cod = '';\r\n                        if (categoria.nombre == 'Ruta') {\r\n                            cod = await obtenerCodigosIATA(origenVal, destinoVal);\r\n                            rowData.concepto = cod;\r\n                        }\r\n\r\n                        let newLineID = await consecutivoLineID();\r\n                        rowData.line_id = newLineID;\r\n\r\n                        gridApi.applyTransaction({ update: [rowData] });\r\n                        await generarPernoctas();\r\n                        await generarAterrizajes();\r\n                        await generarTUA();\r\n                        await ordenarPorCategoria();\r\n                        gridApi.applyTransaction({ update: [rowData] });\r\n                    }\r\n                }\r\n            } else {\r\n                SwalToast('warning', 'Selecciona una Aeronave', 2500);\r\n            }\r\n        }\r\n\r\n        if (columnName == 'fecha_salida') {\r\n            if (origenVal && destinoVal) {\r\n                console.log('generar');\r\n                await generarPernoctas();\r\n                await ordenarPorCategoria();\r\n            }\r\n        }\r\n\r\n        if (columnName == 'pasajeros') {\r\n            const value = e.newValue;\r\n            const oldValue = e.oldValue; // Guardar el valor anterior\r\n\r\n            if (value > PASAJEROS) {\r\n                rowData.pasajeros = PASAJEROS;\r\n                gridApi.applyTransaction({ update: [rowData] });\r\n            }\r\n\r\n            if (rowData.origen && rowData.destino) {\r\n                // Verificar si hay suficientes TUAS para el número de pasajeros\r\n                const rutasData = [];\r\n                gridApi.forEachNode(node => {\r\n                    const rowData = node.data;\r\n                    if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n                        rutasData.push(rowData);\r\n                    }\r\n                });\r\n\r\n                if (rutasData.length > 0) {\r\n                    const aeropuertos = await obtenerAeropuertos();\r\n                    for (let i = 0; i < rutasData.length; i++) {\r\n                        const ruta = rutasData[i];\r\n                        const origen = ruta.origen.aeropuerto_id;\r\n                        // const pax = ruta.pasajeros;\r\n\r\n                        // Contar TUAS existentes para este origen\r\n                        let existingTuasCount = 0;\r\n                        gridApi.forEachNode(node => {\r\n                            if (node.data.categoria && node.data.categoria.nombre === 'Tua' && node.data.relaciones_id === origen) {\r\n                                existingTuasCount++;\r\n                            }\r\n                        });\r\n\r\n                        // Verificar si hay suficientes TUAS para el número de pasajeros\r\n                        if (value <= existingTuasCount) {\r\n                            rowData.pasajeros = oldValue;\r\n                            gridApi.applyTransaction({ update: [rowData] });\r\n                            SwalToast('warning', 'El número de TUAS existentes es suficiente', 2500);\r\n                            return; // Detener la ejecución de la función\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Si se supera la validación de los pasajeros, generar TUAS y ordenar por categoría\r\n                await generarTUA();\r\n                await ordenarPorCategoria();\r\n            }\r\n        }\r\n\r\n        if (columnName == 'concepto') {\r\n            // console.log(rowData);\r\n            // console.log(rowIndex);\r\n        }\r\n\r\n        if (rowData.origen && rowData.destino) {\r\n            actTotalesLine(rowData);\r\n            actTotales();\r\n        }\r\n\r\n        if (rowData.percost && rowData.categoria) {\r\n            actTotalesLine(rowData);\r\n            actTotales();\r\n        }\r\n\r\n        if (rowData.categoria && rowData.tarifa) {\r\n            actTotalesLine(rowData);\r\n            actTotales();\r\n        }\r\n\r\n    });\r\n\r\n    gridApi.addEventListener('cellDoubleClicked', async function (e) {\r\n        const columnName = e.column.colId;\r\n        const rowData = e.node.data;\r\n        const rowIndex = e.rowIndex;\r\n        const cellElement = e.event.target; // Elemento DOM de la celda clicada\r\n        const contLista = '#filtro'; // DIV para las busquedas\r\n        const contScroll = '.contenedor-altas'; // DIV donde obtendremos el Scroll\r\n\r\n        // Al cambiar de categoria\r\n        if (columnName == 'categoria') {\r\n            const nuevacategoria = categoria.map(objeto => {\r\n                return {\r\n                    id: objeto.categoria_id,\r\n                    nombre: objeto.nombre\r\n                };\r\n            });\r\n\r\n            let grid = await mostrarListaGrid(cellElement, nuevacategoria, contLista, contScroll);\r\n            let rowNode = gridApi.getRowNode(rowIndex);\r\n\r\n            if (rowData.categoria) {\r\n                limpiarCelda(rowNode);\r\n            }\r\n            rowNode = gridApi.getRowNode(rowIndex);\r\n            const valor = { categoria_id: grid.id, nombre: grid.nombre };\r\n            rowNode.setDataValue('categoria', valor);\r\n            gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n        }\r\n\r\n        // Mostrar concepto dependiendo de la ruta\r\n        if (columnName == 'concepto' && rowData.categoria) {\r\n\r\n            if (rowData.categoria.nombre == 'Producto') {\r\n\r\n                const nuevoProducto = producto.map(objeto => {\r\n                    return {\r\n                        id: objeto.producto_id,\r\n                        nombre: objeto.nombre\r\n                    };\r\n                });\r\n\r\n                let grid = await mostrarListaGrid(cellElement, nuevoProducto, contLista, contScroll);\r\n\r\n                let newLineID = await consecutivoLineID();\r\n\r\n                const rowNode = gridApi.getRowNode(rowIndex);\r\n                const prodFind = producto.find(item => item.producto_id === grid.id);\r\n                rowNode.setDataValue('concepto', grid.nombre);\r\n                rowNode.setDataValue('relaciones_id', grid.id);\r\n                rowNode.setDataValue('tarifa', prodFind.precio);\r\n                rowNode.setDataValue('cantidad', '1');\r\n                rowNode.setDataValue('line_id', newLineID);\r\n\r\n                gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n            }\r\n\r\n            if (rowData.categoria.nombre == 'Aterrizaje') {\r\n\r\n            }\r\n\r\n            if (rowData.categoria.nombre == 'Pernocta') {\r\n\r\n            }\r\n\r\n            if (rowData.categoria.nombre == 'Ruta') {\r\n\r\n            }\r\n\r\n        }\r\n\r\n        // seleccionar si la cat = Ruta\r\n        if (columnName === 'origen' || columnName === 'destino') {\r\n            const nuevoAeropuerto = aeropuerto.map(objeto => {\r\n                return {\r\n                    id: objeto.aeropuerto_id,\r\n                    nombre: objeto.municipio,\r\n                };\r\n            });\r\n\r\n            if (rowData.categoria && rowData.categoria.nombre == 'Ruta' && !(rowData && rowData.cot_det_id)) {\r\n                let grid = await mostrarListaGrid(cellElement, nuevoAeropuerto, contLista, contScroll);\r\n                const rowNode = gridApi.getRowNode(rowIndex);\r\n                const valor = { aeropuerto_id: grid.id, municipio: grid.nombre };\r\n\r\n                if (columnName === 'origen') {\r\n                    rowNode.setDataValue('origen', valor);\r\n                } else {\r\n                    rowNode.setDataValue('destino', valor);\r\n                }\r\n\r\n                gridApi.redrawRows(); // Redibujar la fila para reflejar los cambios\r\n            }\r\n        }\r\n\r\n    });\r\n\r\n    // gridApi.addEventListener('cellKeyDown', async function (e) {});\r\n}\r\nfunction limpiarCelda(rowNode) {\r\n\r\n    // Obtén todas las columnas del grid\r\n    const allColumns = [];\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        allColumns.push(rowData);\r\n    });\r\n\r\n    // Crea un objeto vacío para almacenar los cambios\r\n    let updatedData = {};\r\n\r\n    // Itera sobre cada columna y establece el valor a null o ''\r\n    allColumns.forEach(column => {\r\n        const colId = column.colId;\r\n        // updatedData[colId] = null; // o '' si prefieres\r\n    });\r\n\r\n    // Actualiza los datos de la fila\r\n    rowNode.setData(updatedData);\r\n}\r\nfunction actTotalesLine(rowData) {\r\n\r\n    if (!rowData) return\r\n\r\n    const categoria = rowData.categoria.nombre;\r\n    const cantidad = parseFloat(rowData.cantidad || 0);\r\n    const tarifa = parseFloat(rowData.tarifa || 0);\r\n    const pernocta = parseFloat(rowData.percost || 0.5);\r\n    let subtotal = 0;\r\n\r\n    if (categoria == 'Ruta') {\r\n        subtotal = cantidad * tarifa;\r\n        rowData.subtotal = subtotal;\r\n    } else if (categoria == 'Pernocta') {\r\n        subtotal = (cantidad * pernocta) * tarifa;\r\n        rowData.subtotal = subtotal;\r\n    } else if (categoria == 'Aterrizaje') {\r\n        subtotal = tarifa;\r\n        rowData.subtotal = subtotal;\r\n    } else if (categoria == 'Producto') {\r\n        subtotal = cantidad * tarifa;\r\n        rowData.subtotal = subtotal;\r\n    }\r\n\r\n    gridApi.applyTransaction({ update: [rowData] });\r\n}\r\nfunction actTotales() {\r\n\r\n    // Actualizar Totales Generales\r\n    let cantPernoctas = 0;\r\n    let totPernoctas = 0;\r\n    let cantHoras = 0;\r\n    let totalHoras = 0;\r\n    let subtotalInpt = 0;\r\n\r\n    let subtNac = 0;\r\n    let subtInt = 0;\r\n    let ivaNac = 0;\r\n    let ivaInt = 0;\r\n\r\n    // Iterar sobre todas las filas de la tabla\r\n    gridApi.forEachNode(node => {\r\n        const hr_cant = parseFloat(node.data.cantidad || 0);\r\n        const subtotal = parseFloat(node.data.subtotal || 0);\r\n\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Pernocta') {\r\n            cantPernoctas += hr_cant;\r\n            totPernoctas += subtotal;\r\n        }\r\n\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Ruta') {\r\n            cantHoras += hr_cant;\r\n            totalHoras += subtotal;\r\n        }\r\n\r\n        subtotalInpt += subtotal;\r\n\r\n        if (node.data.tipo_vuelo == 'N') {\r\n            subtNac += subtotal;\r\n        } else if (node.data.tipo_vuelo == 'I') {\r\n            subtInt += subtotal;\r\n        }\r\n\r\n    });\r\n\r\n    ivaNac = subtNac * 0.16;\r\n    ivaInt = subtInt * 0.04;\r\n\r\n    // Actualizar el valor del input 'cant_hrs'\r\n    $('#cant_pernocta').val(cantPernoctas);\r\n    $('#tot_pernocta').val(totPernoctas);\r\n    $('#cant_hrs').val(cantHoras);\r\n    $('#tot_hrs').val(totalHoras);\r\n    $('#subtotal').val(subtotalInpt);\r\n    $('#ivaNac').val(ivaNac);\r\n    $('#ivaInt').val(ivaInt);\r\n    $('#total').val(subtotalInpt + ivaNac + ivaInt);\r\n}\r\nfunction mostrarClienteEmpresa() {\r\n\r\n    let opcionSeleccionada = $('#slctOpcion').val();\r\n\r\n    if (opcionSeleccionada == 1) {\r\n        $('#inpCliente').show();\r\n        $('#inpEmpresa').hide();\r\n        $(\"label[for='cliente_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='broker_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='broker_id'] option\").val(\"\");\r\n        $(\"select[id='broker_id'] option\").text(\"\");\r\n    } else if (opcionSeleccionada == 2) {\r\n        $('#inpCliente').hide();\r\n        $('#inpEmpresa').show();\r\n        // $(\"#rt-responsable\").val(\"\");\r\n        $(\"label[for='broker_id']\").addClass(\"labelImportant\");\r\n        $(\"label[for='cliente_id']\").removeClass(\"labelImportant\");\r\n        $(\"select[id='cliente_id'] option\").val(\"\");\r\n        $(\"select[id='cliente_id'] option\").text(\"\");\r\n    }\r\n}\r\nfunction activarRutas() {\r\n    // Obtener los valores de los campos\r\n    let aeronaveValue = $('#aeronave_id').val();\r\n    let clienteValue = $('#cliente_id').val();\r\n    let brokerValue = $('#broker_id').val();\r\n    let estatus = $('#estatus').val();\r\n\r\n    // Verificar si aeronave_id tiene valor y al menos uno de cliente_id o broker_id tiene valor\r\n    let aeronaveTieneValor = (aeronaveValue !== '');\r\n    let clienteOBrokerTieneValor = (clienteValue !== '' || brokerValue !== '');\r\n\r\n    if ((estatus == 'PND' || estatus == 'CTZ' || estatus == '') && (aeronaveTieneValor && clienteOBrokerTieneValor)) {\r\n        $(\"#myGrid2\").removeClass('event-none');\r\n        $(\"#formTotales\").removeClass('event-none');\r\n        $(\"#formPasajeros\").removeClass('event-none');\r\n    } else {\r\n        $(\"#myGrid2\").addClass('event-none');\r\n        $(\"#formTotales\").addClass('event-none');\r\n        $(\"#formPasajeros\").addClass('event-none');\r\n    }\r\n}\r\nasync function ordenarPorCategoria() {\r\n    const allData = [];\r\n    const rutaRows = [];\r\n    const aterrizajeRows = [];\r\n    const pernoctaRows = [];\r\n    const otrasCategoriasRows = [];\r\n\r\n    // const categorias = obtenerCategorias();\r\n\r\n    // Iterar sobre todas las filas de datos en la tabla\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        allData.push(rowData);\r\n\r\n        // Clasificar las filas en diferentes arreglos segun la categoria\r\n        if (rowData.categoria) {\r\n            if (rowData.categoria.nombre == 'Ruta') {\r\n                rutaRows.push(rowData);\r\n            } else if (rowData.categoria && rowData.categoria.nombre == 'Pernocta') {\r\n                pernoctaRows.push(rowData);\r\n            } else if (rowData.categoria && rowData.categoria.nombre == 'Aterrizaje') {\r\n                aterrizajeRows.push(rowData);\r\n            } else {\r\n                // Cualquier otra categoría\r\n                otrasCategoriasRows.push(rowData);\r\n            }\r\n        }\r\n    });\r\n\r\n    // Concatenar todas las filas en el nuevo orden deseado\r\n    let sortedRows = [...rutaRows, ...pernoctaRows, ...aterrizajeRows, ...otrasCategoriasRows];\r\n    sortedRows.push({});\r\n\r\n    gridApi.updateGridOptions({ rowData: sortedRows })\r\n}\r\nasync function generarPernoctas() {\r\n\r\n    // eliminar todas las pernoctas existentes en el grid\r\n    const rowDataToRemove = [];\r\n\r\n    // gridApi.forEachNode(node => {\r\n    //     if (node.data.categoria && node.data.categoria.nombre === 'Pernocta') {\r\n    //         rowDataToRemove.push(node.data);\r\n    //     }\r\n    // });\r\n\r\n    gridApi.forEachNode(node => {\r\n        if (node.data.categoria && node.data.categoria.nombre === 'Pernocta' && !node.data.cot_det_id) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas identificadas como pernoctas\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las pernoctas\r\n    const allData = [];\r\n    const pernoctasMap = {}; // Mapa para rastrear pernoctas por 'relaciones_id'\r\n\r\n    // // Recorremos todas las filas con la categoría 'Ruta' para calcular las pernoctas\r\n    // gridApi.forEachNode(node => {\r\n    //     const rowData = node.data;\r\n    //     if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n    //         allData.push(rowData);\r\n    //     }\r\n    // });\r\n\r\n    // Recorremos todas las filas con la categoría 'Ruta' para calcular las pernoctas\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            allData.push(rowData);\r\n        } else if (rowData.categoria && rowData.categoria.nombre === 'Pernocta') {\r\n            pernoctasMap[rowData.relaciones_id] = rowData;\r\n        }\r\n    });\r\n\r\n\r\n    if (allData.length > 1) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de pernocta\r\n\r\n        let newLineID = await consecutivoLineID();\r\n\r\n        for (let i = 0; i < allData.length - 1; i++) {\r\n\r\n            const fechaActual = new Date(allData[i].fecha_salida);\r\n            const diaActual = fechaActual.getDate(); // Obtiene el día del mes (número del 1 al 31)\r\n            const conceptoActual = allData[i].concepto;\r\n            const tarifaActual = allData[i].tarifa;\r\n            const relacionActual = allData[i].relaciones_id;\r\n            const lineID = allData[i].line_id;\r\n\r\n            const fechaSiguiente = new Date(allData[i + 1].fecha_salida);\r\n            const timeDifference = fechaSiguiente.getTime() - fechaActual.getTime();\r\n            const daysDifference = Math.floor(timeDifference / (1000 * 60 * 60 * 24));\r\n\r\n            // Crear nueva fila Pernocta solo si daysDifference > 0\r\n            if (daysDifference > 0) {\r\n\r\n                // const newRow = {\r\n                //     cot_det_id: '',\r\n                //     hora_salida: '0',\r\n                //     categoria: { categoria_id: 2, nombre: 'Pernocta' },\r\n                //     concepto: `${conceptoActual} - Día: ${diaActual}`,\r\n                //     origen: '',\r\n                //     destino: '',\r\n                //     pasajeros: '',\r\n                //     tipo_vuelo: '',\r\n                //     cantidad: daysDifference,\r\n                //     tarifa: tarifaActual,\r\n                //     percost: '0.5',\r\n                //     subtotal: (daysDifference * 0.5) * tarifaActual,\r\n                //     relaciones_id: relacionActual\r\n                // };\r\n                // rowsToAdd.push(newRow);\r\n\r\n                if (pernoctasMap[relacionActual]) {\r\n                    // Actualizar cantidad de 'daysDifference' en la pernocta existente\r\n                    pernoctasMap[relacionActual].cantidad = daysDifference;\r\n                    pernoctasMap[relacionActual].subtotal = (daysDifference * 0.5) * tarifaActual;\r\n                } else {\r\n\r\n                    console.log('lineID');\r\n                    console.log(lineID);\r\n                    // Crear nueva fila Pernocta\r\n                    const newRow = {\r\n                        cot_det_id: '',\r\n                        hora_salida: '0',\r\n                        categoria: { categoria_id: 2, nombre: 'Pernocta' },\r\n                        concepto: `${conceptoActual} - Día: ${diaActual}`,\r\n                        origen: '',\r\n                        destino: '',\r\n                        pasajeros: '',\r\n                        tipo_vuelo: '',\r\n                        cantidad: daysDifference,\r\n                        tarifa: tarifaActual,\r\n                        percost: '0.5',\r\n                        subtotal: (daysDifference * 0.5) * tarifaActual,\r\n                        // relaciones_id: relacionActual,\r\n                        rel_ruta: lineID,\r\n                        line_id: newLineID\r\n                    };\r\n                    newLineID++;\r\n                    rowsToAdd.push(newRow);\r\n                }\r\n            }\r\n        }\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n\r\n        // Actualizar las filas existentes con los nuevos valores calculados\r\n        const rowsToUpdate = Object.values(pernoctasMap).filter(row => row.cantidad !== undefined);\r\n        if (rowsToUpdate.length > 0) {\r\n            gridApi.applyTransaction({ update: rowsToUpdate });\r\n        }\r\n    }\r\n\r\n}\r\nasync function generarAterrizajes() {\r\n\r\n    // Eliminar todas las tasas de aterrizaje en el grid\r\n    const rowDataToRemove = [];\r\n\r\n    gridApi.forEachNode(node => {\r\n        if (node.data.categoria && node.data.categoria.nombre == 'Aterrizaje') {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas indetificadas como Aterrizajes\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n\r\n        const allData = [];\r\n        gridApi.forEachNode(node => {\r\n            const rowData = node.data;\r\n            allData.push(rowData);\r\n        });\r\n        gridApi.updateGridOptions({ rowData: allData });\r\n    }\r\n\r\n    // Agregar las tasas de Aterrizaje\r\n    const allData = [];\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta') {\r\n            allData.push(rowData);\r\n        }\r\n    });\r\n\r\n    let newLineID = await consecutivoLineID();\r\n\r\n    if (allData.length > 0) {\r\n        const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de Aterrizaje\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        for (i in allData) {\r\n\r\n            const destino = allData[i].destino.aeropuerto_id;\r\n            const concepto = allData[i].concepto;\r\n            const relacion = allData[i].line_id;\r\n\r\n            console.log(relacion);\r\n            const valAterrizaje = await obtenerTasaAterrizaje(destino, aeronave);\r\n            if (valAterrizaje.exito == 1) {\r\n                const newRow = {\r\n                    cot_det_id: '',\r\n                    hora_salida: '0',\r\n                    categoria: { categoria_id: 3, nombre: 'Aterrizaje' },\r\n                    concepto: concepto,\r\n                    origen: '',\r\n                    destino: '',\r\n                    pax: '',\r\n                    tipo_vuelo: '',\r\n                    tarifa: valAterrizaje.aterrizaje.tarifa_aterrizaje,\r\n                    subtotal: valAterrizaje.aterrizaje.tarifa_aterrizaje,\r\n                    relaciones_id: valAterrizaje.aterrizaje.tasa_aterrizaje_id,\r\n                    rel_ruta: relacion,\r\n                    line_id: newLineID\r\n                }\r\n                newLineID++; // Incrementar el lineID para cada nueva fila\r\n                rowsToAdd.push(newRow);\r\n            }\r\n        }\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n    }\r\n\r\n}\r\nasync function generarTUA() {\r\n\r\n    // Eliminar todas las TUAS en el grid\r\n    const rowDataToRemove = [];\r\n\r\n    gridApi.forEachNode(node => {\r\n        if (node.data.categoria && node.data.categoria.nombre === 'Tua' && !node.data.cot_det_id) {\r\n            rowDataToRemove.push(node.data);\r\n        }\r\n    });\r\n\r\n    if (rowDataToRemove.length > 0) {\r\n        // Remover las filas identificadas como TUAS sin cot_det_id\r\n        gridApi.applyTransaction({ remove: rowDataToRemove });\r\n    }\r\n\r\n    // Agregar TUAS \r\n    const rutasData = [];\r\n    gridApi.forEachNode(node => {\r\n        const rowData = node.data;\r\n        if (rowData.categoria && rowData.categoria.nombre === 'Ruta' && rowData.origen && rowData.destino) {\r\n            rutasData.push(rowData);\r\n        }\r\n    });\r\n\r\n\r\n    let newLineID = await consecutivoLineID();\r\n\r\n    const rowsToAdd = []; // Aquí almacenaremos las nuevas filas de TUAS\r\n    if (rutasData.length > 0) {\r\n        const aeropuertos = await obtenerAeropuertos();\r\n        for (let i = 0; i < rutasData.length; i++) {\r\n            const origen = rutasData[i].origen.aeropuerto_id;\r\n            const pax = rutasData[i].pasajeros;\r\n            // const rel = rutasData[i].cot_det_id;\r\n            const rel = rutasData[i].line_id\r\n\r\n            const aeropuertoFind = aeropuertos.find(objeto => objeto.aeropuerto_id == origen);\r\n            if (aeropuertoFind && aeropuertoFind['costo_tua']) {\r\n                const concepto = `TUA - ${aeropuertoFind['codigo_iata']}`;\r\n\r\n                // Contar TUAS existentes para este origen\r\n                let existingTuasCount = 0;\r\n                gridApi.forEachNode(node => {\r\n                    if (node.data.categoria && node.data.categoria.nombre === 'Tua' && node.data.relaciones_id === origen) {\r\n                        existingTuasCount++;\r\n                    }\r\n                });\r\n\r\n                // Agregar las TUAS necesarias para completar el valor de pax\r\n                const tuasToAddCount = pax - existingTuasCount;\r\n                if (tuasToAddCount > 0) {\r\n                    for (let j = 0; j < tuasToAddCount; j++) {\r\n                        const newRow = {\r\n                            line_id: newLineID,\r\n                            cot_det_id: '',\r\n                            hora_salida: '0',\r\n                            categoria: { categoria_id: 5, nombre: 'Tua' },\r\n                            concepto: concepto,\r\n                            origen: '',\r\n                            destino: '',\r\n                            pax: '',\r\n                            tipo_vuelo: '',\r\n                            tarifa: aeropuertoFind['costo_tua'],\r\n                            subtotal: aeropuertoFind['costo_tua'],\r\n                            rel_ruta: rel,\r\n                            relaciones_id: aeropuertoFind['aeropuerto_id']\r\n                        };\r\n                        newLineID++; // Incrementar el lineID para cada nueva fila\r\n                        rowsToAdd.push(newRow);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        // Agregar las nuevas filas al grid\r\n        if (rowsToAdd.length > 0) {\r\n            gridApi.applyTransaction({ add: rowsToAdd });\r\n        }\r\n    }\r\n}\r\n\r\n// FUNCIONES \r\nfunction resetForm() {\r\n    resetearTabla('#myGrid2', '#searchInput1');\r\n    cerrarVentana('.contenedor-altas', ['#formAltas', '#formTotales']);\r\n    $('#inpCliente').hide();\r\n    $('#inpEmpresa').hide();\r\n    $('#inpGeneral').hide();\r\n\r\n    $('#aeronave_id').prop('disabled', false);\r\n    $('#slctOpcion').prop('disabled', false);\r\n    $('#cliente_id').prop('disabled', false);\r\n    $('#broker_id').prop('disabled', false);\r\n\r\n    // limpiar pax\r\n    const pax = document.querySelectorAll(`#formPasajeros .cont-pasajero`);\r\n    // Iterar sobre los elementos a partir del segundo elemento\r\n    for (let i = 0; i < pax.length; i++) {\r\n        pax[i].remove(); // Eliminar el elemento\r\n    }\r\n    $('#formRelRuta').empty();\r\n    botonPdfCotizar();\r\n    PASAJEROS = '';\r\n    MAXPAX = 0;\r\n    limpiarForm(\"#formAltas\");\r\n    obtenerCotizaciones();\r\n}\r\nasync function mostrarContenedorAltas() {\r\n    await configTablaCrear();\r\n    setFechaActual('fecha-cot');\r\n    $(\".contenedor-altas\").show();\r\n}\r\nfunction botonPdfCotizar() {\r\n    $(\".btn-pdf\").toggle(['CTZ', 'SVC', 'CMP'].includes($('#estatus').val()));\r\n    $(\"#btnServicio\").toggle($('#estatus').val() === 'CTZ');\r\n}\r\nfunction nuevoPax() {\r\n    const formPasajeros = document.getElementById('formPasajeros');\r\n    const btnPasajero = document.getElementById('btnPasajero');\r\n    let contadorPasajeros = formPasajeros.querySelectorAll('.cont-pasajero').length + 1;\r\n\r\n    // Crear nuevo div para el nuevo pasajero\r\n    const nuevoPasajeroDiv = document.createElement('DIV');\r\n    nuevoPasajeroDiv.classList.add('cont-form2', 'cont-pasajero');\r\n\r\n    // Crear div contenedor para el grupo de entrada de texto\r\n    const divInputGroupText = document.createElement('DIV');\r\n    divInputGroupText.classList.add('form-group');\r\n\r\n    // Crear input para el id del pasajero\r\n    const idPaxInput = document.createElement('INPUT');\r\n    idPaxInput.type = 'text';\r\n    idPaxInput.id = 'pasajero_id' + contadorPasajeros;\r\n    idPaxInput.classList.add('hidden');\r\n    // divInputGroupText.appendChild(idPaxInput);\r\n\r\n    // Crear input para el nombre del pasajero\r\n    const nuevoNombreInput = document.createElement('INPUT');\r\n    nuevoNombreInput.type = 'text';\r\n    nuevoNombreInput.id = 'paxName' + contadorPasajeros;\r\n    // nuevoNombreInput.dataset.target = contadorPasajeros;\r\n    nuevoNombreInput.placeholder = '';\r\n    divInputGroupText.appendChild(nuevoNombreInput);\r\n\r\n    // Crear label para el nombre del pasajero\r\n    const nuevoNombreLabel = document.createElement('LABEL');\r\n    nuevoNombreLabel.textContent = 'Pasajero ' + contadorPasajeros + ':';\r\n    nuevoNombreLabel.htmlFor = 'paxName' + contadorPasajeros;\r\n    divInputGroupText.appendChild(nuevoNombreLabel);\r\n\r\n    // Agregar div de entrada de texto al div del pasajero\r\n    nuevoPasajeroDiv.appendChild(divInputGroupText);\r\n\r\n    // Crear div contenedor para el grupo de entrada de archivo\r\n    const divInputGroupFile = document.createElement('DIV');\r\n    divInputGroupFile.classList.add('form-group');\r\n\r\n    // Crear input de archivo para el pasajero\r\n    const nuevoArchivoInput = document.createElement('INPUT');\r\n    nuevoArchivoInput.type = 'file';\r\n    nuevoArchivoInput.name = 'paxFile' + contadorPasajeros;\r\n    nuevoArchivoInput.id = 'paxFile' + contadorPasajeros;\r\n    nuevoArchivoInput.accept = 'image/*';  // Esto permite solo archivos de imagen\r\n    divInputGroupFile.appendChild(nuevoArchivoInput);\r\n\r\n    // Crear input de eliminar para el pasajero\r\n    const nuevoEliminar = document.createElement('A');\r\n    nuevoEliminar.id = 'btnEliminarPax' + contadorPasajeros;\r\n    nuevoEliminar.classList.add('btn', 'btn-eliminarPax');\r\n    nuevoEliminar.title = 'Eliminar Pasajero';\r\n\r\n    divInputGroupFile.appendChild(nuevoEliminar);\r\n\r\n    // Agregar div de entrada de archivo al div del pasajero\r\n    nuevoPasajeroDiv.appendChild(divInputGroupFile);\r\n\r\n    // Insertar el nuevo pasajero antes del botón \"Agregar Pasajero\"\r\n    formPasajeros.insertBefore(nuevoPasajeroDiv, btnPasajero);\r\n\r\n    $(`#btnEliminarPax${contadorPasajeros}`).on(\"click\", async function () {\r\n        // id a eliminar \r\n        const cotizar_id = $('#cotizar_id').val();\r\n        // const pasajero_id = $(`#pasajero_id${contadorPasajeros}`).val();\r\n        const pasajero_id = $(this).closest('.cont-pasajero').find('input[id^=\"paxName\"]').data('pax');\r\n\r\n        if (cotizar_id && pasajero_id) await eliminarPasajero(cotizar_id, pasajero_id);\r\n\r\n        $(this).closest('.cont-pasajero').remove(); // Eliminar el div padre más cercano con la clase 'nuevaRuta'\r\n    });\r\n}\r\nasync function obtenerPax(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/pax', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerRutPaxCot(id) {\r\n    try {\r\n\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/rutPaxCot', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n        console.log(data);\r\n\r\n        return data;\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function validarGrid() {\r\n    let detalles = [];\r\n    try {\r\n        gridApi.forEachNode(node => {\r\n            // Obtener los datos de la fila\r\n            const relacion_id = node.data.relaciones_id;\r\n            const categoria = node.data.categoria;\r\n            const concepto = node.data.concepto;\r\n            const fecha = node.data.fecha_salida;\r\n            const tHoras = node.data.cantidad;\r\n\r\n            // Copiar la fila y modificar el valor de origen\r\n            let filaModificada = {};\r\n            // Verificar si la fila tiene relacion_id\r\n            if (relacion_id) {\r\n\r\n                filaModificada = { ...node.data }; // Crear una copia de la fila\r\n\r\n                // Ajustar 'Categoria' para contener solo el ID\r\n                if (filaModificada.categoria && filaModificada.categoria.categoria_id !== undefined) {\r\n                    filaModificada.categoria = filaModificada.categoria.categoria_id;\r\n                }\r\n\r\n                if (categoria && categoria.nombre == 'Ruta') {\r\n                    // Validar que tengan fecha obligatoriamente\r\n                    if (fecha == undefined) {\r\n                        throw SwalToast('warning', 'Fecha Obligatoria', 2500);\r\n                    }\r\n\r\n                    if (tHoras == undefined) {\r\n                        throw SwalToast('warning', 'Horas Obligatorias', 2500);\r\n                    }\r\n\r\n                    // Formatear la fecha a 'año-mes-día' (YYYY-MM-DD)\r\n                    const formattedFecha = new Date(fecha).toISOString().split('T')[0];\r\n\r\n                    // Asignar el valor de 'aeropuerto_id' de 'origen' a 'origen'\r\n                    if (filaModificada.origen && filaModificada.origen.aeropuerto_id !== undefined) {\r\n                        filaModificada.origen = filaModificada.origen.aeropuerto_id;\r\n                    }\r\n\r\n                    // Ajustar 'destino' para contener solo 'aeropuerto_id'\r\n                    if (filaModificada.destino && filaModificada.destino.aeropuerto_id !== undefined) {\r\n                        filaModificada.destino = filaModificada.destino.aeropuerto_id;\r\n                    }\r\n\r\n                    filaModificada.fecha_salida = formattedFecha;\r\n                }\r\n\r\n                // Agregar la fila modificada al arreglo detalles\r\n                detalles.push(filaModificada);\r\n            } else if (categoria && categoria.nombre == 'Pernocta') {\r\n                if (concepto == undefined) {\r\n                    throw SwalToast('warning', 'Concepto Obligatorio para Pernocta', 2500);\r\n                }\r\n                filaModificada = { ...node.data }; // Crear una copia de la fila\r\n\r\n                // Ajustar 'Categoria' para contener solo el ID\r\n                if (filaModificada.categoria && filaModificada.categoria.categoria_id !== undefined) {\r\n                    filaModificada.categoria = filaModificada.categoria.categoria_id;\r\n                }\r\n                detalles.push(filaModificada);\r\n            }\r\n        });\r\n\r\n    } catch (error) {\r\n        return detalles = '';\r\n    }\r\n\r\n    return detalles;\r\n}\r\nasync function validarPasajeros() {\r\n\r\n    let form = '#formPasajeros';\r\n    const pasajerosDet = [];\r\n    const contPasajeros = document.querySelectorAll(`${form} .cont-pasajero`);\r\n\r\n    contPasajeros.forEach((ruta, indice) => {\r\n        let nombre = ruta.querySelector('input[id^=\"paxName\"]');\r\n        let nombre_ruta = ruta.querySelector('input[id^=\"paxFile\"]');\r\n\r\n        let paxActual = {};\r\n\r\n        if (nombre && nombre.value.trim() !== '') {\r\n            // Obtener el id de pasajero desde el data-target\r\n            let id_pax = nombre.dataset.pax;\r\n\r\n            if (id_pax) {\r\n                paxActual.pasajero_id = id_pax.trim();\r\n            }\r\n            if (nombre_ruta && nombre_ruta.files.length > 0) {\r\n                paxActual.nombre_ruta = nombre_ruta.files[0];\r\n            }\r\n            paxActual.nombre = nombre.value.trim();\r\n            pasajerosDet.push(paxActual);\r\n        }\r\n    });\r\n\r\n    return pasajerosDet;\r\n}\r\nasync function validarRutaPax() {\r\n\r\n    // Crear un array para almacenar todas las relaciones posibles\r\n    const relaciones = [];\r\n\r\n    // Obtener todos los elementos <p> dentro del formulario 'formRelRuta'\r\n    $('#formRelRuta').find('p[data-id]').each(function () {\r\n        const $pElemento = $(this);\r\n        const ruta_id = $pElemento.attr('data-id');\r\n\r\n        $(this).find('p[data-paxid]').each(function () {\r\n            const $pElemento = $(this);\r\n            const pasajero_id = $pElemento.attr('data-paxid');\r\n\r\n            if (ruta_id && pasajero_id) {\r\n                relaciones.push({ ruta_id, pasajero_id });\r\n            }\r\n        });\r\n    });\r\n\r\n    return relaciones;\r\n}\r\nasync function consecutivoLineID() {\r\n    // Obtiene todos los datos de la grid\r\n    const allRowData = [];\r\n    gridApi.forEachNode(node => allRowData.push(node.data));\r\n\r\n    // Encuentra el máximo valor de lineID\r\n    let maxLineID = 0;\r\n    allRowData.forEach(row => {\r\n        if (row.line_id && row.line_id > maxLineID) {\r\n            maxLineID = row.line_id;\r\n        }\r\n    });\r\n\r\n    console.log(allRowData);\r\n    // Incrementa el máximo valor en 1 o establece en 1 si no hay registros\r\n    const newLineID = maxLineID + 1 || 1;\r\n\r\n    return newLineID;\r\n}\r\n\r\nasync function relRutasPax2(toggleRelRuta) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre == 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.setAttribute('data-id', nodo.data.relaciones_id); // Asumiendo que nodo.data.id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            selectPasajeros.name = `seleccion-${nodo.data.relaciones_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = ''; // Texto vacío para la opción\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Deshabilitar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n\r\n                let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                let idPasajero = $(`#${pasajeroElement.id}`).data('pax');\r\n                let option = document.createElement('option');\r\n                option.value = nombrePasajero; // Valor del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n\r\n                // let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                // let idPasajero = pasajeroElement.querySelector('input').getAttribute('data-pax'); // Obtener el ID del pasajero\r\n                // let option = document.createElement('option');\r\n                // option.value = nombrePasajero; // Valor del pasajero\r\n                // option.textContent = nombrePasajero; // Texto del pasajero\r\n                // option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n\r\n            // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n            let pasajerosSeleccionadosPorRuta = {};\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let pasajeroSeleccionado = selectPasajeros.value;\r\n                let idPasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].getAttribute('data-pax');\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-pax al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n        }\r\n    });\r\n}\r\nasync function relRutasPax(toggleRelRuta, params) {\r\n\r\n    if (toggleRelRuta.classList.contains('expanded')) return;\r\n\r\n    // Obtener los pasajeros guardados por ruta y cotización\r\n    let detRutPax = await obtenerRutPaxCot($(\"#cotizar_id\").val());\r\n\r\n    // Agrupar los pasajeros por ruta\r\n    let pasajerosPorRuta = detRutPax.reduce((acc, pax) => {\r\n        if (!acc[pax.ruta_id]) {\r\n            acc[pax.ruta_id] = [];\r\n        }\r\n        acc[pax.ruta_id].push(pax);\r\n        return acc;\r\n    }, {});\r\n\r\n    // Crear un objeto para mantener un registro de los pasajeros seleccionados por ruta\r\n    let pasajerosSeleccionadosPorRuta = {};\r\n\r\n    gridApi.forEachNode(function (nodo) {\r\n        if (nodo.data.categoria && nodo.data.categoria.nombre == 'Ruta') {\r\n\r\n            let pRuta = document.createElement('p');\r\n            pRuta.textContent = `Ruta: ${nodo.data.concepto}`;\r\n            pRuta.setAttribute('data-id', nodo.data.relaciones_id); // Asumiendo que nodo.data.id es el ID de la ruta\r\n\r\n            // Crear el elemento select\r\n            let selectPasajeros = document.createElement('select');\r\n            selectPasajeros.name = `seleccion-${nodo.data.relaciones_id}`;\r\n\r\n            // Obtener el formulario de pasajeros\r\n            let formPasajeros = document.getElementById('formPasajeros');\r\n\r\n            // Encontrar todos los elementos de pasajeros dentro del formulario\r\n            let pasajerosElements = formPasajeros.querySelectorAll('.cont-pasajero [data-pax]');\r\n\r\n            let optionEmpty = document.createElement('option');\r\n            optionEmpty.value = ''; // Valor vacío para la opción\r\n            optionEmpty.textContent = ''; // Texto vacío para la opción\r\n            optionEmpty.disabled = true; // Deshabilitar la opción vacía\r\n            optionEmpty.selected = true; // Seleccionar la opción vacía\r\n            selectPasajeros.appendChild(optionEmpty); // Agregar la opción vacía al inicio del select\r\n\r\n            // Iterar sobre los elementos de pasajeros y agregarlos al select\r\n            pasajerosElements.forEach(pasajeroElement => {\r\n                let nombrePasajero = $(`#${pasajeroElement.id}`).val();\r\n                let idPasajero = $(`#${pasajeroElement.id}`).data('pax');\r\n                let option = document.createElement('option');\r\n                option.value = nombrePasajero; // Valor del pasajero\r\n                option.textContent = nombrePasajero; // Texto del pasajero\r\n                option.setAttribute('data-pax', idPasajero); // Añadir atributo data-pax con el ID del pasajero\r\n                selectPasajeros.appendChild(option);\r\n            });\r\n\r\n            // Manejar el evento change del select\r\n            selectPasajeros.addEventListener('change', function () {\r\n                let pasajeroSeleccionado = selectPasajeros.value;\r\n                let idPasajeroSeleccionado = selectPasajeros.options[selectPasajeros.selectedIndex].getAttribute('data-pax');\r\n\r\n                // Obtener el ID de la ruta actual\r\n                let idRuta = pRuta.getAttribute('data-id');\r\n\r\n                // Verificar si ya existe un registro para la ruta actual\r\n                if (!pasajerosSeleccionadosPorRuta[idRuta]) {\r\n                    // Si no existe, crear un array vacío para almacenar los pasajeros seleccionados\r\n                    pasajerosSeleccionadosPorRuta[idRuta] = [];\r\n                }\r\n\r\n                console.log(pasajerosSeleccionadosPorRuta);\r\n\r\n                // Verificar si el pasajero ya ha sido seleccionado para esta ruta\r\n                if (pasajerosSeleccionadosPorRuta[idRuta].includes(idPasajeroSeleccionado)) {\r\n                    // Si el pasajero ya existe, mostrar un mensaje de error o realizar la acción correspondiente\r\n                    console.log('¡Este pasajero ya ha sido seleccionado para esta ruta!');\r\n                    return; // Detener el proceso\r\n                }\r\n\r\n                // Agregar el pasajero al registro de la ruta actual\r\n                pasajerosSeleccionadosPorRuta[idRuta].push(idPasajeroSeleccionado);\r\n\r\n                let pasajeroElemento = document.createElement('p');\r\n                pasajeroElemento.textContent = `Pasajero: ${pasajeroSeleccionado}`;\r\n                pasajeroElemento.setAttribute('data-paxid', idPasajeroSeleccionado); // Añadir atributo data-pax al elemento p\r\n\r\n                // Insertar el elemento p antes del selectPasajeros\r\n                pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n            });\r\n\r\n            // Agregar el select al elemento pRuta\r\n            pRuta.appendChild(selectPasajeros);\r\n\r\n            // Agregar el elemento p al formulario 'formRelRuta'\r\n            document.getElementById('formRelRuta').appendChild(pRuta);\r\n\r\n            // Rellenar los datos si ya existen para esta ruta\r\n            if (pasajerosPorRuta[nodo.data.relaciones_id]) {\r\n                pasajerosPorRuta[nodo.data.relaciones_id].forEach(pax => {\r\n\r\n                    let pasajeroElemento = document.createElement('p');\r\n                    pasajeroElemento.textContent = `Pasajero: ${pax.nombre}`;\r\n                    pasajeroElemento.setAttribute('data-paxid', pax.pasajero_id); // Añadir atributo data-pax al elemento p\r\n\r\n                    // Insertar el elemento p antes del selectPasajeros\r\n                    pRuta.insertBefore(pasajeroElemento, selectPasajeros);\r\n\r\n                    // Marcar la opción como seleccionada en el select\r\n                    let optionToSelect = Array.from(selectPasajeros.options).find(option => option.getAttribute('data-pax') == pax.pasajero_id);\r\n                    if (optionToSelect) {\r\n                        optionToSelect.selected = true;\r\n                    }\r\n\r\n                    // Agregar el pasajero al registro de la ruta actual\r\n                    if (!pasajerosSeleccionadosPorRuta[nodo.data.relaciones_id]) {\r\n                        pasajerosSeleccionadosPorRuta[nodo.data.relaciones_id.toString()] = [];\r\n                    }\r\n                    pasajerosSeleccionadosPorRuta[nodo.data.relaciones_id].push(pax.pasajero_id.toString());\r\n                });\r\n\r\n                console.log(pasajerosSeleccionadosPorRuta);\r\n            }\r\n        }\r\n    });\r\n}\r\n\r\n\r\n// FETCH\r\nasync function obtenerCotizaciones() {\r\n\r\n    try {\r\n        const respuesta = await fetch('../obtener/cotizaciones', {\r\n            method: 'GET',\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        let convert = verificarArray(data);\r\n        gridApi.setGridOption('rowData', convert);\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener las cotizaciones', 2500);\r\n    }\r\n}\r\nasync function obtnerVuelosId(id) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', id);\r\n\r\n        const respuesta = await fetch('../obtener/vuelos', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function establecerAsientos() {\r\n    let aeronaves = await obtenerAeronaves();\r\n    let aeronaveId = $('#aeronave_id').val();\r\n    const aeronaveEncontrada = aeronaves.find(objeto => objeto.aeronave_id == aeronaveId);\r\n    if (aeronaveEncontrada) PASAJEROS = aeronaveEncontrada.asientos;\r\n}\r\nasync function validaRutaTarifa(origenVal, destinoVal) {\r\n    try {\r\n        let cliente = $('#cliente_id').val();\r\n        let broker = $('#broker_id').val();\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('destino', destinoVal);\r\n        datos.append('cliente_id', cliente);\r\n        datos.append('broker_id', broker);\r\n        datos.append('aeronave_id', aeronave);\r\n\r\n        const respuesta = await fetch('../valida/ruta', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function obtenerAeropuertos() {\r\n    try {\r\n        const respuesta = await fetch('../allAeropuertos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Aeropuertos disponibles.', 2500);\r\n        } else {\r\n            AEROPUERTOS = data;\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerTipoCambio() {\r\n    try {\r\n        const respuesta = await fetch('../tipo/cambio', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data) {\r\n            SwalToast('warning', 'No hay Tipo de Cambio.', 2500);\r\n        } else {\r\n            $('#tipo_cambio option').val(data.tipo_cambio_id);\r\n            $('#tipo_cambio option').text(parseFloat(data.tipo_cambio).toFixed(2));\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerCategorias() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/categorias', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Categorias disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerProductos() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/productos', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) {\r\n            SwalToast('warning', 'No hay Productos disponibles.', 2500);\r\n        }\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerAeronaves() {\r\n    try {\r\n        const respuesta = await fetch('../allAeronaves', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n        if (!data.length > 0) SwalToast('warning', 'No hay Aeronaves disponibles.', 2500);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerClientes() {\r\n    try {\r\n        const respuesta = await fetch('../allClientes', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data.length > 0) SwalToast('warning', 'No hay Clientes disponibles.', 2500);\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerEmpresas() {\r\n    try {\r\n        const respuesta = await fetch('../brokers/activas', {\r\n            method: 'GET'\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        if (!data.length > 0) { SwalToast('warning', 'No hay Programas disponibles.', 2500); }\r\n        else {\r\n            EMPRESAS = data;\r\n        }\r\n\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerCodigosIATA(origenVal, destinoVal) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('destino', destinoVal);\r\n\r\n        const respuesta = await fetch('../obtener/codigos', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n        const data = await respuesta.json();\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Ocurrio Un Error', 'Conección Perdida a BD.', false);\r\n    }\r\n}\r\nasync function obtenerTasaAterrizaje(origenVal, aeronave) {\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('origen', origenVal);\r\n        datos.append('aeronave_id', aeronave);\r\n\r\n        const respuesta = await fetch('../valida/aterrizaje', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n\r\n        return data;\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function obtenerCotizacionPDF() {\r\n    try {\r\n        const respuesta = await fetch('../obtener/pdf', {\r\n            method: 'GET',\r\n            headers: {\r\n                'Accept': 'application/pdf', // Asegurar que el servidor devuelve un PDF\r\n            },\r\n        });\r\n        const data = await respuesta.json();\r\n        // const blob = await respuesta.blob();\r\n        if (data.urlArchivo) {\r\n            window.open(data.urlArchivo, '_blank');\r\n        } else {\r\n            console.error('No se pudo obtener la URL del archivo PDF.');\r\n        }\r\n        return\r\n\r\n        console.log(blob);\r\n        const url = window.URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = 'nombre-del-archivo.pdf';\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalToast('warning', 'Error al obtener los usuarios', 2500);\r\n    }\r\n}\r\nasync function validarDetEliminar(lineId, rowNode) {\r\n\r\n    // Verificar si la fila tiene la categoría 'Ruta'\r\n    const categoriaRuta = rowNode.data.categoria.nombre === 'Ruta';\r\n\r\n    if (categoriaRuta) {\r\n        const aeronave = $('#aeronave_id').val();\r\n\r\n        gridApi.forEachNode(async node => {\r\n            const rowData = node.data;\r\n            const rowNodeP = node;\r\n\r\n            // Buscar las filas con la categoría 'Pernocta' y el mismo ID de relaciones\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Pernocta' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.cot_det_id)\r\n            }\r\n\r\n            // Buscar las filas con la categoría 'Tua' y el mismo ID de relaciones\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Tua' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.cot_det_id)\r\n            }\r\n\r\n            // // Buscar las filas con la categoría 'Aterrizaje\r\n            // if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje') {\r\n            //     const destino = rowNode.data.destino.aeropuerto_id;\r\n            //     const valAterrizaje = await obtenerTasaAterrizaje(destino, aeronave);\r\n\r\n            //     // Buscar si existe relacion \r\n            //     if (rowData.relaciones_id == valAterrizaje.aterrizaje.tasa_aterrizaje_id) {\r\n            //         console.log(rowNodeP);\r\n            //         limpiarCelda(rowNodeP);\r\n            //         await eliminarDet(rowData.cot_det_id)\r\n            //     }\r\n            // }\r\n\r\n            // Buscar las filas con la categoria 'Aterrizaje'\r\n            if (rowData.categoria && rowData.categoria.nombre === 'Aterrizaje' && rowData.rel_ruta === lineId) {\r\n                limpiarCelda(rowNodeP);\r\n                await eliminarDet(rowData.cot_det_id)\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    // Eliminamos el Registro clickeado\r\n    await eliminarDet(rowNode.data.cot_det_id)\r\n    limpiarCelda(rowNode);\r\n}\r\nasync function crearCotizacion() {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        const aeronave_id = $('#aeronave_id').val();\r\n        const fechaCot = $('#fecha-cot').val();\r\n        const estatus = $('#estatus').val();\r\n        if ($('#slctOpcion').val() == 1) {\r\n            const cliente_id = $('#cliente_id').val();\r\n            datos.append('cliente_id', cliente_id);\r\n        } else if ($('#slctOpcion').val() == 2) {\r\n            const broker_id = $('#broker_id').val();\r\n            datos.append('broker_id', broker_id);\r\n        }\r\n        const tipo_cambio = $('#tipo_cambio').val();\r\n        const cant_pernocta = $('#cant_pernocta').val();\r\n        const tot_pernocta = sinComa($('#tot_pernocta').val());\r\n        const tot_hrs = sinComa($('#tot_hrs').val());\r\n        const subtotal = sinComa($('#subtotal').val());\r\n        const ivaNac = sinComa($('#ivaNac').val());\r\n        const ivaInt = sinComa($('#ivaInt').val());\r\n        const total = sinComa($('#total').val());\r\n        const costo_id = $('#costo_id').val();\r\n        const comentarios = $('#rt-comment').val();\r\n\r\n        let tipo_de_viaje = 0;\r\n\r\n        let detalles = await validarGrid();\r\n        let pasajerosDet = await validarPasajeros();\r\n\r\n        if (detalles.length > 0) {\r\n            let dtO1 = detalles[0]['origen'];\r\n            let dtD1 = detalles[0]['destino'];\r\n            if (detalles.length == 1) {\r\n                tipo_de_viaje = 1;\r\n            } else if (detalles.length == 2) {\r\n                let dtO2 = detalles[1]['origen'];\r\n                let dtD2 = detalles[1]['destino'];\r\n                if (dtO1 == dtD2 && dtD1 == dtO2) {\r\n                    tipo_de_viaje = 2;\r\n                } else {\r\n                    tipo_de_viaje = 3;\r\n                }\r\n            } else {\r\n                tipo_de_viaje = 3;\r\n            }\r\n            datos.append('aeronave_id', aeronave_id);\r\n            datos.append('fechaCot', fechaCot);\r\n            datos.append('estatus', estatus);\r\n            datos.append('tipo_cambio_id', tipo_cambio);\r\n            datos.append('cant_pernocta', cant_pernocta);\r\n            datos.append('tot_pernocta', tot_pernocta);\r\n            datos.append('tot_hr_cotizadas', tot_hrs);\r\n            datos.append('subtotal', subtotal);\r\n            datos.append('ivaNac', ivaNac);\r\n            datos.append('ivaInt', ivaInt);\r\n            datos.append('total', total);\r\n            datos.append('tipo_de_viaje', tipo_de_viaje);\r\n            datos.append('costo_id', costo_id);\r\n            datos.append('comentarios', comentarios);\r\n            datos.append('pasajerosDet', JSON.stringify(pasajerosDet));\r\n            datos.append('detalles', JSON.stringify(detalles));\r\n\r\n            // Agregar los archivos al FormData\r\n            pasajerosDet.forEach((pasajero, index) => {\r\n                if (pasajero && pasajero.nombre) {\r\n                    let prefijo;\r\n                    if (pasajero.pasajero_id) {\r\n                        prefijo = pasajero.pasajero_id;\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    } else {\r\n                        // Obtener la primera letra de cada palabra en el nombre\r\n                        prefijo = pasajero.nombre.split(' ').map(word => word.charAt(0)).join('');\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const respuesta = await fetch('../crear/costeo', {\r\n                method: 'POST',\r\n                body: datos\r\n            });\r\n\r\n            const data = await respuesta.json();\r\n\r\n            if (data.exito == 1) {\r\n                // Registro Creado Exitosamente\r\n                SwalLoad('success', 'Éxito', 'Registro Creado Correctamente', false);\r\n\r\n                setTimeout(() => {\r\n                    swal.close();\r\n                    resetForm();\r\n                    obtenerCotizaciones();\r\n                }, 1500);\r\n            }\r\n            else if (data.exito == 0) {\r\n                SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n            }\r\n\r\n            if (data.alertas) {\r\n                SwalToast('warning', data.alertas.error, 2500);\r\n                return\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function actualizarCotizacion() {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        const cotizar_id = $('#cotizar_id').val();\r\n        const folio = $('#folio').val();\r\n        const estatus = $('#estatus').val();\r\n        const fechaCot = $('#fecha-cot').val();\r\n        const aeronave_id = $('#aeronave_id').val();\r\n        if ($('#slctOpcion').val() == 1) {\r\n            const cliente_id = $('#cliente_id').val();\r\n            datos.append('cliente_id', cliente_id);\r\n        } else if ($('#slctOpcion').val() == 2) {\r\n            const broker_id = $('#broker_id').val();\r\n            datos.append('broker_id', broker_id);\r\n        }\r\n        const tipo_cambio = $('#tipo_cambio').val();\r\n        const cant_pernocta = $('#cant_pernocta').val();\r\n        const tot_pernocta = sinComa($('#tot_pernocta').val());\r\n        const tot_hrs = sinComa($('#tot_hrs').val());\r\n        const subtotal = sinComa($('#subtotal').val());\r\n        const ivaNac = sinComa($('#ivaNac').val());\r\n        const ivaInt = sinComa($('#ivaInt').val());\r\n        const total = sinComa($('#total').val());\r\n        const costo_id = $('#costo_id').val();\r\n        const comentarios = $('#rt-comment').val();\r\n\r\n        let tipo_de_viaje = 0;\r\n        let detalles = await validarGrid();\r\n        let pasajerosDet = await validarPasajeros();\r\n\r\n        if (detalles.length > 0) {\r\n            let dtO1 = detalles[0]['origen'];\r\n            let dtD1 = detalles[0]['destino'];\r\n            if (detalles.length == 1) {\r\n                tipo_de_viaje = 1;\r\n            } else if (detalles.length == 2) {\r\n                let dtO2 = detalles[1]['origen'];\r\n                let dtD2 = detalles[1]['destino'];\r\n                if (dtO1 == dtD2 && dtD1 == dtO2) {\r\n                    tipo_de_viaje = 2;\r\n                } else {\r\n                    tipo_de_viaje = 3;\r\n                }\r\n            } else {\r\n                tipo_de_viaje = 3;\r\n            }\r\n            datos.append('cotizar_id', cotizar_id);\r\n            datos.append('folio_cotizar', folio);\r\n            datos.append('aeronave_id', aeronave_id);\r\n            datos.append('fecha_creacion', fechaCot);\r\n            datos.append('estatus', estatus);\r\n            datos.append('tipo_cambio_id', tipo_cambio);\r\n            datos.append('cant_pernocta', cant_pernocta);\r\n            datos.append('tot_pernocta', tot_pernocta);\r\n            datos.append('tot_hr_cotizadas', tot_hrs);\r\n            datos.append('subtotal', subtotal);\r\n            datos.append('ivaNac', ivaNac);\r\n            datos.append('ivaInt', ivaInt);\r\n            datos.append('total', total);\r\n            datos.append('comentarios', comentarios);\r\n            datos.append('tipo_de_viaje', tipo_de_viaje);\r\n            datos.append('costo_id', costo_id);\r\n            datos.append('pasajerosDet', JSON.stringify(pasajerosDet));\r\n            datos.append('detalles', JSON.stringify(detalles));\r\n\r\n            // Agregar los archivos al FormData\r\n            pasajerosDet.forEach((pasajero, index) => {\r\n                if (pasajero && pasajero.nombre) {\r\n                    let prefijo;\r\n                    if (pasajero.pasajero_id) {\r\n                        prefijo = pasajero.pasajero_id;\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    } else {\r\n                        // Obtener la primera letra de cada palabra en el nombre\r\n                        prefijo = pasajero.nombre.split(' ').map(word => word.charAt(0)).join('');\r\n                        datos.append(`archivo_${prefijo}`, pasajero.nombre_ruta);\r\n                    }\r\n                }\r\n            });\r\n\r\n            const respuesta = await fetch('../actualizar/costeo', {\r\n                method: 'POST',\r\n                body: datos\r\n            });\r\n\r\n            const data = await respuesta.json();\r\n\r\n            if (data.exito == 1) {\r\n                SwalLoad('success', 'Éxito', 'Registro Actualizado Correctamente', false);\r\n                setTimeout(() => {\r\n                    swal.close();\r\n                    resetForm();\r\n                    obtenerCotizaciones();\r\n                }, 1500);\r\n            } else if (data.exito == 0) {\r\n                SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n            }\r\n\r\n            if (data.alertas) {\r\n                SwalToast('warning', data.alertas.error, 2500);\r\n                return\r\n            }\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function actualizarRutaPax() {\r\n\r\n    try {\r\n        let relRutaPax = await validarRutaPax();\r\n        if (relRutaPax == '') return\r\n        const cotizar_id = $('#cotizar_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('id_cot', cotizar_id);\r\n        datos.append('relRutaPax', JSON.stringify(relRutaPax));\r\n\r\n        const respuesta = await fetch('../actualizar/relacionRutaPax', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        console.log(data);\r\n\r\n        $('#formRelRuta').empty();\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\nasync function eliminarDet(id) {\r\n\r\n    try {\r\n        const cotizar = $('#cotizar_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('cot_det_id', id);\r\n        datos.append('cotizar_id', cotizar);\r\n\r\n        const respuesta = await fetch('../eliminar/detalle', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            // Registro Creado Exitosamente\r\n            SwalToast('success', 'Registro Eliminado Correctamente', 2500);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return;\r\n        }\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n\r\n}\r\nasync function eliminarPasajero(cotizar_id, pasajero_id) {\r\n\r\n    try {\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', cotizar_id);\r\n        datos.append('pasajero_id', pasajero_id);\r\n\r\n        const respuesta = await fetch('../eliminar/pasajero', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n\r\n        if (data.exito == 1) {\r\n            SwalToast('success', 'Registro Eliminado Correctamente', 2500);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return;\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n\r\n}\r\nasync function generarServicio() {\r\n\r\n    try {\r\n        const cotizar_id = $('#cotizar_id').val();\r\n\r\n        const datos = new FormData();\r\n        datos.append('cotizar_id', cotizar_id);\r\n\r\n        const respuesta = await fetch('../generar/servicio', {\r\n            method: 'POST',\r\n            body: datos\r\n        });\r\n\r\n        const data = await respuesta.json();\r\n        // console.log(data);\r\n\r\n        if (data.exito == 1) {\r\n            SwalLoad('success', 'Éxito', 'Servicio Creado Correctamente', false);\r\n            setTimeout(() => {\r\n                swal.close();\r\n                resetForm();\r\n                obtenerCotizaciones();\r\n            }, 1500);\r\n        } else if (data.exito == 0) {\r\n            SwalLoad('error', 'Error en la Transacción', data.errorSMS, true);\r\n        }\r\n\r\n        if (data.alertas) {\r\n            SwalToast('warning', data.alertas.error, 2500);\r\n            return\r\n        }\r\n\r\n    } catch (error) {\r\n        console.error(error);\r\n        SwalLoad('error', 'Error en la Conexión', 'Comunicate con el Administrador', false);\r\n    }\r\n}\r\n//  CLASES\r\nclass CustomHeaderGroup {\r\n\r\n    init(params) {\r\n        this.params = params;\r\n        this.eGui = document.createElement('div');\r\n        this.eGui.className = 'ag-header-group-cell-label';\r\n        this.eGui.innerHTML = '' +\r\n            '<div class=\"customHeaderLabel\">' + this.params.displayName + '</div>' +\r\n            '<div class=\"customExpandButton\"><i class=\"fa fa-arrow-right\"></i></div>';\r\n\r\n        this.onExpandButtonClickedListener = this.expandOrCollapse.bind(this);\r\n        this.eExpandButton = this.eGui.querySelector(\".customExpandButton\");\r\n        this.eExpandButton.addEventListener('click', this.onExpandButtonClickedListener);\r\n\r\n        this.onExpandChangedListener = this.syncExpandButtons.bind(this);\r\n        this.params.columnGroup.getProvidedColumnGroup().addEventListener('expandedChanged', this.onExpandChangedListener);\r\n\r\n        this.syncExpandButtons();\r\n    }\r\n\r\n    getGui() {\r\n        return this.eGui;\r\n    }\r\n\r\n    expandOrCollapse() {\r\n        var currentState = this.params.columnGroup.getProvidedColumnGroup().isExpanded();\r\n        this.params.setExpanded(!currentState);\r\n    }\r\n\r\n    syncExpandButtons() {\r\n        function collapsed(toDeactivate) {\r\n            toDeactivate.className = toDeactivate.className.split(' ')[0] + ' collapsed';\r\n        }\r\n\r\n        function expanded(toActivate) {\r\n            toActivate.className = toActivate.className.split(' ')[0] + ' expanded';\r\n        }\r\n\r\n        if (this.params.columnGroup.getProvidedColumnGroup().isExpanded()) {\r\n            expanded(this.eExpandButton);\r\n        } else {\r\n            collapsed(this.eExpandButton);\r\n        }\r\n    }\r\n\r\n    destroy() {\r\n        this.eExpandButton.removeEventListener('click', this.onExpandButtonClickedListener);\r\n    }\r\n}  \r\n"]}